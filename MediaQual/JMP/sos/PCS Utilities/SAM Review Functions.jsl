

file_path = "\\atdfile3.ch.intel.com\atd-web\MFGReports.ch.intel.com\PCS Portal\Engineering Action Required\";
platform_gaps_path = "\\atdfile3.ch.intel.com\atd-web\MFGReports.ch.intel.com\pcsportal\engineering\PlatformAudit\";
//ref_table_path = "\\atdfile3\oep\Statistics\PCS Portal\Output Files\Modified Lookup Tables\";
lookup_table_path = "\\atdfile3.ch.intel.com\atd-web\MFGReports.ch.intel.com\pcsportal\Copied PCS Lookup Tables\";
//PRF_Name = "\\atdfile3.ch.intel.com\oep\statistics\PCS Portal\Output Files\Modified Lookup Tables\PRF_All_Platforms.jmp";
//amlt_table_path = "\\atdfile3\oep\Statistics\PCS Portal\PCS Lookup Tables\";
write_path = "\\atdfile3.ch.intel.com\atd-web\MFGReports.ch.intel.com\pcsportal\SAM_Review_Project\";
six_month_data_file_path = "\\atdfile3.ch.intel.com\atd-web\MFGReports.ch.intel.com\pcsportal\trends\spcTrends\";
user_guide_link = "http://mfgreports.ch.intel.com/SAM_Review/User_Guide/SAM%20Review%20Dashboard%20Instructions.pptx";
//User_Queue_dir
//baseDir = "\\atdfile3.ch.intel.com\atd-web\MFGReports.ch.intel.com\SAM_Review\Request_Queue\";
//user_queue_dir = "\\atdfile3.ch.intel.com\atd-web\MFGReports.ch.intel.com\SAM_Review\Request_Queue\xyz";
user_queue_dir = "";
user_dir = "";
output_rpt_perc = "";
prf_filter_selection = "";
favoritefileName = "";
favoritefileNameSPCChart = "";

//parent_dir_baseDir = "\\atdfile3.ch.intel.com\atd-web\MFGReports.ch.intel.com\SAM_Review\";
//user_dir = "C:\Users\princesh\OneDrive - Intel Corporation\Desktop\SAM Review\SAM Review Results\Reports\";
//user_dir = "C:\Users\princesh.AMR\OneDrive - Intel Corporation\Desktop\SAM_DASM\Reports\";
//user_dir = "C:\Users\princesh\OneDrive - Intel Corporation\Desktop\SAM_DASM\Reports\";
//user_dir = "C:\Users\princesh\OneDrive - Intel Corporation\Desktop\SAM Review\Reports\";

//////////////////////////////////////IN/OUT of Audit Scope//////////////////
//Added function to find IN/OUT of scope areas for audit
Check_Audit_Scope = Function({dt},
	
	
	dt_area_module = Open(lookup_table_path || "Area_Module_Lookup.jmp");

	dt << Update(
		With(Data Table("Area_Module_Lookup")),
		Match Columns(:Area = :AREA),
		Add Columns from Update table( :Module, :Area Scope, :Area Grouping )
	);
	
	close(dt_area_module, NoSave);
	dt << Select Where(:Area Scope == "OUT");
	If(NRows(dt << Get Selected Rows) > 0, dt << delete rows() );
	
	dt << Clear Select << Clear Column Selection;
	currentdatatable(dt);
	for each row(
		if(IsMissing(column(dt,"Module")[]), column(dt,"Module")[] = "Unmapped");
		//if(IsMissing(column(dt,"Factory")[]), column(dt,"Factory")[] = "Unmapped")
	);
	dt << Clear Column Selection;
	
);
/*
create_user_queue_dir = Function({user_id},
	
	print(user_id);
	
	user_queue_dir = baseDir || user_id;
	If(Directory Exists(user_queue_dir),
		 Delete Directory( user_queue_dir ); //delete old directory
		 CreateDirectory(user_queue_dir);//create new directory
		 ,
		 Create Directory(user_queue_dir),
	);
		
	
	
	//CE_Gaps
	CE_Gaps_dir = user_queue_dir || "\\" || "CE_Gaps";
	CreateDirectory(CE_Gaps_dir);
	//Charts
	Charts_dir = user_queue_dir || "\\" || "Charts";
	CreateDirectory(Charts_dir);
	//Comprehensiveness_Gaps
	Comprehensiveness_Gaps_dir = user_queue_dir || "\\" || "Comprehensiveness_Gaps";
	CreateDirectory(Comprehensiveness_Gaps_dir);
	//Platform_Gaps
	Platform_Gaps_dir = user_queue_dir || "\\" || "Platform_Gaps";
	CreateDirectory(Platform_Gaps_dir);
	//RFC_Gaps
	RFC_Gaps_dir = user_queue_dir || "\\" || "RFC_Gaps";
	CreateDirectory(RFC_Gaps_dir);
	print("temp directories created for holding results...");
	
);
*/

create_user_dir = Function({},
	print("---------- create_user_dir Function ----------");
	//print(path);
	//user_queue_dir = path;
	
	user_dir = user_queue_dir || "Reports";
	
	If(Directory Exists(user_dir),
		 Delete Directory( user_dir ); //delete old directory
		 CreateDirectory(user_dir);//create new directory
		 ,
		 Create Directory(user_dir),
	);
	
		
	
	
	//CE_Gaps
	CE_Gaps_dir = user_dir || "\\" || "CE_Gaps";
	CreateDirectory(CE_Gaps_dir);
	//Charts
	Charts_dir = user_dir || "\\" || "Charts";
	CreateDirectory(Charts_dir);
	//Comprehensiveness_Gaps
	Comprehensiveness_Gaps_dir = user_dir || "\\" || "Comprehensiveness_Gaps";
	CreateDirectory(Comprehensiveness_Gaps_dir);
	//Platform_Gaps
	Platform_Gaps_dir = user_dir || "\\" || "Platform_Gaps";
	CreateDirectory(Platform_Gaps_dir);
	//RFC_Gaps
	RFC_Gaps_dir = user_dir || "\\" || "RFC_Gaps";
	CreateDirectory(RFC_Gaps_dir);
	
	//Repeat_Trigger
	Repeat_Trigger_dir = user_dir || "\\" || "Repeat_Trigger";
	CreateDirectory(Repeat_Trigger_dir);
	
	print("User Directories created for holding results...");
	
);


SetLocalDir = Function({local_dir},
	print("---------- SetLocalDir Function ----------");
	user_queue_dir = local_dir;
	print(user_queue_dir);
	create_user_dir();
	
);

OpenDataTables = Function({},
	
	//Open files again
	facility = Open( user_dir || "\\"|| "Facility.jmp", invisible);
	dashboard_table = Open( user_dir || "\\" || "Dashboard.jmp", invisible);
	dt_subset = Open( user_dir || "\\" || "data_subset.jmp", invisible);
	Monitor_Sets_temp = Open(user_dir || "\\" || "Monitor_Sets.jmp", invisible);

	//Remove duplicate monitorsets
	monitor_sets = Data Table( "Monitor_Sets" ) << Summary(
		Group( :monitor_set_name ),
		Freq( "None" ),
		Weight( "None" ),
		Link to original data table( 0 )
	);
	monitor_sets << Delete column("N Rows");
	monitor_sets << ShowWindow( 0 );
	close( Data Table( "Monitor_Sets" ),NoSave);
	monitor_sets << Set Name("Monitor_Sets");
	Data Table( "Monitor_Sets" ) << save( user_dir || "\\"  || "Monitor_Sets.jmp");
	
);



//Get monitosets
GetMonitorSets=Function({},
	print("---------- GetMonitorSets Function ----------");
	dt = Current Data Table() << clear column selection ;
	dt_subset = Current Data Table() << Subset(Output Table("data_subset"));
	dt <<Clear Row States<<Clear Column Selection();
	//save 
	print(user_queue_dir);
	dt_subset << save( user_dir || "\\" || "data_subset.jmp");
	
	
	Data Table( "data_subset" ) << Summary(
		Group(
			:monitor_set_name
		),
		Freq( "None" ),
		Weight( "None" ),
		Output Table( "Monitor_Sets" ), 
		Link to original data table( 0 )
	);
	Data Table( "Monitor_Sets" ) << Delete column("N Rows");
	
	Data Table( "Monitor_Sets" ) << Select Where(:Name("monitor_set_name") == "");
	If( NRow(Data Table( "Monitor_Sets" ) << Get Selected Rows) > 0, Data Table( "Monitor_Sets" ) << delete rows);
	
	//Create Dashboard Table
	dashboard_table = New Table("Dashboard", 
			New Column("Key", Character), 
			New Column("Value", Numeric)
	);
		
	//Update Dashboard table
	row = {:Key = "# of Monitor Sets selected from Workstream",:Value = NRows(Data Table( "Monitor_Sets" ))}; // Define Row To Add
	dashboard_table << add Rows(row );
	
	//Get site name
	Data Table( "data_subset" ) << Summary(
			Group(
				:facility
			),
			Freq( "None" ),
			Weight( "None" ),
			Output Table( "Facility" ),
			Link to original data table( 0 )
		);
	site = Data Table("Facility"):"facility" << getvalues;
	Data Table( "Facility" ) << Delete column("N Rows");
	
	//WATD Check
	Data Table( "data_subset" ) << Summary(
			Group(
				:FACTORY
			),
			Freq( "None" ),
			Weight( "None" ),
			Output Table( "FACTORY" ),
			Link to original data table( 0 )
		);
	data_subset_factory = Data Table("FACTORY"):"FACTORY" << getvalues;
	close(Data Table( "FACTORY" ), nosave);
	missing_rows = Data Table( "Facility" ) << get rows where( Is Missing( :facility ) );
	if(N Rows(missing_rows) > 0 ,
		Data Table( "Facility" ) << delete rows( missing_rows );
		,
		//do nothing
	);
	//try(Data Table( "Facility" ) << delete rows( missing_rows ));
	Data Table( "Facility" ) << New Column("SITE", character, nominal, formula(
		
		if(:facility == "A01", "PG",
			(:facility == "A04" & data_subset_factory[1] == "WATD"), "WATD",
			:facility == "A04", "ATTD",
			:facility == "A06", "CR",
			:facility == "A13", "KM1_2",
			:facility == "A15", "KM5",
			:facility == "A46", "CDP",
			:facility == "A47", "CD1",
			:facility == "A48", "CD6",
			:facility == "A52", "SPTD",
			:facility == "AJR", "IDPJ",
			:facility == "AAL", "AFO",
			:facility == "A90", "SS",
			:facility
		) // END OF IF
		) // END OF FORMULA
	); // END OF SITE COLUMN
	
	
	Data Table( "Monitor_Sets" ) << save( user_dir || "\\" || "Monitor_Sets.jmp");
	
	//create a copy of monitorsets
	dt2 = Eval(Data Table( "Monitor_Sets" ) << getScript);
	dt2 << New Column("Filter_Source", Character, Values( Repeat( { "CR" }, nrows( dt2 ) ) ) );
	dt2 << save( user_dir || "\\" || "Monitor_Sets_Source.jmp");
	close(dt2 , NoSave);
	//Data Table( "Monitor_Sets" ) << save( write_path || "Dashboard/Dashboard_KM1.csv");
	//close(Data Table("facility"), NoSave);
	/*
	//Filters applied
	filters_applied = Data Table( "data_subset" ) << Summary(
		Group(
			:facility,
			:product,
			:mkt_code,
			:mm_code,
			:prodgroup3,
			:pkgdevrevstep,
			:market_code_name,
			:die_code_name,
			:form_factor,
			:package_tech
		),
		Freq( "None" ),
		Weight( "None" ),
		Link to original data table(0),
		Output Table( "Filters" )
	);
	filters_applied << Delete column("N Rows");
	filter_table = New Table("Filters", 
		New Column("Parameter", Character), 
		New Column("Values", Character)
	);
	/* Obtain a list of numeric/continuous column names as strings */
	colList = filters_applied << Get Column Names( String );

	For( i = 1, i <= Nitems( colList ), i++,
		summarize(unique_values=by(colList[i]));
		unique_values = Associative Array( colList[i] << getvalues ) << Get Keys;
		//data = [];
		//data[i] = unique_values;
		a = Associative Array( unique_values ) << Get Keys;
		//Update Dashboard table
		row = {:Parameter = colList[i] ,:Values = words(unique_values)}; // Define Row To Add
		filter_table << add Rows(row );
	);
	*/

	print("MonitorSet information Recived...");
	
	//closing files
	Data Table( "Facility" ) << save( user_dir || "\\" || "Facility.jmp");
	close(Data Table( "Facility" ), NoSave);
	dashboard_table << save( user_dir || "\\" || "Dashboard.jmp");
	close(dashboard_table, NoSave);
	close(Data Table( "data_subset" ), NoSave);
	//dt << show window(1);
	close(dt, NoSave);
	//dt << get name();
	FinalReport << close window;
);

//Get charts based on monitorsets
Get_Charts_From_Chart_Report = Function({},

	//Open Chart report : should we open chart report based on site or all? if we join based on monitorsets, there may be shared mon_set across sites
	//cr = Open(ref_table_path || "All Sites Chart Report.jmp"); commented on 1/25/2021
	
	//added by prince on 1/25/2021
	site = Data Table("Facility"):"SITE" << getvalues;
	if (site[1]== "WATD",
		cr = Open(lookup_table_path || "DailyChartReport_" || site[1] || ".jmp", invisible);
		//get DIEPREP related Charts from ATTD Chart Report and concatinate with WATD Chart Report
		cr_ATTD = Open(lookup_table_path || "DailyChartReport_ATTD.jmp", invisible);
		cr_ATTD << Select Where(:Name("Area Grouping") == "DIE PREP");
		If( N Rows( cr_ATTD << Get Selected Rows() ) > 0, 
			charts_dieprep_watd = cr_ATTD << Subset( Output Table Name("Charts_Dieprep_WATD"), Link to original data table( 0 ) );
			for each row( :SITE = "WATD");
			cr << concatenate(charts_dieprep_watd, append to first table(1));
			close(cr_ATTD, nosave);
			close(charts_dieprep_watd, nosave);
		,
			close(cr_ATTD, nosave);
		);
	,
		cr = Open(lookup_table_path || "DailyChartReport_" || site[1] || ".jmp", invisible);
	);
	//remove charts older than 43 days - commented again as we are missing this highlights gaps between golden and chart report. Also monitorsets not at site : Dawn suggested to include everything.
	//cr << New column("Data_Within_6WW", Formula(:Date of Latest Point > Today() - In Days(43)));
	//column(cr, "Data_Within_6WW") << Delete Property(Formula);
	//cr << Select Where( :Name("Data_Within_6WW") == 0 | ismissing(:Name("Data_Within_6WW")));
	//If(NRows(cr << Get Selected Rows) > 0, cr << delete rows() ); 
	//cr << Delete Column("Data_Within_6WW");
	
	
	// Join chart report with given monitorsets
	/*Data Table( "data_subset" ) << Join(
	//With( Data Table( "All Sites Chart Report" ) ),
	With( cr ),
	SelectWith(
		:SITE,
		:Module,
		:AREA,
		:MONITOR SET,
		:MEASUREMENTSET,
		:SUBSET,
		:CHARTTYPE
	),
	Match Flag( 1 ),
	By Matching Columns( :monitor_set_name = :MONITOR SET ),
	Drop multiples( 0, 0 ),
	Include Nonmatches( 1, 1 ), //changed from (0,0) to (1,1) on 11/10/2020
	Preserve main table order( 1 ),
	Output Table( "Mapped_Chart_Report" )
	);*/
	
	//edited
	Data Table( "Monitor_Sets" ) << Join(
	With( cr ),
	Match Flag( 1 ),
	By Matching Columns( :monitor_set_name = :MONITOR SET ),
	Drop multiples( 0, 0 ),
	Include Nonmatches( 1, 1 ),
	Preserve main table order( 1 ),
	Output Table( "Mapped_Chart_Report" )
	);
	close(cr, NoSave);	
	close(Data Table( "data_subset" ), NoSave);//added on 1/26/2021
	
	
	//Find Monitorsets, which are not available in CR document
	Data Table("Mapped_Chart_Report") << Select Where( :Name("Match Flag") == 1); // changed to 1 from 2(as we must only be interested in entries in our subset but not in chart report. Ideally it should be 0 rows)
	
	If( N Rows( Data Table("Mapped_Chart_Report") << Get Selected Rows() ) > 0, 
		
		monitors_not_in_CR = Data Table("Mapped_Chart_Report") << Subset( Output Table Name("monitors_not_in_CR"), Link to original data table( 0 ) );
		
		Data Table( "monitors_not_in_CR" ) << Summary(
		Group(
			//:Name("Monitor SET")
			:Name("Monitor_set_name")
		),
		Freq( "None" ),
		Weight( "None" ),
		Output Table( "Monitor_Sets_not_in_ChartReport" ), 
		Link to original data table( 0 )
		);
		Data Table( "Monitor_Sets_not_in_ChartReport" ) << Delete column("N Rows");
	
		//Data Table( "Monitor_Sets_not_in_ChartReport" ) << Select Where(:Name("MONITOR SET") == "" | :Name("MONITOR SET") == "__HEADER ROW__");
		//If( NRow(Data Table( "Monitor_Sets_not_in_ChartReport" ) << Get Selected Rows) > 0, Data Table( "Monitor_Sets_not_in_ChartReport" ) << delete rows);
		//Update Dashboard table
		row = {:Key = "# of Monitor Sets not in Chart Report",:Value = NRows(Data Table( "Monitor_Sets_not_in_ChartReport" ))}; // Define Row To Add
		dashboard_table << add Rows(row );
		close(monitors_not_in_CR, NoSave);
		Data Table( "Monitor_Sets_not_in_ChartReport" ) << save( user_dir || "\\" || "Charts/Monitor_Sets_not_in_ChartReport.jmp");
		close(Data Table( "Monitor_Sets_not_in_ChartReport" ), NoSave);
	, //else
		row = {:Key = "# of Monitor Sets not in Chart Report",:Value = 0}; // Define Row To Add
		dashboard_table << add Rows(row );
		
	);
	
	
	
	
	//find Monitorsets, those are matching with CR : matching results can help us find Gaps associated with CR(maybe those matches are related to other site or module)
	//maybe we can add a filter here for user to select Site, Module and Monitorset etc
	Data Table("Mapped_Chart_Report") << clear select;
	Data Table("Mapped_Chart_Report") << Select Where( :Name("Match Flag") == 3);
	
	If( N Rows( Data Table("Mapped_Chart_Report") << Get Selected Rows() ) > 0, 
		
		monitors_in_CR = Data Table("Mapped_Chart_Report") << Subset( Output Table Name("monitors_in_CR"), Link to original data table( 0 ) );
		
		//Summarize Mapped_Chart_Report to get unique charts
		monitors_in_CR << Summary(
			Group(
				:SITE,
				:Module,
				:AREA,
				:MONITOR SET,
				:MEASUREMENTSET,
				:SUBSET,
				:CHARTTYPE
			),
			Max( :Date of Latest Point ),
			Freq( "None" ),
			Weight( "None" ),
			Output Table( "Summarized_Mapped_Chart_Report" ),
			Link to original data table( 0 )
		);
		Data Table( "Summarized_Mapped_Chart_Report" ) << Delete column("N Rows");
		Data Table( "Summarized_Mapped_Chart_Report" ):Name("Max(Date of Latest Point)") << Set Name("Date of Latest Point");
		//Column( dt, i ) << set name( Substr( ColList[i], 2 ) )
		//Subset charts related to site
		Data Table( "Summarized_Mapped_Chart_Report" ) <<
		Join(
			With( Data Table( "Facility" ) ),
			Select(
				:SITE,
				:Module,
				:AREA,
				:MONITOR SET,
				:MEASUREMENTSET,
				:SUBSET,
				:CHARTTYPE,
				:Date of Latest Point //,
				//:Chart Classification
			),
			By Matching Columns( :SITE = :SITE ),
			Drop multiples( 0, 0 ),
			Include Nonmatches( 0, 0 ),
			Preserve main table order( 1 ),
			Output Table( "Summarized_Mapped_CR" ),
			Link to original data table( 0 )
		);
		Data Table( "Summarized_Mapped_CR" ) << show window(0);
		//Update Dashboard table
		row = {:Key = "# of unique Charts in CR based on Monitor Sets",:Value = NRows(Data Table("Summarized_Mapped_CR"))}; // Define Row To Add //Monitor_Sets_in_CR_across_sites_and_modules
		dashboard_table << add Rows(row );
		close(monitors_in_CR, NoSave);
		close( Data Table( "Summarized_Mapped_Chart_Report" ), NoSave);//added on 1/25/2021
		
		
		summary_dt = Data Table( "Summarized_Mapped_CR" );
		summary_dt << show window(0);
		//summary_dt << save( user_dir || "\\" || "Charts/Unique Charts.jmp");
	

		/*
		//Summarize Mapped_Chart_Report to get unique charts
		Data Table( "Mapped_Chart_Report" ) << Summary(
			Group(
				:SITE,
				:Module,
				:AREA,
				:MONITOR SET,
				:MEASUREMENTSET,
				:SUBSET,
				:CHARTTYPE
			),
			Freq( "None" ),
			Weight( "None" ),
			Output Table( "Summarized_Mapped_Chart_Report" )
		);
		*/
		//rename column
		//summary_dt = Data Table( "Summarized_Mapped_CR" );
		//summary_dt:N Rows << Set Name("# Charts");
		
		
		//close(Data Table( "Mapped_Chart_Report" ), NoSave);
		//close(cr, NoSave);
		
		//row = {:Key = "# of unique Charts in Chart Report (for selected Monitorsets)",:Value = NRows(Data Table( "Summarized_Mapped_Chart_Report" ))}; // Define Row To Add
		//dashboard_table << add Rows(row );
		
		
		
		//Get chart parameters and Control Limit Types from MRF and add to summarised charts table
		mrf = Open(lookup_table_path || "SPC++_Master_Reference_File_Combo.jmp");
		summary_dt << Update(
			With(Data Table("SPC++_Master_Reference_File_Combo")),
			Match Columns(:AREA = :AREA, :MONITOR SET = :Monitor Set, :MEASUREMENTSET = :Measurement Set, :SUBSET = :Subset,:CHARTTYPE = :Chart Type),
			Add Columns from Update table( :Parameter Classification, :chart_status, :audit_exemption_flag, :control_limit_type )
		);
		close(mrf, NoSave);
		Data Table( "Summarized_Mapped_CR" ) << save( user_dir || "\\" || "Charts/Summarized_Mapped_CR.jmp");
		
		//Create summary by control_limit_type
		chart_summary = Data Table( "Summarized_Mapped_CR" ) <<	Summary( 
			Group( :control_limit_type ), 
			Freq( "None" ), 
			Weight( "None" ), 
			output table name( "Chart Summary" )	
		);
		chart_summary << save( user_dir || "\\" || "Charts/chart_summary_CLType.jmp");
		close(chart_summary, NoSave);
		
		/*
		//charts by site and modules
		chart_summary1 = Data Table( "Summarized_Mapped_CR" ) <<	Summary( 
			Group( :SITE, :Module, : Name("MONITOR SET"), :control_limit_type ), 
			Freq( "None" ), 
			Weight( "None" ), 
			output table name( "Chart Summary_site_module" )	
		);
		chart_summary1 << save( user_dir || "\\" || "Charts/chart_summary_module_site.jmp");
		close(chart_summary1, NoSave);
		*/
		
		//Find charts without Control Limit Type
		Data Table( "Summarized_Mapped_CR" ) << Select Where(:Name("control_limit_type") == "" | :Name("control_limit_type") == " ");
		charts_without_limits = Data Table( "Summarized_Mapped_CR" ) << Subset( Output Table Name("Charts_without_ControlLimit_Type"), Link to original data table( 0 ) );
		charts_without_limits << save( user_dir || "\\" || "Charts/Summarized_Mapped_CR_without_Control_Limits.jmp");
		close(charts_without_limits, NoSave);
		Data Table("Summarized_Mapped_CR") << clear select;
		
		
	, //else
		row = {:Key = "STOP ANALYSIS : MonitorSets are not present in Chart Report",:Value = 0}; // Define Row To Add
		dashboard_table << add Rows(row );
		
	);
	Data Table("Mapped_Chart_Report") << clear select;
	close(Data Table( "Mapped_Chart_Report" ), NoSave);//added on 1/26/2021
	//close( Data Table( "Summarized_Mapped_Chart_Report" ), NoSave);// commented on 1/25/2021
	
	print("charts Received...");
	//Charts_with_RFC();
	
);


//Get charts based on monitorsets from Golden
Get_Charts_From_Golden = Function({},
	Data Table( "Summarized_Mapped_CR" ) << show window(0);
	//Open Golden
	grf = Open(lookup_table_path || "SPC++_Master_Reference_File_Combo.jmp", invisible);
	grf << Select Where( (:Name("chart_status") == "Obsolete") | (:Name("chart_status") == "Archived") );
	If(NRows(grf << Get Selected Rows) > 0, grf << delete rows() ); 
	
	//Edit: based on inputs from Xin and dawn: Monitorsets not in golden gaps must be identified based on monitorsets defined in PRF only and not based on monitorsets from PRF+WS
	mon_sets_from_prf_dt  = Open(user_dir || "\\" || "Monitorsets_from_PRF.jmp");
	// Join Golden with given monitorsets
	if(N rows(mon_sets_from_prf_dt)> 0,
		//Data Table( "Monitor_Sets" ) << Join(
		Data Table( "Monitorsets_from_PRF" ) << Join(
		With( grf ),
		Match Flag( 1 ),
		By Matching Columns( :monitor_set_name = :Monitor Set ),
		Drop multiples( 0, 0 ),
		Include Nonmatches( 1, 1 ),
		Preserve main table order( 1 ),
		Output Table( "Mapped_Golden" )
		);
		
	,
		Data Table( "Monitor_Sets" ) << Join(
		//Data Table( "Monitorsets_from_PRF" ) << Join(
		With( grf ),
		Match Flag( 1 ),
		By Matching Columns( :monitor_set_name = :Monitor Set ),
		Drop multiples( 0, 0 ),
		Include Nonmatches( 1, 1 ),
		Preserve main table order( 1 ),
		Output Table( "Mapped_Golden" )
		);
		
	);
	//close(grf, NoSave);	//commented on 05/04/2021
	close(mon_sets_from_prf_dt, NoSave);
	
	//Find Monitorsets, which are not available in Golden document
	Data Table("Mapped_Golden") << Select Where( :Name("Match Flag") == 1); 
	
	If( N Rows( Data Table("Mapped_Golden") << Get Selected Rows() ) > 0, 
		
		monitors_not_in_grf = Data Table("Mapped_Golden") << Subset( Output Table Name("monitors_not_in_grf"), Link to original data table( 0 ) );
		
		Data Table( "monitors_not_in_grf" ) << Summary(
		Group(
			//:Name("Monitor SET")
			:Name("Monitor_set_name")
		),
		Freq( "None" ),
		Weight( "None" ),
		Output Table( "Monitor_Sets_not_in_Golden" ), 
		Link to original data table( 0 )
		);
		Data Table( "Monitor_Sets_not_in_Golden" ) << Delete column("N Rows");
	
		
		//Update Dashboard table
		row = {:Key = "# of Monitor_Sets_missing_in_Golden",:Value = NRows(Data Table( "Monitor_Sets_not_in_Golden" ))}; // Define Row To Add
		dashboard_table << add Rows(row );
		close(monitors_not_in_grf, NoSave);
		Data Table( "Monitor_Sets_not_in_Golden" ) << save( user_dir || "\\" || "Platform_Gaps/Monitor_Sets_not_in_Golden.jmp");
		close(Data Table( "Monitor_Sets_not_in_Golden" ), NoSave);
	, //else
		row = {:Key = "# of Monitor_Sets_missing_in_Golden",:Value = 0}; // Define Row To Add
		dashboard_table << add Rows(row );
		//Create Empty Table
		Monitor_Sets_not_in_Golden = New Table("Monitor_Sets_not_in_Golden", 
				New Column("Monitorsets Missing in Golden", Character)
		);
		Monitor_Sets_not_in_Golden << save( user_dir || "\\" || "Platform_Gaps/Monitor_Sets_not_in_Golden.jmp");
		close(Data Table( "Monitor_Sets_not_in_Golden" ), NoSave);
		
	);
	
	
	//Prince:
	//close mapped golden here
	close(Data Table("Mapped_Golden"), nosave);
	//don't close grf above
	Data Table( "Monitor_Sets" ) << Join(
		//Data Table( "Monitorsets_from_PRF" ) << Join(
		With( grf ),
		Match Flag( 1 ),
		By Matching Columns( :monitor_set_name = :Monitor Set ),
		Drop multiples( 0, 0 ),
		Include Nonmatches( 1, 1 ),
		Preserve main table order( 1 ),
		Output Table( "Mapped_Golden" )
	);
	close(grf, NoSave);
	
	//find Monitorsets, those are matching with Golden : across sites
	//maybe we can add a filter here for user to select Site, Module and Monitorset etc
	Data Table("Mapped_Golden") << clear select;
	Data Table("Mapped_Golden") << Select Where( :Name("Match Flag") == 3);
	//note: open all monitorsets(not just prf) and and again make join with golden to get all charts 
	If( N Rows( Data Table("Mapped_Golden") << Get Selected Rows() ) > 0, 
		
		monitors_in_Golden = Data Table("Mapped_Golden") << Subset( Output Table Name("monitors_in_Golden"), Link to original data table( 0 ) );
		
		//Open summarised_chartReport and map with module - not needed for now(no test case encountered)
		
		//Summarize Mapped_Chart_Report to get unique charts
		monitors_in_Golden << Summary(
			Group(
				//:SITE,
				:Module,
				:Area,
				:Monitor Set,
				:Measurement Set,
				:Subset,
				:Chart Type,
				:control_limit_type,
				:chart_status,
				
				:Parameter Classification,
				:CE Scope for Sites,
				:Facility,
				:Entity,
				:Operation,
				:Route,
				:control_limit_sidedness,
				:control_limit_method,
				:cpk_method,
				:cpkn,
				:matching_method,
				:min_samplesize,
				:ref_operation,
				:chart_state,
				:audit_exemption_flag,
				:ttd,
				:refmean,
				:refsigma,
				:reftool
						
			),
			Freq( "None" ),
			Weight( "None" ),
			Output Table( "Summarized_Mapped_Golden" ),
			Link to original data table( 0 )
		);
		Data Table( "Summarized_Mapped_Golden" ) << Delete column("N Rows");
		
		
		
		//Update Dashboard table
		row = {:Key = "# of unique Charts in Golden based on Monitor Sets",:Value = NRows(Data Table("Summarized_Mapped_Golden"))}; // Define Row To Add //Monitor_Sets_in_CR_across_sites_and_modules
		dashboard_table << add Rows(row );
		Data Table("Summarized_Mapped_Golden") << save( user_dir || "\\" || "Charts/Summarized_Mapped_Golden.jmp");
		close(monitors_in_Golden, NoSave);
		close( Data Table( "Summarized_Mapped_Golden" ), NoSave);//added on 1/25/2021

	, //else
		row = {:Key = "STOP ANALYSIS : Selected Monitor Sets Not Present in Golden",:Value = 0}; // Define Row To Add
		dashboard_table << add Rows(row );
		
	);
	Data Table("Mapped_Golden") << clear select;
	close(Data Table( "Mapped_Golden" ), NoSave);//added on 1/26/2021
	//close( Data Table( "Summarized_Mapped_Chart_Report" ), NoSave);// commented on 1/25/2021
	print("Charts from Golden received...");
	
	
);


//Gaps between charts in Charts based on monitorset in chart report and golden
ChartGaps = Function({},
	
	charts = open(user_dir || "\\" || "Charts/Summarized_Mapped_CR.jmp", invisible);
	grf = open(user_dir || "\\" || "Charts/Summarized_Mapped_Golden.jmp", invisible);
	
	//join charts received based on monitor_set and Golden ref file
	joined_charts_grf = charts << Join(
		With( grf ),
		Match Flag( 1 ),
		By Matching Columns(
			:Module = :Module,
			:AREA = :Area,
			:MONITOR SET = :Monitor Set,
			:MEASUREMENTSET = :Measurement Set,
			:SUBSET = :Subset,
			:CHARTTYPE = :Chart Type
		),
		Drop multiples( 0, 0 ),
		Include Nonmatches( 1, 1 ),
		Preserve main table order( 1 ),
		Output Table( "summarised_CR_Golden" ),
		Link to original data table( 0 )
	);
	
	joined_charts_grf << Select Where( :Name("Match Flag") == 3);
	If( N Rows( joined_charts_grf << Get Selected Rows() ) > 0,
			joined_charts_grf << delete rows;
		,
			print("no matching charts in CR and Golden...");
	);
	
	
	if(N Rows(joined_charts_grf) > 0,
			
			//Update Dashboard table
			row = {:Key = "# Gaps between Chart Report and Golden",:Value = NRows(joined_charts_grf)}; // Define Row To Add
			dashboard_table = Open(user_dir || "\\"|| "Dashboard.jmp");
			dashboard_table << add Rows(row );
			dashboard_table << save(user_dir || "\\"|| "Dashboard.jmp");
			close(dashboard_table, NoSave);
		,
		//else
		print("no gaps");
	);
	joined_charts_grf << New Column("Gap", formula( If (:Match Flag == 1 , "Chart in CR but missing in Golden", "Chart in Golden but missing in Chart Report") ));
	joined_charts_grf:Gap<< delete formula;
	joined_charts_grf << Move Selected Columns( {"Gap"}, after( "Match Flag" ) );
	joined_charts_grf << save(user_dir || "\\" || "Charts/Gaps_CR_Golden.jmp");
	close(joined_charts_grf, NoSave);
	close(charts, NoSave);
	close(grf, NoSave);
	
);


//Get CE! gaps based charts selected from CR(based on monitorsets)
find_CE_Gaps = Function({},

	//Open Chart report
	old_vs_new = Open( file_path || "SPC CE Audit\Combo CE Audit Gaps\CE_Gaps_Old_New_Delinquent.jmp", invisible);
	
	gaps = Data Table( "Summarized_Mapped_CR" ) << Join(
	With( Data Table( "CE_Gaps_Old_New_Delinquent" ) ),
	Match Flag( 1 ),
	By Matching Columns(
		:SITE = :Site,
		:Module = :Module,
		:AREA = :Area,
		:MONITOR SET = :Monitor Set,
		:MEASUREMENTSET = :Measurement Set,
		:SUBSET = :Subset,
		:CHARTTYPE = :Chart Type
	),
	Drop multiples( 0, 0 ),
	Include Nonmatches( 1, 0 ),
	Preserve main table order( 1 ),
	Output Table( "CE_Gaps_Chart_Report" )
	);
	
	
	gaps << Select Where(:Name("Match Flag") != 3);
	If( NRow(gaps << Get Selected Rows) > 0, gaps << delete rows);
	close(old_vs_new, NoSave);
	
	if ( NRows(gaps)>0,
		//find unique charts with CE! Gaps
		CE_charts = Data Table( "CE_Gaps_Chart_Report" ) << Summary(
			Group(
				:Area,
				:Module of CE_Gaps_Old_New_Delinquent,
				:Monitor Set,
				:Measurement Set,
				:Subset,
				:Chart Type
			),
			Freq( "None" ),
			Weight( "None" )
		);
		//Update Dashboard table
		row = {:Key = "# of Unique Charts with CE! gaps",:Value = NRows(CE_charts)}; // Define Row To Add
		dashboard_table << add Rows(row );
		close(CE_charts, NoSave);
	
	
		//Create summary table
		CE_summary_gaps = Data Table( "CE_Gaps_Chart_Report" ) << Summary(
			Group( :Site, :Module of CE_Gaps_Old_New_Delinquent ),
			Freq( "None" ),
			Weight( "None" ),
			output table name( "CE! Gaps Summary" ),
			Link to original data table( 0 )
		);
		column(CE_summary_gaps, "N Rows") << Set Name("# of CE! Gaps");
		
		//Update Dashboard table
		row = {:Key = "# of CE! gaps for Unique Charts",:Value = NRows(gaps)}; // Define Row To Add
		dashboard_table << add Rows(row );
		close(CE_summary_gaps, NoSave);
		
	,
		
		row = {:Key = "# of Charts with CE! gaps for Charts defined above(for selected Monitorsets)",:Value = 0}; // Define Row To Add
		dashboard_table << add Rows(row );
		
	);
	gaps << save(user_dir || "\\" || "CE_Gaps/CE_Gaps_Chart_Report.jmp" );
	close(gaps, NoSave);
	print("CE! Gaps Computed...");
);

//Get Comprehensiveness gaps based charts selected from CR(based on monitorsets)
find_Comprehensiveness_Gaps = Function({},

	//Open Chart report
	comp_gaps = Open( file_path || "SPC CE Audit\Combo CE Audit Gaps\Tabulated MRF Comprehensiveness Gaps.jmp");
	
	
	gaps = Data Table( "Summarized_Mapped_CR" ) << Join(
	With( Data Table( "Tabulated MRF Comprehensiveness Gaps" ) ),
	Match Flag( 1 ),
	By Matching Columns(
		//:SITE = :Owner
		:Module = :Module,
		:AREA = :Area,
		:MONITOR SET = :Monitor Set,
		:MEASUREMENTSET = :Measurement Set,
		:SUBSET = :Subset,
		:CHARTTYPE = :Chart Type
	),
	Drop multiples( 0, 0 ),
	Include Nonmatches( 1, 0 ),
	Preserve main table order( 1 ),
	Output Table( "Comprehensiveness_Gaps_Chart_Report" )
	);
	
	
	gaps << Select Where(:Name("Match Flag") != 3);
	If( NRow(gaps << Get Selected Rows) > 0, gaps << delete rows);
	close(comp_gaps, NoSave);
	
	
	
	if ( NRows(gaps)>0,
		//Create summary table: remark: need to filter or summarise to remove duplicate charts: see owner/site/ chart combinations to get rid of huge numbers
		comp_gaps_summary = gaps << Summary(
			//Group( :Module of Tabulated MRF Comprehensiveness Gaps ),
			Group( :Owner, :Module of Tabulated MRF Comprehensiveness Gaps ),
			Freq( "None" ),
			Weight( "None" ),
			Output Table( "Comprehensiveness Gaps Summary" ),
			Link to original data table( 0 )
		);
		column(comp_gaps_summary, "N Rows") << Set Name("# of Comprehensiveness Gaps");
		
		//Update Dashboard table
		row = {:Key = "# of Charts with Comprehensiveness gaps for Charts defined above(for selected Monitorsets)",:Value = NRows(gaps)}; // Define Row To Add
		dashboard_table << add Rows(row );
		comp_gaps_summary << save(user_dir || "\\" || "Comprehensiveness_Gaps/Comprehensiveness Gaps Summary.jmp" );
		close(comp_gaps_summary, NoSave);
	,
		
		row = {:Key = "# of Charts with Comprehensiveness gaps for Charts defined above(for selected Monitorsets)",:Value = 0}; // Define Row To Add
		dashboard_table << add Rows(row );
	
	);
	gaps << save(user_dir || "\\" || "Comprehensiveness_Gaps/Comprehensiveness_Gaps_Chart_Report.jmp" );
	close(gaps, NoSave);
	print("Comp Gaps computed...");
	
);



Find_PRF_Gaps = Function({},
	
	prf = Open( platform_gaps_path || "Monitor Sets not at Site.jmp");
	for each row( if(((:Module == "Die Prep") | (:Module == "DIEPREP")) & :SITE == "ATTD", :SITE = "WATD") );//OTD

	//Get OTD Factory
	for each row( 
		if((Substr( :Module, 1, 5 ) == "WAFER") & :SITE == "ATTD", 
			:SITE = "WATD"	
		) 
	);
	//Select gaps for our site
	prf << Join(
		With( Data Table( "Facility" ) ),
		Select( :Platform, :SITE, :Module, :AREA, :MONITOR SET, :Product ),
		By Matching Columns( :SITE = :SITE ),
		Drop multiples( 0, 0 ),
		Include Nonmatches( 0, 0 ),
		Preserve main table order( 1 ),
		Output Table( "Monitor Sets not at Site(Selected)" ),
		Link to original data table( 0 )
	);
	
	//Note: monitorsets not at site gaps must be found against monitorset entries defined in PRF(Xin and Dawn's input). If there are no PRF entries for monitorsets, find gaps against monitorsets from WS
	mon_sets_from_prf_dt = Open(user_dir || "\\"||"Monitorsets_from_PRF.jmp");
	If( (N Rows( Data Table( "Monitor Sets not at Site(Selected)" ) ) > 0 ) & (N Rows(Data Table( "Monitorsets_from_PRF" ))  > 0 ) ,
		
		//Monitorsets available in data source but not in Chart Report\gaps file
		prf_gaps = Data Table("Monitor Sets not at Site(Selected)") << Join(
			//With( Data Table( "Monitor_Sets" ) ),
			With( Data Table( "Monitorsets_from_PRF" ) ),//find gaps based on PRF entries only
			By Matching Columns( :MONITOR SET = :monitor_set_name ),
			Drop multiples( 0, 0 ),
			Include Nonmatches( 0, 0 ),
			Preserve main table order( 1 )
		);
		
		row = {:Key = "Monitorsets not at site(for selected Monitorsets)-> must add a chart for this Monitorset",:Value = NRows(prf_gaps)}; // Define Row To Add
		dashboard_table << add Rows(row );
		close(prf, NoSave);
		close(Data Table("Monitor Sets not at Site(Selected)"), NoSave);
		prf_gaps << save(user_dir || "\\" || "Platform_Gaps/monitorsets_not_at_site.jmp" );
		close(prf_gaps, NoSave);
		,
		//else
		/*
		row = {:Key = "STOP ANALYSIS: No Monitorsets related Gaps at this site",:Value = 0}; // Define Row To Add
		dashboard_table << add Rows(row );
		close(prf, NoSave);
		temp1 = Data Table("Monitor Sets not at Site(Selected)");
		temp1 << save(user_dir || "\\" || "Platform_Gaps/monitorsets_not_at_site.jmp" );
		close(Data Table("monitorsets_not_at_site"), NoSave);
		//close(Data Table("Monitor Sets not at Site(Selected)"), NoSave);
		*/
		
		If( N Rows( Data Table( "Monitor Sets not at Site(Selected)" ) )  > 0,
		
			//Monitorsets available in data source but not in Chart Report\gaps file
			prf_gaps = Data Table("Monitor Sets not at Site(Selected)") << Join(
				With( Data Table( "Monitor_Sets" ) ),
				By Matching Columns( :MONITOR SET = :monitor_set_name ),
				Drop multiples( 0, 0 ),
				Include Nonmatches( 0, 0 ),
				Preserve main table order( 1 )
			);
			
			row = {:Key = "Monitorsets not at site(for selected Monitorsets)-> must add a chart for this Monitorset",:Value = NRows(prf_gaps)}; // Define Row To Add
			dashboard_table << add Rows(row );
			close(prf, NoSave);
			close(Data Table("Monitor Sets not at Site(Selected)"), NoSave);
			prf_gaps << save(user_dir || "\\" || "Platform_Gaps/monitorsets_not_at_site.jmp" );
			close(prf_gaps, NoSave);
			,
			//else
			row = {:Key = "STOP ANALYSIS: No Monitorsets related Gaps at this site",:Value = 0}; // Define Row To Add
			dashboard_table << add Rows(row );
			close(prf, NoSave);
			temp1 = Data Table("Monitor Sets not at Site(Selected)");
			temp1 << save(user_dir || "\\" || "Platform_Gaps/monitorsets_not_at_site.jmp" );
			close(Data Table("monitorsets_not_at_site"), NoSave);
			//close(Data Table("Monitor Sets not at Site(Selected)"), NoSave);
			
		);
		
		
	);	
	close(mon_sets_from_prf_dt, NoSave);
	
	
	
	
	
	//Open PRF and stack file with Sites
	Prepare_PRF();
	
	//Make a full join between PRF and monitorsets of interest
	prf_joined_with_monitorsets_table = Data Table( "PRF Stacked" ) << Join(
		With( Data Table( "Monitor_Sets" ) ),
		Match Flag( 1 ),
		By Matching Columns( :MONITOR SET = :monitor_set_name ),
		Drop multiples( 0, 0 ),
		Include Nonmatches( 1, 1 ),
		Preserve main table order( 1 ),
		Output Table( "prf_joined_with_monitorsets_table" ),
		Link to original data table( 0 )
	);
	close(PRF_Stack, NoSave);
	
	
	//Find Monitorsets, which are not available in PRF document
	prf_joined_with_monitorsets_table << Select Where( :Name("Match Flag") == 2);
	
	If( N Rows( prf_joined_with_monitorsets_table << Get Selected Rows() ) > 0, 
		
		monitors_not_in_PRF = prf_joined_with_monitorsets_table << Subset( Output Table Name("monitors_not_in_PRF"), Link to original data table( 0 ) );
		
		Data Table( "monitors_not_in_PRF" ) << Summary(
		Group(
			:monitor_set_name
		),
		Freq( "None" ),
		Weight( "None" ),
		Output Table( "Monitor_Sets_not_in_PRF" ), 
		Link to original data table( 0 )
		);
		Data Table( "Monitor_Sets_not_in_PRF" ) << Delete column("N Rows");
	
		Data Table( "Monitor_Sets_not_in_PRF" ) << Select Where(:Name("monitor_set_name") == "");
		If( NRow(Data Table( "Monitor_Sets_not_in_PRF" ) << Get Selected Rows) > 0, Data Table( "Monitor_Sets_not_in_PRF" ) << delete rows);
		//Update Dashboard table
		row = {:Key = "# of Monitor_Sets_not_in_PRF",:Value = NRows(Data Table( "Monitor_Sets_not_in_PRF" ))}; // Define Row To Add
		dashboard_table << add Rows(row );
		Data Table( "Monitor_Sets_not_in_PRF" ) << save(user_dir || "\\" || "Platform_Gaps/Monitor_Sets_not_in_PRF.jmp" );
		close(Data Table( "Monitor_Sets_not_in_PRF" ), NoSave);
		close(monitors_not_in_PRF, NoSave);
	, //else
		row = {:Key = "# of Monitor_Sets_not_in_PRF",:Value = 0}; // Define Row To Add
		dashboard_table << add Rows(row );
		//Create Empty Table
		Monitor_Sets_not_in_PRF = New Table("Monitor_Sets_not_in_PRF", 
				New Column("monitor_set_name", Character)
		);
		Monitor_Sets_not_in_PRF << save( user_dir || "\\" || "Platform_Gaps/Monitor_Sets_not_in_PRF.jmp");
		close(Data Table( "Monitor_Sets_not_in_PRF" ), NoSave);
		
	
	);
	
	
	//find Monitorsets, those are matching with PRF : matching results can help us find Gaps associated with PRF(maybe those matches are related to other site or module)
	//maybe we can add a filter here for user to select Site, Module and Monitorset etc
	prf_joined_with_monitorsets_table << clear select;
	prf_joined_with_monitorsets_table << Select Where( :Name("Match Flag") == 3);
	
	If( N Rows( prf_joined_with_monitorsets_table << Get Selected Rows() ) > 0, 
		
		monitors_in_PRF = prf_joined_with_monitorsets_table << Subset( Output Table Name("monitors_in_PRF"), Link to original data table( 0 ) );
		//Select gaps for our site
		monitors_in_PRF << Join(
			With( Data Table( "Facility" ) ),
			Select( :Platform, :SITE, :Module, :AREA, :MONITOR SET, :Product ),
			By Matching Columns( :SITE = :SITE ),
			Drop multiples( 0, 0 ),
			Include Nonmatches( 0, 0 ),
			Preserve main table order( 1 ),
			Output Table( "Monitor Sets in PRF (Site)" ),
			Link to original data table( 0 )
		);
		close(Data Table( "Facility" ), NoSave);//added on 1/26/2021
		
		
		
		//
		monitors_in_PRF_by_site = Data Table( "monitors_in_PRF" ) << Split(
		Split By( :SITE ),
		Split( :Data ),
		Group( :Platform, :Product, :Module, :AREA, :MONITOR SET ),
		Output Table( "monitors_in_PRF_by_site" ),
		Remaining Columns( Drop All ),
		Sort by Column Property
		);
		
		
		//Update Dashboard table
		//row = {:Key = "# of Monitor_Sets_in_PRF_across_sites_and_modules",:Value = NRows(Data Table( "monitors_in_PRF_by_site" ))}; // Define Row To Add
		//dashboard_table << add Rows(row );
		close(monitors_in_PRF, NoSave);
		Data Table( "monitors_in_PRF_by_site" ) << save(user_dir || "\\" || "Platform_Gaps/monitors_in_PRF_by_site.jmp" );
		close(Data Table( "monitors_in_PRF_by_site" ), NoSave);
		Data Table( "Monitor Sets in PRF (Site)" ) << save(user_dir || "\\" || "Platform_Gaps/Monitor Sets in PRF (Site).jmp" );
		close(Data Table( "Monitor Sets in PRF (Site)" ), NoSave);
	, //else
		//row = {:Key = "# of Monitor_Sets_in_PRF_across_sites_and_modules",:Value = 0}; // Define Row To Add
		//dashboard_table << add Rows(row );
		
	);
	close(prf_joined_with_monitorsets_table, NoSave);
	//close(PRF_Stack, NoSave);
	print("PRF Gaps computed...");
	
);



// Prepare_PRF
Prepare_PRF = Expr(
	//	Input: PRF File
	//	Output: PRF File with only relevant columns, PRF file stacked by site.
	PRF = Open( lookup_table_path || "PRF_All_Platforms.jmp", Ignore Columns( "Revision History", "Online System", "Number of Sites", "Comments", "MODULE REQUEST" ) );
	Column( PRF, "Area" ) << Set Name( "AREA" );
	Column( PRF, "Monitor Set" ) << Set Name( "MONITOR SET" );
	PRF_Stack = PRF << Stack(
		columns( :ATTD, :AFO, :AJR, :CDP, :CD6, :KM5, :PG, :SS, :CR, :WATD ), //added CR on 03/31/2020
		Source Label Column( "SITE" ),
		Stacked Data Column( "Data" ),
		Copy formula( 0 ),
		Output Table( "PRF Stacked" )
	);
	PRF_Stack << Select Where( :Data == "No" );
	If( N Row( PRF_Stack << GetSelectedRows ) != 0,
		PRF_Stack << Delete Rows
	);
	//PRF_Stack << delete columns( "Data" );
	close(PRF, NoSave);
);

find_RFC_Gaps = Function({},
	
		
	//============================================================== Missing Trigger Associations (ATTD and SPTD Only)

	//Missing_Triggers = open( file_path || "Missing RFCs Post Processing.csv", End of Field(comma) ); 

	Missing_Triggers = Open(file_path ||"RFC Audit\Missing Triggers.csv");
	Missing_Triggers_WLA = Open(file_path ||"RFC Audit\Missing Triggers_WLA.csv"); 
	Missing_Triggers << concatenate(Missing_Triggers_WLA, append to first table(1));
	close(Missing_Triggers_WLA, nosave);
	
	if(N Rows(Missing_Triggers) >0,
			Missing_Triggers << New Column("Factory", Character, Values( Repeat( { "ATTD" }, nrows( Missing_Triggers ) ) ) );
			//IN/OUT of scope for audit
			Check_Audit_Scope(Missing_Triggers);
			Missing_Triggers << Delete Columns("Area Scope");
			
			//Make join with Charts that we have
			//xtreams_spc = Open("\\atdfile3\oep\Statistics\PCS Portal\PCS Lookup Tables\CentralReport_SPC.xlsx");
			Data Table( "Summarized_Mapped_CR" ) <<
			Join(
				With( Data Table( "Missing Triggers" ) ),
				Match Flag( 1 ),
				Select(
					:AREA,
					:MONITOR SET,
					:MEASUREMENTSET,
					:SUBSET,
					:CHARTTYPE,
					//:Name( "# Charts" ),
					:Parameter Classification,
					:control_limit_type,
					:chart_status,
					:audit_exemption_flag
				),
				SelectWith( :XTREAMS Trigger, :Trigger Source, :ALARMID ),
				By Matching Columns(
					:AREA = :Area,
					:MONITOR SET = :Monitor Set,
					:MEASUREMENTSET = :Measurement Set,
					:SUBSET = :Subset
				),
				Drop multiples( 0, 0 ),
				Include Nonmatches( 0, 0 ),
				Preserve main table order( 1 ),
				Output Table( "rfc_Gaps" )
			);
			Data Table("rfc_Gaps") << Delete column("Match Flag");
			
		,
			//Empty data table:
			SPC_Gaps_table = New Table("rfc_Gaps", 
				New Column("AREA", Character),
				New Column("MONITOR SET", Character),
				New Column("MEASUREMENTSET", Character),
				New Column("SUBSET", Character),
				New Column("CHARTTYPE", Character),
				New Column("Parameter Classification", Character),
				New Column("control_limit_type", Character),
				New Column("chart_status", Character),
				New Column("audit_exemption_flag", Character),
				New Column("XTREAMS Trigger", Character),
				New Column("Trigger Source", Character),
				New Column("ALARMID", Character)
			);
	
	);	
	
	
	row = {:Key = "# of RFC Gaps for charts",:Value = NRows(Data Table("rfc_Gaps"))}; // Define Row To Add
	dashboard_table << add Rows(row );
	close(Missing_Triggers,NoSave);
	Data Table( "rfc_Gaps" ) << save(user_dir || "\\" || "RFC_Gaps/rfc_Gaps.jmp" );
	close(Data Table( "rfc_Gaps" ), NoSave);
	close(Data Table( "Summarized_Mapped_CR" ), NoSave);//added on 1/26/2021
	//close(Data Table( "data_subset" ), NoSave);//added on 1/26/2021
	close(Data Table( "Monitor_Sets" ), NoSave);//added on 1/26/2021
	dashboard_table << save(user_dir || "\\" || "Dashboard.jmp" );
	close(dashboard_table, NoSave);//added on 1/26/2021
	

	print("RFC Gaps computed...");
);

Missing_SC_RFC_Gaps = Function({},
	
	charts = Open(user_dir || "\\"|| "Charts\Summarized_Mapped_CR.jmp", invisible);

	facility = Open(user_dir || "\\"|| "Facility.jmp");
	site = Data Table("Facility"):"SITE" << getvalues;
	//cr = Open(lookup_table_path || "DailyChartReport_" || site[1] || ".jmp");
	//site = Data Table("Facility"):"SITE" << getvalues;
	if (site[1]== "WATD",
		cr = Open(lookup_table_path || "DailyChartReport_" || site[1] || ".jmp", invisible);
		//get DIEPREP related Charts from ATTD Chart Report and concatinate with WATD Chart Report
		cr_ATTD = Open(lookup_table_path || "DailyChartReport_ATTD.jmp", invisible);
		cr_ATTD << Select Where(:Name("Area Grouping") == "DIE PREP");
		If( N Rows( cr_ATTD << Get Selected Rows() ) > 0, 
			charts_dieprep_watd = cr_ATTD << Subset( Output Table Name("Charts_Dieprep_WATD"), Link to original data table( 0 ) );
			for each row( :SITE = "WATD");
			cr << concatenate(charts_dieprep_watd, append to first table(1));
			close(cr_ATTD, nosave);
			close(charts_dieprep_watd, nosave);
		,
			close(cr_ATTD, nosave);
		);
	,
		cr = Open(lookup_table_path || "DailyChartReport_" || site[1] || ".jmp", invisible);
	);
	
	close(facility, NoSave);	

	charts_with_entity = charts << Join(
		With( cr ),
		By Matching Columns(
			:SITE = :SITE,
			:Module = :Module,
			:AREA = :AREA,
			:MONITOR SET = :MONITOR SET,
			:MEASUREMENTSET = :MEASUREMENTSET,
			:SUBSET = :SUBSET,
			:CHARTTYPE = :CHARTTYPE
		),
		Drop multiples( 0, 0 ),
		Include Nonmatches( 0, 0 ),
		Preserve main table order( 1 ),
		Output Table( "charts_with_entity" ),
		Link to original data table( 0 )
	);
	close(cr, NoSave);
	close(charts, NoSave);

	entityIDs = charts_with_entity << Summary(
		Group( :ENTITY, :Module of Summarized_Mapped_CR ),
		Freq( "None" ),
		Weight( "None" ),
		Output Table( "Entity_IDs" ),
		Link to original data table( 0 )
	);
	entityIDs << Delete column("N Rows");
	charts_with_entity << save(user_dir || "\\" || "Charts\charts_with_entity.jmp");
	close(Data Table("charts_with_entity"), NoSave);

	//new code to find SC gaps:
	triggers_60_days = Open(data_table_path || "\\" || "non_spc_triggers_summary.jmp");
	//dt = Open( "$SAMPLE_DATA/Big Class.jmp", Select Columns( "age", "height", "weight" ) );
	//make a join on entityID
	non_spc_triggers_entity = Data Table( "non_spc_triggers_summary" ) << Join(
		With( Data Table( "Entity_IDs" ) ),
		By Matching Columns( :ENTITY = :ENTITY, :Module = :Module of Summarized_Mapped_CR ),
		Drop multiples( 0, 0 ),
		Include Nonmatches( 0, 0 ),
		Preserve main table order( 1 ),
		Output Table( "non_spc_triggers_entity" ),
		Link to original dtaa table(0)
	);
	try(non_spc_triggers_entity << Delete column("N Rows"));
	non_spc_triggers_entity << Delete column("ENTITY of Entity_IDs");
	non_spc_triggers_entity << Delete column("Module of Summarized_Mapped_CR");
	column(non_spc_triggers_entity, "ENTITY of non_spc_triggers_summary") << Set Name("ENTITY");
	close(triggers_60_days, NoSave);
	close(entityIDs, NoSave);
	
	
	if(N Rows(Data Table( "non_spc_triggers_entity" )) > 0,
		
		//join SC triggers and entities used for our product
		Missing_Triggers = Open(file_path || "\\" || "RFC Audit\Missing Triggers.csv");	
		Missing_Triggers_WLA = Open(file_path ||"RFC Audit\Missing Triggers_WLA.csv"); 
		Missing_Triggers << concatenate(Missing_Triggers_WLA, append to first table(1));
		close(Missing_Triggers_WLA, nosave);
		//Missing_Triggers << New Column("Factory", Character, Values( Repeat( { "ATTD" }, nrows( Missing_Triggers ) ) ) );

		Missing_Triggers << Select Where(:Trigger Source == "SPC++");
		If( NRow( Missing_Triggers << Get Selected Rows() ) > 0, Missing_Triggers << Delete Rows() );
		
		//join non_spc_triggers_entity with missing triggers to find gaps
		SC_Gaps = Data Table( "non_spc_triggers_entity" ) << Join(
		With( Data Table( "Missing Triggers" ) ),
			Select(
				:FACILITY,
				:FACTORY,
				:ENTITY,
				:Trigger Source,
				:Module,
				:Area,
				:ALARMID,
				:TOOLTYPE
			),
			SelectWith(
				:Most Recent Trigger Date,
				:Name( "# of Factories with a Trigger" ),
				:Most Recent Trigger Factory
			),
			By Matching Columns( :Area = :Area, :ALARMID = :ALARMID, :TOOLTYPE = :TOOLTYPE ),
			Drop multiples( 0, 0 ),
			Include Nonmatches( 0, 0 ),
			Preserve main table order( 1 ),
			Output Table( "SC_Gaps" ),
			Link to original Data Table(0)
		);
	
		close(non_spc_triggers_entity, NoSave);
		//Update Dashboard table
		row = {:Key = "# RFC Gaps: Missing SC Alarms",:Value = NRows(sc_gaps)}; // Define Row To Add
		dashboard_table = Open(user_dir || "\\"|| "Dashboard.jmp");
		dashboard_table << add Rows(row );
		dashboard_table << save(user_dir || "\\"|| "Dashboard.jmp");
		close(dashboard_table, NoSave);
		
		
		
		if(N Rows(Data Table( "SC_Gaps" )) > 0,
			//Open opt-out file
			optOutTriggers=Open(lookup_table_path||"Opt-Out Triggers Report.csv",invisible);
			optOutTriggers << New Column("Audit Status", Character, Values( Repeat( { "Opted Out" }, nrows( optOutTriggers ) ) ) );
			Data Table( "SC_Gaps" ) << Update(
				With( optOutTriggers ),
				Match Columns( :Area = :Area, :TOOLTYPE = :ToolType, :ALARMID = :AlarmId ),
				Add Columns from Update table( :Audit Status )
			);
			Data Table( "SC_Gaps" ) << Select Where(:Audit Status == "Opted Out");
			If(NRows(Data Table( "SC_Gaps" ) << Get Selected Rows) > 0, Data Table( "SC_Gaps" ) << delete rows() );
			Data Table( "SC_Gaps" ) << Delete column("Audit Status");
			close(optOutTriggers, nosave);
		
		);
		
		
		SC_Gaps << save(user_dir || "\\"|| "RFC_Gaps\Missing_SC_Gaps.jmp");
		close(SC_Gaps, NoSave);
		close(Missing_Triggers, NoSave);
		print("RFC Gaps computed for SC Alarms...");
	,	
		//Update Dashboard table
		row = {:Key = "# RFC Gaps: Missing SC Alarms",:Value = 0}; // Define Row To Add
		dashboard_table = Open(user_dir || "\\"|| "Dashboard.jmp");
		dashboard_table << add Rows(row );
		dashboard_table << save(user_dir || "\\"|| "Dashboard.jmp");
		close(dashboard_table, NoSave);
		close(Data Table( "non_spc_triggers_entity" ), NoSave);
		
		//create a empty table for SC Alarms:
		SC_Gaps_table = New Table("SC_Gaps", 
			New Column("SC_Gaps", Character)
		);
		SC_Gaps_table << save(user_dir || "\\"|| "RFC_Gaps\Missing_SC_Gaps.jmp");
		close(SC_Gaps_table, NoSave);
	);
	
	
	
	/*
	//============================================================== Missing Trigger Associations (ATTD and SPTD Only)

	Missing_Triggers = Open(file_path || "\\" || "RFC Audit\Missing Triggers.csv");	
	//Missing_Triggers << New Column("Factory", Character, Values( Repeat( { "ATTD" }, nrows( Missing_Triggers ) ) ) );

	Missing_Triggers << Select Where(:Trigger Source == "SPC++");
	If( NRow( Missing_Triggers << Get Selected Rows() ) > 0, Missing_Triggers << Delete Rows() );


	sc_gaps = entityIDs << Join(
		With( Missing_Triggers ),
		By Matching Columns( :ENTITY = :Most Recent Trigger Link ),
		Drop multiples( 0, 0 ),
		Include Nonmatches( 0, 0 ),
		Preserve main table order( 1 ),
		Output Table( "Missing_SC_Alarms" ),
		Link to original data table( 0 )
	);
	close(missing_triggers, NoSave);
	close(entityIDs, NoSave);
	
	//Update Dashboard table
	row = {:Key = "# RFC Gaps: Missing SC Alarms",:Value = NRows(sc_gaps)}; // Define Row To Add
	dashboard_table = Open(user_dir || "\\"|| "Dashboard.jmp");
	dashboard_table << add Rows(row );
	dashboard_table << save(user_dir || "\\"|| "Dashboard.jmp");
	close(dashboard_table, NoSave);
	
	
	sc_gaps << save(user_dir || "\\"|| "RFC_Gaps\Missing_SC_Gaps.jmp");
	close(sc_gaps, NoSave);
	print("RFC Gaps computed for SC Alarms...");
	
	*/
	
);


RFCRevHistoryGaps = Function({},
	//ATTD and WATD are not supposed to have these gaps
	
	repeatTriggerExcludedRFC = Open( user_dir || "\\" || "Charts/Charts_with_RFC_RptInfo.jmp");
	repeatTriggerExcludedRFC << New Column("FACTORY", formula( If (:SITE == "VN" , "SS", :SITE )));
	repeatTriggerExcludedRFC:FACTORY<< delete formula;
	
	//Handle SS site naming
	facility = Open(user_dir || "\\" || "Facility.jmp");
	site = Data Table("Facility"):"SITE" << getvalues;
	close(facility, NoSave);
	if (site[1] == "SS", 
		site[1] = "VN";
		, 
		print(site);	
	);
	if (site[1] == "CDP", 
		site[1] = "CD-CDP";
		, 
		print(site);	
	);
	print(site);
	
	rfc_rev_gaps_source = Open( file_path ||  "New Rev History Exception Report " || site[1] ||".csv");
	rfc_rev_gaps_source << Delete column("Match Flag");
	
	rfc_rev_gaps = repeatTriggerExcludedRFC << Join(
		With( rfc_rev_gaps_source ),
		Match Flag( 1 ),
		By Matching Columns( :FACTORY = :Factory, :RFC_ID = :RFC_ID ),
		Drop multiples( 0, 0 ),
		Include Nonmatches( 1, 1 ),
		Preserve main table order( 1 ),
		Output Table( "RFC_Rev_Gaps" ),
		Link to original data table( 0 )
	);
	
	
	//remove all non-mathing rows : no rfc rev gaps
	rfc_rev_gaps << Select Where( :Name("Match Flag") != 3);
	If( N Rows( rfc_rev_gaps << Get Selected Rows() ) > 0,
			rfc_rev_gaps << delete rows;
		,
			print("No Gaps for RFC rev...");
	);
	
	
	//Update Dashboard table
	row = {:Key = "# RFC Revision Gaps",:Value = NRows(rfc_rev_gaps)}; // Define Row To Add
	dashboard_table = Open(user_dir || "\\"|| "Dashboard.jmp");
	dashboard_table << add Rows(row );
	dashboard_table << save(user_dir || "\\"|| "Dashboard.jmp");
	close(dashboard_table, NoSave);
	
	
	
	
	
	close(repeatTriggerExcludedRFC, NoSave);
	close(rfc_rev_gaps_source, NoSave);
	rfc_rev_gaps << save(user_dir || "\\" || "RFC_Gaps/RFC_Revison_Gaps.jmp");
	close(rfc_rev_gaps, NoSave);
	print("RFC Gaps computed for Revision History...");
);


Charts_with_RFC_Info = Function({},
	
	
	Summarized_Mapped_CR_without_RFC = Open(user_dir || "\\" || "Charts/Summarized_Mapped_CR.jmp", invisible);
	
	unique_charts = Summarized_Mapped_CR_without_RFC << Summary(
		Group( :SITE, :Module, :AREA, :MONITOR SET, :MEASUREMENTSET, :SUBSET, :Parameter Classification ),
		Freq( "None" ),
		Weight( "None" ),
		Output Table( "Unique_Charts" ),
		Link to original data table( 0 )
	);
	close(Summarized_Mapped_CR_without_RFC, NoSave);
	unique_charts << Delete column("N Rows");
	
	//Open CentralReport
	//Central_report_SPC = Open_SPC_Triggers(ref_table_path);
	//Central_report_SPC = Open( ref_table_path || "CentralReport_SPC.csv"); //Z:\PCS Portal\Output Files\Modified Lookup Tables
	//Central_report_SPC = Open(lookup_table_path || "CentralReport_SPC.xlsx");
	
	Central_report_SPC=Open(lookup_table_path||"CentralReport_SPC.xlsx",
		Worksheets( "ReportDataEntity" ),
		Use for all sheets( 1 ),
		Concatenate Worksheets( 0 ),
		Create Concatenation Column( 0 ),
		Worksheet Settings(
		1,
		Has Column Headers( 1 ),
		Number of Rows in Headers( 1 ),
		Headers Start on Row( 1 ),
		Data Starts on Row( 2 ),
		Data Starts on Column( 1 ),
		Data Ends on Row( 0 ),
		Data Ends on Column( 0 ),
		Replicated Spanned Rows( 1 ),
		Replicated Spanned Headers( 0 ),
		Suppress Hidden Rows( 0 ),
		Suppress Hidden Columns( 0 ),
		Suppress Empty Columns( 0 ),
		Treat as Hierarchy( 0 ),
		Multiple Series Stack( 0 ),
		Import Cell Colors( 0 ),
		Limit Column Detect( 0 ),
		Column Separator String( "-" )
		),
		invisible
	);
	
	
	Central_report_SPC << New Column("area uppercase", character, Formula(Uppercase(:Area) ) );
	Central_report_SPC << New Column("monitor set uppercase", character, Formula(Uppercase(:MonitorSet ) ) );
	Central_report_SPC << New Column("measurement set uppercase", character, Formula(Uppercase(:MeasurementSet) ) );
	Central_report_SPC << New Column("subset uppercase", character, Formula(Uppercase(:Subset) ) );
	
	//Remove formulas from the newly created uppercase columns
	column( Central_report_SPC, "area uppercase" ) << Delete Formula;
	column( Central_report_SPC, "monitor set uppercase" ) << Delete Formula;
	column( Central_report_SPC, "measurement set uppercase" ) << Delete Formula;
	column( Central_report_SPC, "subset uppercase" ) << Delete Formula;

	//delete original columns
	Central_report_SPC << delete columns({"Area", "MonitorSet", "MeasurementSet", "Subset"});
	
	//rename uppercase columns
	column( Central_report_SPC, "area uppercase") << Set Name( "Area" );
	column( Central_report_SPC, "monitor set uppercase") << Set Name( "MonitorSet" );
	column( Central_report_SPC, "measurement set uppercase") << Set Name( "MeasurementSet" );
	column( Central_report_SPC, "subset uppercase") << Set Name( "Subset" );
	
	
	
	Charts_with_rfc = unique_charts << Join(
		With( Central_report_SPC ),
		Select( :SITE, :AREA, :MONITOR SET, :MEASUREMENTSET, :SUBSET, :Parameter Classification ),
		SelectWith( :RFCId, :Title ),
		By Matching Columns(
			:AREA = :Area,
			:MONITOR SET = :MonitorSet,
			:MEASUREMENTSET = :MeasurementSet,
			:SUBSET = :Subset
		),
		Drop multiples( 0, 0 ),
		Include Nonmatches( 1, 0 ),
		Preserve main table order( 1 ),
		//Match Flag( 1 ),
		Output Table( "Charts_With_RFC" )
	);
	
	//Charts_with_rfc << Select Where(IsMissing(Charts_with_rfc:RFCId));
	Charts_with_rfc << New Column("RFC_ID", formula( If (Is Missing( :RFCId ), "RFC Missing in XTREAMS",:RFCId) ));
	Charts_with_rfc << New Column("RFC_Title", formula( If (Is Missing( :RFCId ), "RFC Missing in XTREAMS",:Title) ));
	Charts_with_rfc:RFC_ID<< delete formula;
	Charts_with_rfc:RFC_Title<< delete formula;
	Charts_with_rfc << Delete column("RFCId");
	Charts_with_rfc << Delete column("Title");
	
	
	//If (Is Missing( :RFCId ), "RFC Missing in XTREAMS",:RFCId);
	close(Central_report_SPC, NoSave);
	
	
	//Update Dashboard table : Add info about missing RFC
	Charts_with_rfc << Select where(:RFC_ID == "RFC Missing in XTREAMS");
	row = {:Key = "# Missing RFC based on Monitorsets selected(what if chart not in CR)",:Value = N Rows( Charts_with_rfc << Get Selected Rows() )}; // Define Row To Add
	dashboard_table = Open(user_dir || "\\"|| "Dashboard.jmp");
	dashboard_table << add Rows(row );
	dashboard_table << save(user_dir || "\\"|| "Dashboard.jmp");
	Charts_with_rfc <<Clear Row States<<Clear Column Selection();
	close(dashboard_table, NoSave);
	
	
	//clone data table to capture all exclusions of any type
	Charts_with_rfc_AllExclusions = Charts_With_RFC << Subset( All rows, Link to original data table( 0 ), Output Table("Charts_With_RFC_Exclusions") );
	
	//AllExclusions.csv
	allExclusions = Open(lookup_table_path||"AllExclusions.csv");
	
	
	//add exclusions information to RFC+Charts file
	Charts_with_rfc_AllExclusions << Update(
		With(Data Table("AllExclusions")),
		Match Columns(:AREA = :AREA,:MONITOR SET = :MONITOR_SET, :MEASUREMENTSET = :MEASUREMENT_SET,:SUBSET = :SUBSET),
		Add Columns from Update table( :EXCLUDE )
	);
	column( Charts_with_rfc_AllExclusions, "EXCLUDE") << Set Name( "Excluded(AllExclusions)" );
	currentdatatable(Charts_with_rfc_AllExclusions);
	Charts_with_rfc_AllExclusions << Clear Select << Clear Column Selection;
	for each row(
		if(IsMissing(column(Charts_with_rfc_AllExclusions,"Excluded(AllExclusions)")[]), column(Charts_with_rfc_AllExclusions,"Excluded(AllExclusions)")[] = "No");
	);
	Charts_with_rfc_AllExclusions << Clear Column Selection;
	
	
	
	//add eclusions based on Area_Module_Lookup
	dt_area_module = Open(lookup_table_path || "Area_Module_Lookup.jmp");

	Charts_with_rfc_AllExclusions << Update(
		With(Data Table("Area_Module_Lookup")),
		Match Columns(:AREA = :AREA),
		Add Columns from Update table( :Area Scope )
	);
	Charts_with_rfc_AllExclusions:Area Scope << Set Name("Area Scope(Audit)");
	//close(Charts_with_rfc_AllExclusions, nosave);
	close(dt_area_module, nosave);
	
	
	//add code to add one more column for no recent data: are monitorset, measurementset, subset? entity/charttype? will it have any impact?
	charts = Open(user_dir || "\\"|| "Charts\Summarized_Mapped_CR.jmp", invisible);
	facility = Open(user_dir || "\\"|| "Facility.jmp");
	site = Data Table("Facility"):"SITE" << getvalues;
	//cr = Open(lookup_table_path || "DailyChartReport_" || site[1] || ".jmp");
	//site = Data Table("Facility"):"SITE" << getvalues;
	if (site[1]== "WATD",
		cr = Open(lookup_table_path || "DailyChartReport_" || site[1] || ".jmp", invisible);
		//get DIEPREP related Charts from ATTD Chart Report and concatinate with WATD Chart Report
		cr_ATTD = Open(lookup_table_path || "DailyChartReport_ATTD.jmp", invisible);
		cr_ATTD << Select Where(:Name("Area Grouping") == "DIE PREP");
		If( N Rows( cr_ATTD << Get Selected Rows() ) > 0, 
			charts_dieprep_watd = cr_ATTD << Subset( Output Table Name("Charts_Dieprep_WATD"), Link to original data table( 0 ) );
			for each row( :SITE = "WATD");
			cr << concatenate(charts_dieprep_watd, append to first table(1));
			close(cr_ATTD, nosave);
			close(charts_dieprep_watd, nosave);
		,
			close(cr_ATTD, nosave);
		);
	,
		cr = Open(lookup_table_path || "DailyChartReport_" || site[1] || ".jmp", invisible);
	);
	
	close(facility, NoSave);	
	
	//Get all columns for our charts from Chart Report
	Data Table( "Summarized_Mapped_CR" ) << Join(
		With( cr ),
		Select(
			:SITE,
			:Module,
			:AREA,
			:MONITOR SET,
			:MEASUREMENTSET,
			:SUBSET,
			:CHARTTYPE,
			:Date of Latest Point,
			:Parameter Classification,
			:control_limit_type,
			:chart_status,
			:audit_exemption_flag
		),
		SelectWith( :Chart Classification ),
		By Matching Columns(
			:Module = :Module,
			:AREA = :AREA,
			:MONITOR SET = :MONITOR SET,
			:MEASUREMENTSET = :MEASUREMENTSET,
			:SUBSET = :SUBSET,
			:CHARTTYPE = :CHARTTYPE
		),
		Drop multiples( 0, 0 ),
		Include Nonmatches( 0, 0 ),
		Preserve main table order( 1 ),
		Output Table( "Charts_with_Classification" ),
		Link to original data table( 0 )
	);
	close(cr, nosave);
	//Get unique Charts stacked up for Chart classification
	Data Table( "Charts_with_Classification" ) << Summary(
		Group(
			:SITE,
			:Module,
			:AREA,
			:MONITOR SET,
			:MEASUREMENTSET,
			:SUBSET,
			:CHARTTYPE
			//:audit_exemption_flag
		),
		N,
		Subgroup( :Chart Classification ),
		Freq( "None" ),
		Weight( "None" ),
		Output Table( "unique_charts_with_Classification" ),
		Link to original data table( 0 )
	);
	close(Data Table( "Charts_with_Classification" ), nosave);
	/*Data Table( "unique_charts_with_Classification" ) << NewColumn("Charts_Classification_Flag", numeric, 
	formula(
			:Name( "N(Chart Created: Never Used)" ) + 
			:Name( "N(Chart in Use: No Limits or No Rules)" ) + 
			:Name( "N(Chart Used: No Recent Data)" )	
		   )
	);
	column(Data Table( "unique_charts_with_Classification" ), "Charts_Classification_Flag") << Delete Property(Formula);
	*/
	try(Data Table( "unique_charts_with_Classification" ) << NewColumn("Chart_Classification_Exclusion", character, 
	formula(
			If(:Name("N(Chart in Use: Limits & Rules)") == 0, "Yes", "No")	
		   )
	));
	try(column(Data Table( "unique_charts_with_Classification" ), "Chart_Classification_Exclusion") << Delete Property(Formula));
	try(Data Table( "unique_charts_with_Classification" ) << Delete column("N Rows"));
	try(Data Table( "unique_charts_with_Classification" ) << Delete column("N(Chart Created: Never Used)"));
	try(Data Table( "unique_charts_with_Classification" ) << Delete column("N(Chart in Use: No Limits or No Rules)"));
	try(Data Table( "unique_charts_with_Classification" ) << Delete column("N(Chart Used: No Recent Data)"));
	try(Data Table( "unique_charts_with_Classification" ) << Delete column("N(Chart in Use: Limits & Rules)"));
	
	//update table:
	try(Charts_with_rfc_AllExclusions << Update(
		With( Data Table( "unique_charts_with_Classification" ) ),
		Match Columns(
			:SITE = :SITE,
			:AREA = :AREA,
			:MONITOR SET = :MONITOR SET,
			:MEASUREMENTSET = :MEASUREMENTSET,
			:SUBSET = :SUBSET
		),
		Add Columns from Update table( :Chart_Classification_Exclusion )
	));
	close(Data Table( "unique_charts_with_Classification" ), nosave);
	
	
	
	
	//repeat Trigger info
	allExclusions << Select Where(:Report == "RepeatTrigger");
	repeatTrigger_exclude_table = allExclusions << Subset(Selected Rows(1), Output Table("SPC RepeatTrigger RFC Exclusions"));
	
	//exclude_table << Select Where(:Report == "SPCMissingRFC");
	//spc_exclude_table = allExclusions << Subset(Selected Rows(1), Output Table("SPC Missing RFC Exclusions"));


	repeatTriggerExcludedRFC = Data Table( "Charts_with_RFC" ) << Join(
		With( repeatTrigger_exclude_table ),
		Select( :SITE, :AREA, :MONITOR SET, :MEASUREMENTSET, :SUBSET, :RFC_ID, :RFC_Title ),
		SelectWith( :EXCLUDE, :Reason, :Requestor ),
		By Matching Columns( :RFC_Title = :RFC_TITLE ),
		Drop multiples( 0, 0 ),
		Include Nonmatches( 1, 0 ),
		Preserve main table order( 1 ),
		Output Table( "repeatTriggerExcludedRFC" )
	);
	repeatTriggerExcludedRFC:EXCLUDE << Set Name("Repeat_Trigger_Excluded");
	

	//Charts_with_rfc << save( user_dir || "\\" || "Charts/Charts_with_RFC.jmp");
	Charts_with_rfc_AllExclusions << save( user_dir || "\\" || "Charts/Charts_with_RFC.jmp");
	close(Charts_with_rfc, NoSave);
	close(unique_charts, NoSave);
	repeatTriggerExcludedRFC << save( user_dir || "\\" || "Charts/Charts_with_RFC_RptInfo.jmp");
	close(repeatTriggerExcludedRFC, NoSave);
	close(repeatTrigger_exclude_table, NoSave);
	close(allExclusions, NoSave);
	close(Charts_with_rfc_AllExclusions, nosave);
	print("Charts with RFC computed...");
    
);

Monitorsets_summary = function({},
	
	monitorset_source_table = Open(user_dir || "\\" || "Monitor_Sets_Source.jmp");
	

	Data Table( "Monitor_Sets_Source" ) << Split(
		Split By( :Filter_Source ),
		Split( :Filter_Source ),
		Group( :monitor_set_name ),
		Output Table( "Monitorsets_summary" ),
		Link to original data table( 0 ),
	);
	close(monitorset_source_table, NoSave);
	colnames = Data Table( "Monitorsets_summary" ) << get column names( Character );
	if (N Items(colnames) ==3,
		Data Table("Monitorsets_summary"):Name("CR") << Set Name( "Filter_Source1" );
		Data Table("Monitorsets_summary"):PRF << Set Name( "Filter_Source2" );
		,
		Column( Data Table("Monitorsets_summary"), colnames[2] ) << Set Name("Filter_Source");
	);
	
	
	//Data Table("Monitorsets_summary"):Name("WS") << Set Name( "Source1" );
	//Data Table("Monitorsets_summary"):PRF << Set Name( "Source2" );
	Data Table( "Monitorsets_summary" ) << save(user_dir || "\\" || "Monitor_Sets_Source_Summary.jmp");
	close(Data Table( "Monitor_Sets_Source_Summary" ), NoSave);
	
	
	/*
	temp1 = monitorset_source_table << Split(
	Split By( :monitor_set_name ),
	Split( :Source )
	);
	close(monitorset_source_table, NoSave);
	
	colList = temp1 << get column names;
	temp1 << Transpose(
		/*columns(
			:Name( "2STEP_NL3AF13_CURE_OPT" ),
			:CCM_MON,
			:FDC24H125,
			:FPCSAM_GLOBAL_PRODUCTS,
			:NEEDLE Z_OFFSETS,
			:NEEDLE_XY_OFFSETS,
			:NGCSAM_GLOBAL_PRODUCTS,
			:NJ_NEEDLE_XY_OFFSETS,
			:NJ_NEEDLE_Z_OFFSETS,
			:NJ_RS99_NL3AF13_LT
		),*/
		columns(eval(colList)),
		Output Table( "Monitorsets_summary" )
	);
	close(temp1, NoSave);
	:Label << Set Name( "Monitorset" );
	:Row 1 << Set Name( "Source1" );
	colnames = Data Table( "Monitorsets_summary" ) << get column names( Character );
	if (N Items(colnames) ==3,
		:Row 2 << Set Name( "Source2" );
		,
		print("do nothing");
	);
	Data Table( "Monitorsets_summary" ) << save(user_dir || "\\" || "Monitor_Sets_Source_Summary.jmp");
	close(Data Table( "Monitor_Sets_Source_Summary" ), NoSave);
	*/
	
	
	//Monitorsets not in PRF currently can show wrong results, as we make a join between monitorset name only. However some of monitorsets might be available in PRF, but for other products. So, we must add those monitorsets which are not available for selected product to list of existing gaps
	Monitor_Sets_not_in_PRF = Open( user_dir || "\\" || "Platform_Gaps/Monitor_Sets_not_in_PRF.jmp");
	summary_table = Open(user_dir || "\\" || "Monitor_Sets_Source_Summary.jmp");
	colnames = summary_table << get column names( Character );
	if (N Items(colnames) ==3,
		summary_table << Select Where( :Filter_Source2 == "PRF" );
		If( NRow( summary_table << Get Selected Rows() ) > 0, summary_table << Delete Rows() );
		summary_table << delete column(column("Filter_Source1"));
		summary_table << delete column(column("Filter_Source2"));
		//Column(summary_table, "monitor_set_name") << set name("Monitorsets Missing in PRF");
		Monitor_Sets_not_in_PRF << concatenate(summary_table, append to first table(1));
		,//else
		summary_table << delete column(column("Filter_Source"));
		//Column(summary_table, "monitor_set_name") << set name("Monitorsets Missing in PRF");
		//Column(summary_table, "monitor_set_name") << set name("monitor_set_name");
		Monitor_Sets_not_in_PRF << concatenate(summary_table, append to first table(1));
		
	);
	close(summary_table, NoSave);
	//clone data table to remove duplicate entries
	temp_dt_monList = Monitor_Sets_not_in_PRF << Subset( All rows, Link to original data table( 0 ), Output Table("All_Monitor_Sets") );
	if(N Rows(Data Table("All_Monitor_Sets")) > 0,
		unique_monList = Data Table( "All_Monitor_Sets" ) << Summary(
			Group( :monitor_set_name ),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 ), 
			Output Table("Unique_Monitor_Sets")
		);
		unique_monList << Delete Column("N Rows");
		close(temp_dt_monList ,NoSave);
		close(Monitor_Sets_not_in_PRF, NoSave);
		unique_monList << save(user_dir || "\\" || "Platform_Gaps\Monitor_Sets_not_in_PRF.jmp");
		//Monitor_Sets_not_in_PRF << save(user_dir || "\\" || "Platform_Gaps\Monitor_Sets_not_in_PRF.jmp");
		close(Data Table("Monitor_Sets_not_in_PRF"), NoSave);
		
	,	
		//create a exclusion notes:
		unique_monList = New Table("Unique_Monitor_Sets", 
			New Column("monitor_set_name", Character)
		);
		close(temp_dt_monList ,NoSave);
		close(Monitor_Sets_not_in_PRF, NoSave);
		unique_monList << save(user_dir || "\\" || "Platform_Gaps\Monitor_Sets_not_in_PRF.jmp");
		//Monitor_Sets_not_in_PRF << save(user_dir || "\\" || "Platform_Gaps\Monitor_Sets_not_in_PRF.jmp");
		close(Data Table("Monitor_Sets_not_in_PRF"), NoSave);
		
		
	);
	
	
);

SaveMonitorSetsFromPRF = Function({},
	prf_filter_selection = filter << getScript;
	//close(Data Table("PRF_Stacked_SiteModule"), NoSave);
	print(prf_filter_selection);
	CaptureLog("filter_Selection");
	print("---------- SaveMonitorSetsFromPRF Function ----------");
	PRF_Filter << close window;
	monitorsets_all = Current Data Table() << clear column selection ;
	
	//code to allow user to proceed, even if no monitors selected from PRF
	If( N Rows( Current Data Table() << Get Selected Rows() ) == 0,
		close(monitorsets_all, NoSave);
		//Update Dashboard table
		row = {:Key = "# of Monitor Sets selected from PRF",:Value = 0}; // Define Row To Add
		dashboard_table = Open(user_dir || "\\"|| "Dashboard.jmp");
		dashboard_table << add Rows(row );
		
		
		//Get unique monitorsets
		mon_sets = Open( user_dir || "\\"|| "Monitor_Sets.jmp");
		mon_sets_unique = Data Table( "Monitor_Sets" ) << Summary(
			Group( :monitor_set_name ),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 ),
			Output Table( "Monitor_Sets_Unique" )
		);
		mon_sets_unique << Delete column("N Rows");
		row = {:Key = "# of Unique Monitor Sets selected",:Value = NRows(mon_sets_unique)}; // Define Row To Add
		dashboard_table << add Rows(row );
		//closing monitorsets table before saving unique mon_sets table with same name
		close(Data Table( "Monitor_Sets" ), NoSave);
		
		//replace existing mon_set table
		mon_sets_unique << save(user_dir || "\\" || "Monitor_Sets.jmp");
		close(mon_sets_unique, NoSave);
		//create and save empty table
		Monitorsets_from_PRF = New Table("Monitorsets_from_PRF", 
			New Column("monitor_set_name", Character)
		);
		Monitorsets_from_PRF << save(user_dir || "\\" || "Monitorsets_from_PRF.jmp");
		dashboard_table << save( user_dir || "\\" || "Dashboard.jmp");
		close(dashboard_table, NoSave);
		close(Monitorsets_from_PRF, NoSave);
		
		,//else
		monitorsets_from_prf = Current Data Table() << Subset(Output Table("monitorsets_from_prf"));
		monitorsets_from_prf <<Clear Row States<<Clear Column Selection();
		monitorsets_from_prf:MONITOR SET << Set Name("monitor_set_name");
		subset_new_prf = monitorsets_from_prf << Summary(
			Group( :monitor_set_name ),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 )
			
		);
		subset_new_prf << Delete column("N Rows");
		close(monitorsets_from_prf, NoSave);
		
		//Update Dashboard table
		row = {:Key = "# of Monitor Sets selected from PRF",:Value = NRows(subset_new_prf)}; // Define Row To Add
		dashboard_table = Open(user_dir || "\\"|| "Dashboard.jmp");
		dashboard_table << add Rows(row );

		
		mon_sets = Open( user_dir || "\\"|| "Monitor_Sets.jmp");
		Data Table( "Monitor_Sets" ) << concatenate(subset_new_prf, append to first table(1));
		Data Table( "Monitor_Sets" ) << save(user_dir || "\\" || "Monitor_Sets.jmp");
		//Get unique monitorsets
		mon_sets_unique = Data Table( "Monitor_Sets" ) << Summary(
			Group( :monitor_set_name ),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 ),
			Output Table( "Monitor_Sets_Unique" )
		);
		mon_sets_unique << Delete column("N Rows");
		row = {:Key = "# of Unique Monitor Sets selected",:Value = NRows(mon_sets_unique)}; // Define Row To Add
		dashboard_table << add Rows(row );
		
		//closing monitorsets table before saving unique mon_sets table with same name
		close(Data Table( "Monitor_Sets" ), NoSave);
		
		//replace existing mon_set table
		mon_sets_unique << save(user_dir || "\\" || "Monitor_Sets.jmp");
		close(mon_sets_unique, NoSave);
		subset_new_prf << save(user_dir || "\\" || "Monitorsets_from_PRF.jmp");
		
		//create a copy of monitorsets with source information as "PRF""
		dt2 = Eval(subset_new_prf << getScript);
		dt2 << New Column("Filter_Source", Character, Values( Repeat( { "PRF" }, nrows( dt2 ) ) ) );
		dt3 = Open( user_dir || "\\"|| "Monitor_Sets_Source.jmp");
		dt3 << concatenate(dt2, append to first table(1));
		dt3 << save( user_dir || "\\" || "Monitor_Sets_Source.jmp");
		close(dt3 , NoSave);
		close(dt2, NoSave);
		close(subset_new_prf, NoSave);
		
		close(monitorsets_all, NoSave);
		dashboard_table << save( user_dir || "\\" || "Dashboard.jmp");
		close(dashboard_table, NoSave);
	);
	
	
	//Data Table( "data_subset" ) << ShowWindow( 1 );
	//close(Data Table( "data_subset" ), NoSave);
	
	
	//Start running functions
	ProgressBar();
	OpenDataTables();
	Get_Charts_From_Chart_Report();
	UpdateProgressBar("Getting Charts from Chart-Report...", 10);
	Get_Charts_From_Golden();
	UpdateProgressBar("Getting Charts from Golden...", 20);
	find_CE_Gaps();
	UpdateProgressBar("Finding CE! Gaps...", 30);
	find_Comprehensiveness_Gaps();
	UpdateProgressBar("Finding Comprehensiveness Gaps...", 40);
	Find_PRF_Gaps();
	UpdateProgressBar("Finding PRF Gaps...", 50);
	find_RFC_Gaps();
	Missing_SC_RFC_Gaps();
	UpdateProgressBar("Finding RFC Gaps...", 55);
	Charts_with_RFC_Info();
	UpdateProgressBar("RFCs for Charts Received...", 60);
	ChartGaps();
	UpdateProgressBar("Finding Golden V/s Chart-Report Gaps...", 65);
	RFCRevHistoryGaps();
	UpdateProgressBar("Finding RFC Revision Gaps...", 70);
	Monitorsets_summary();
	MonitorsetsFromCR_GRFnotInPRF();
	ProcessLogFile();
	UpdateProgressBar("Calculating Repeat Trigger Metric...", 80);
	RFC_Health_Metric();
	UpdateProgressBar("Generating Final Report...", 85);
	CatalystFavoriteFunction();
	UpdateProgressBar("Generating Catalyst Favorite file for PCS Health Module...", 90);
	CatalystFavoriteFunctionSPCCharts();
	UpdateProgressBar("Generating Catalyst Favorite file for PCS SPC++ Module...", 95);
	
	PromptMonitorsetsWindow();
	/*GenerateJournalReport();
	UpdateProgressBar("Generating Final Report...", 100);
	progress_bar_dlgStatus << closewindow();//close window for progress bar
	EndOfScript();
	print("--------------------Script Completed--------------------");*/
	//close(dt, NoSave);
	//FinalReport << close window;
	
);

MonitorsetsFromCR_GRFnotInPRF = Function({},
	//this function is to get monitorsets that are in golden and chart report(based on PRF+WS) but not in PRF:
		//(cases can be those monitorsets which are in WS(not in PRF) but, but not in CR+Golden)
		
	//Get monitorsets from summarised chart Report and Golden and concatenate
	grf_mapped_dt = Open(user_dir || "\\" || "Charts\Summarized_Mapped_Golden.jmp");
	Data Table( "Summarized_Mapped_Golden" ) << Summary(
		Group( :Monitor Set ),
		Freq( "None" ),
		Weight( "None" ),
		Link to original Data Table(0),
		Output Table( "Monitor_Sets_grf" )
	);
	close(grf_mapped_dt);
	Data Table("Monitor_Sets_grf") << Delete Column("N Rows");
	Data Table("Monitor_Sets_grf"):Monitor set << Set name("monitor_set_name");
	cr_mapped_dt = Open(user_dir || "\\" || "Charts\Summarized_Mapped_CR.jmp");
	Data Table( "Summarized_Mapped_CR" ) << Summary(
		Group( :MONITOR SET ),
		Freq( "None" ),
		Weight( "None" ),
		Link to original Data Table(0),
		Output Table( "Monitor_Sets_cr" )
	);
	close(cr_mapped_dt);
	Data Table("Monitor_Sets_cr") << Delete Column("N Rows");
	Data Table("Monitor_Sets_cr"):Monitor set << Set name("monitor_set_name");
	
	Data Table("Monitor_Sets_grf") << concatenate(Data Table("Monitor_Sets_cr"), append to first table(1));
	close(Data Table("Monitor_Sets_cr"), NoSave);
	//find unique monitorsets
	Data Table( "Monitor_Sets_grf" ) << Summary(
		Group( :monitor_set_name ),
		Freq( "None" ),
		Weight( "None" ),
		Link to original Data Table(0),
		Output Table( "Monitor_Sets_grf_cr" )
	);
	Data Table("Monitor_Sets_grf_cr") << Delete column("N Rows");
	close(Data Table( "Monitor_Sets_grf" ), NoSave);
	//join with monitorsets selected from PRF
	mon_sets_source_prf = Open(user_dir || "\\" ||"Monitorsets_from_PRF.jmp");
	if(N Rows(mon_sets_source_prf)>0,
		//join
		Data Table( "Monitor_Sets_grf_cr" ) << Join(
			With( Data Table( "Monitorsets_from_PRF" ) ),
			Match Flag( 1 ),
			By Matching Columns( :monitor_set_name = :monitor_set_name ),
			Drop multiples( 0, 0 ),
			Include Nonmatches( 1, 1 ),
			Preserve main table order( 1 ),
			Output Table( "joined_table" )
		);
		//monitorsets only in cr/golden and not in PRF
		Data Table("joined_table") << Select Where(:Name("Match Flag") != 1);
		if (N Rows( Data Table("joined_table") << Get Selected Rows() ) > 0,Data Table("joined_table") << delete rows() );
		Data Table("joined_table") << delete column("Match Flag");
		Data Table("joined_table") << delete column("monitor_set_name of Monitorsets_from_PRF");
		column(Data Table("joined_table"), "monitor_set_name of Monitor_Sets_grf_cr") << Set Name("monitor_set_name");
		Data Table( "joined_table" ) << save(user_dir || "\\" || "monitorsets_from_cr_grf_not_in_PRF.jmp");
		close(Data Table("monitorsets_from_cr_grf_not_in_PRF"), NoSave);
		close(Data Table( "Monitor_Sets_grf_cr" ), NoSave);
	,
		//save
		Data Table( "Monitor_Sets_grf_cr" ) << save(user_dir || "\\" || "monitorsets_from_cr_grf_not_in_PRF.jmp");
		close(Data Table("monitorsets_from_cr_grf_not_in_PRF"), NoSave);
		
	);
	
	close(mon_sets_source_prf, NoSave);	
	
);


StopAnalysisUserPrompt = Function({},
	
	PRF_Filter << close window;
	//close(Data Table("PRF_Stacked_SiteModule"), NoSave);
	monitorsets_all = Current Data Table() << clear column selection ;
	close(monitorsets_all, NoSave);
	New Window("Information: ",
				<<Modal,
				vlistbox(
					textbox(""),
					textbox("If you could not find Monitorsets that you want to assess for SAM Review in PRF document, please send a request for PRF Addition/Modification as per BKM defined or contact PCS Rep."),
					textbox("Once all Monitorsets are available in PRF, please re-run this analysis to generate results."),
					textbox(""),
					hlistbox(spacerbox(Size(50,5)),Button Box("OK")),
					textbox("")
				)
		);
	
);

OpenPRFFilter = Function({},
	
	print("---------- OpenPRFFilter Function ----------");
	//prf_prompt << close window; //commented to avoid showing monitorsets selected from WS filter
	
	//Present ProgressBar Window
	ProgressBar();
	UpdateProgressBar("Getting PRF...", 10);
	
	

	print("inside OpenPRFFilter function");
	Prepare_PRF();
	
	//Update Progress bar Window
	UpdateProgressBar("Getting PRF...", 40);
	//Data Table( "Facility" ) << ShowWindow( 1 );
	
	facility = Open( user_dir || "\\"|| "Facility.jmp");
	
	
	monitorSets_PRF = Data Table( "PRF Stacked" ) << Join(
		With( Data Table( "Facility" ) ),
		Select( :Platform, :Product, :Module, :AREA, :MONITOR SET, :SITE ),
		By Matching Columns( :SITE = :SITE ),
		Drop multiples( 0, 0 ),
		Include Nonmatches( 0, 0 ),
		Preserve main table order( 1 ),
		Output Table( "PRF Stacked Site" )
	);
	
	close(Data Table( "PRF Stacked" ), NoSave);
	close(Data Table( "Facility" ), NoSave);
	
	//Update Progress bar Window
	UpdateProgressBar("Preparing PRF...", 60);
	
	
	monitorSets_PRF = Current Data Table();
	If( N Rows( monitorSets_PRF ) > 0, 
		//code to join module and areas to skip selection of Module and Areas from list: //Xin asked to join on module and area. not joining on area, as there can be some areas, which are not yet mapped between WS and PRF
		dt_temp = Open(user_dir || "\\" || "data_subset.jmp");
		dt_temp1 = Data Table( "data_subset" ) << Summary(
			Group( :module_name_1 ),
			Freq( "None" ),
			Weight( "None" ),
			output table name( "data_subset_module" ),
			Link to original data table( 0 )
		);
		monitorSets_PRF_SiteModule = Data Table( "PRF Stacked Site" ) << Join(
			With( Data Table( "data_subset_module" ) ),
			Match Flag( 1 ),
			Select( :Platform, :Product, :Module, :AREA, :MONITOR SET, :SITE ),
			//By Matching Columns( :Module = :module_name_1, :AREA = :functional_area ),
			By Matching Columns( :Module = :module_name_1 ),
			Drop multiples( 0, 0 ),
			Include Nonmatches( 0, 0 ),
			Preserve main table order( 1 ),
			Output Table( "PRF Stacked SiteModule" )
		);
		close(dt_temp1, NoSave);
		close(dt_temp, NoSave);
		close(monitorSets_PRF, NoSave);
		
		//Update Progress bar Window
		UpdateProgressBar("Finishing PRF Processing...", 90);
		progress_bar_dlgStatus << closewindow();//close window for progress bar
		
		//Data Table("PRF Stacked SiteModule") << show window(0);
		Data Table("PRF Stacked SiteModule") << clear select;
		Data Table("PRF Stacked SiteModule") << Select Where( :Name("Match Flag") == 3);
		If( N Rows( Data Table("PRF Stacked SiteModule") << Get Selected Rows() ) > 0, 
			
			PRF_Stacked_SiteModule_dt = Data Table("PRF Stacked SiteModule") << Subset( Output Table Name("PRF_Stacked_SiteModule", invisible), Link to original data table( 0 ) );
			close(Data Table("PRF Stacked SiteModule") , NoSave);
			PRF_Stacked_SiteModule_dt = Current Data Table();
			PRF_Stacked_SiteModule_dt << show window(0);
			//Create ReportWindow
				PRF_Filter=New Window("PRF Filter: PCS SAM Review Report",
					spacerbox(Size(5,10)),
					
					spacerbox(Size(5,10)),
					hlistbox(
						filterpb=panelbox("Make Selection for your product from PRF:",
							spacerbox(Size(5,10)),
							hlistbox(
								filtervb=vlistbox(),
								spacerbox(Size(5,10)),
								vlistbox(
									genrespb=panelbox("Options",
										spacerbox(Size(5,10)),
										buttonbox("1. Generate Results", SaveMonitorSetsFromPRF),
										spacerbox(Size(5,10)),
										buttonbox("2. Product/Module/MonitorSets not listed in Filter/PRF", StopAnalysisUserPrompt),
										spacerbox(Size(5,10)),
										
									),
									spacerbox(Size(5,650)),
									tb_monsets = textbox("Please select Monitorsets from Filter Only if: Monitorsets are tagged to different product names in PRF document."),	
									tb_monsets << Font Color("red"),
								),//end
								spacerbox(Size(5,10)),
							),
							spacerbox(Size(5,10)),
						),
						spacerbox(Size(5,10)),
					),
				);
					
			//Add filter based on existing table to window
			filterbox=vlistbox(
				filter = Current Data Table() << Data Filter(
						Conditional,
						Mode( Show( 1 ), Include( 1 ) ),
						Add Filter(
							//columns( :SITE,:Product, :Module, :AREA, :MONITOR SET ),
							columns( :SITE,:Product, :Module, :AREA, :MONITOR SET ),
							Display( :Product, Size( 221, 250 ), List Display ),
							Display( :Module, Size( 221, 100 ), List Display ),
							Display( :AREA, Size( 221, 200 ), List Display ),
							Display( :MONITOR SET, Size( 221, 259 ), List Display )
							
						),
						hlistbox(
										filtervb=vlistbox(),
										spacerbox(Size(5,10)),
										genrespb=panelbox("Generate Results",
											spacerbox(Size(5,10)),
											buttonbox("Generate Results", GenerateResultsFunction),
											spacerbox(Size(5,10)),
										),
										spacerbox(Size(5,10)),
									)
					);

			);
			filtervb<<Append(filterbox);
			
			
		, //else
			//close(monitorSets_PRF, NoSave);
			close(Data Table("PRF Stacked SiteModule"), NoSave);
			
			New Window("Information: ",
					<<Modal,
					vlistbox(
						textbox(""),
						textbox("PRF does not have specified Product/Module mapping. Please send a request for PRF Addition/Modification as per BKM defined or contact PCS Rep."),
						textbox("Once all Monitorsets are available in PRF, please re-run this analysis to generate results."),
						textbox(""),
						hlistbox(spacerbox(Size(50,5)),Button Box("OK")),
						textbox("")
					)
			);
			
		);
		
		
		,
		//This site has all values as 'No' for all PRF rows
		close(monitorSets_PRF, NoSave);
		progress_bar_dlgStatus << closewindow();//close window for progress bar
		try(close(Data Table("PRF Stacked Site"), nosave));
		New Window("Information: ",
				<<Modal,
				vlistbox(
					textbox(""),
					textbox("PRF does not have any monitorset enabled for your site. Please send a request for PRF Addition/Modification as per BKM defined or contact PCS Rep."),
					textbox("Once all Monitorsets are available in PRF, please re-run this analysis to generate results."),
					textbox(""),
					hlistbox(spacerbox(Size(50,5)),Button Box("OK")),
					textbox("")
				)
		);
		
	);
	
	
	
	
);

/*
proceedWithGapIdentification = Function({},
	
	prf_prompt << close window;
	//Start running functions
	OpenDataTables();
	Get_Charts_From_Chart_Report();
	Get_Charts_From_Golden();
	find_CE_Gaps();
	find_Comprehensiveness_Gaps();
	Find_PRF_Gaps();
	find_RFC_Gaps();
	Missing_SC_RFC_Gaps();
	Charts_with_RFC_Info();
	ChartGaps();
	RFCRevHistoryGaps();
	Monitorsets_summary();
	GenerateJournalReport();
	EndOfScript();
	print("--------------------Script Completed--------------------");
	
);
*/

PromptMonitorSetList = Function({},
	
	print("---------- PromptMonitorSetList Function ----------");
	
	//Create ReportWindow
			prf_prompt=New Window("MonitorSets",
				spacerbox(Size(5,10)),
				
				spacerbox(Size(5,10)),
				hlistbox(
					Text Box( "MonitorSets From WS:" ),
					Data Table( "Monitor_Sets" ) << Get As Report,
					//filterpb=panelbox("Are these all MonitorSets that you want to assess for SAM Review? If there are other MonitorSets that you want to add, Click on 'Open PRF' button. Else Click on 'Continue'.",
					filterpb=panelbox("Open PRF to select Product",
						spacerbox(Size(5,10)),
						hlistbox(
							filtervb=vlistbox(),
							spacerbox(Size(5,10)),
							buttonbox("Open PRF", OpenPRFFilter),
							/*genrespb=panelbox("Options",
								spacerbox(Size(5,10)),
								buttonbox("Open PRF", OpenPRFFilter),
								spacerbox(Size(5,10)),
								//buttonbox("2. Continue", proceedWithGapIdentification),
								spacerbox(Size(5,10)),
								
							),*/
							spacerbox(Size(5,10)),
						),
						spacerbox(Size(5,10)),
					),
					spacerbox(Size(5,10)),
				),
			);
			
			
			close(Data Table( "Monitor_Sets" ), NoSave);
			
	
);




RFC_Health_Metric = Function({},
	
	//create a exclusion notes:
	repeat_trigger_exclusion_tb = New Table("repeat_trigger_exclusion", 
		New Column("Note", Character),
		New Column("value", Character)
	);
	
	dt=open(user_dir || "\\" || "Charts/Charts_with_RFC_RptInfo.jmp", invisible); //joined table of monitor set and RFC
	dt << Select Where( not(:Name("Repeat_Trigger_Excluded")=="yes")); //exclude certain RFC
	if (N Rows( dt << Get Selected Rows() ) > 0,
			
			row = {
					:Note = "All charts excluded from audit",
					:value = "No"
			};
			repeat_trigger_exclusion_tb << add Rows(row );
			
			
			sub0 = dt << Subset(
				Selected Rows( 1 ),
				Selected columns only( 0 ),
				Link to original data table( 0 )
			);
			//close(dt);
			RFCid=column(sub0, "RFC_ID") <<Get Values;
			monitor=column(sub0, "MONITOR SET")<<Get Values;
			close(sub0, NoSave);
			
			
			facility_table = Open(user_dir || "\\" || "Facility.jmp", invisible);
			
			Factory = Data Table("Facility"):"SITE" << getvalues;
			
			close(facility_table, NoSave);
			//Handle SS site naming
			if (Factory[1] == "SS", 
				Factory[1] = "VN";
				, 
				print(Factory);	
			);
			if (Factory[1] == "CDP", 
				Factory[1] = "CD-CDP";
				, 
				print(Factory);	
			);
			print(Factory);
			
			
			
			if (Factory[1]== "WATD",
				//get DIEPREP data
				maintable = open( six_month_data_file_path || "SPC_1M_Metrics_OTD.jmp", invisible);
				for each row( :Factory = "WATD");
				//get WLA related Charts from ATTD and concatinate with WATD Chart Report
				file_ATTD = open( six_month_data_file_path || "SPC_1M_Metrics_ATTD.jmp", invisible);
				for each row( 
					if((Substr( :Module, 1, 5 ) == "WAFER") & :Factory == "ATTD", 
						:Factory = "WATD"	
					) 
				);
				file_ATTD << Select Where(:Name("Factory") == "WATD");
				If( N Rows( file_ATTD << Get Selected Rows() ) > 0, 
					charts_all_watd = file_ATTD << Subset( Output Table Name("Charts_WATD"), Link to original data table( 0 ) );
					//for each row( :SITE = "WATD");
					maintable << concatenate(charts_all_watd, append to first table(1));
					close(file_ATTD, nosave);
					close(charts_all_watd, nosave);
				,
					close(file_ATTD, nosave);
				);
			,
				maintable = open( six_month_data_file_path || "SPC_1M_Metrics_" || Factory[1] || ".jmp", invisible);
			);
			
			
			
			

			//Xin to put her code here...
			maintable << Select Where( Contains( RFCid, :RFC_ID)  & (:Name("30 Days")==1));
			//maintable << Select Where( Contains( RFC, :RFC_ID)  & (:Name("30 Days")==1) & Contains(monitor, :Monitor Set));
			if (N Rows( maintable << Get Selected Rows() ) > 0,
						
					//subset by RFC (can shared by other products), one month only
					sub1 = maintable << Subset(
								Selected Rows( 1 ),
								Selected columns only( 0 ),
								Link to original data table( 0 )
							); 
					//close(maintable, NoSave);
					MeanRepeat = sub1 << Summary(
						Group(:RFC_ID,:RFC,  ), //Added RFC_ID
						Mean( :Name( "% OOC" ) ),
						Mean( :Name( "% Repeat" ) ),
						Freq( "None" ),
						Weight( "None" ),
						Link to original data table( 0 )
					); //repeat trigger by RFC

					//if no OOC, repeat trigger is not evaluated, do we include it in denominator? minimum N applies?
					//concern:  generic RFC, like oven parameter all share the same RFC
					MeanRepeat << NewColumn("fail", numeric, formula(If(:Name("Mean(% Repeat)") > 20, 1, 0)));//MeanReport output to dashboard

					number = MeanRepeat<<Summary( 
									Sum( :fail ), 
									Freq( "None" ), 
									Weight( "None" ),
									Link to original data table( 0 ) 	
							);
					total=column(number, "N Rows") <<Get Values;
					fail=column(number, "Sum(fail)") <<Get Values;

					pass=total[1]-fail[1];
					output_rpt_perc= Char(pass) ||"/" || Char(total[1]) || "(" || Char(Round(pass/total[1]*100, 2))||"%)";  //output needs to be shown in dashboard
					close(number, NoSave);
					MeanRepeat << save(user_dir || "\\" || "Repeat_Trigger\repeat_summary.jmp");
					close(Data Table("repeat_summary"), NoSave);
					close(sub1, NoSave);	
				,
					print("no matching results in 1 Month SPC data file");
					//create a 30day table:
					repeat_trigger_30day_tb = New Table("repeat_summary", 
						New Column("Note", Character),
						New Column("value", Character)
					);
					//manage notes table
					row = {
							:Note = "No Matching RFCs present in last 30 Days in OASYS Database",
							:value = ""
					};
					repeat_trigger_30day_tb << add Rows(row );
					repeat_trigger_30day_tb << save(user_dir || "\\" || "Repeat_Trigger\repeat_summary.jmp");
					close(Data Table("repeat_summary"), NoSave);
			);	
				
			//investigation specific product and specific chart
			maintable <<Clear Row States<<Clear Column Selection();
			maintable << Select Where( Contains( RFCid, :RFC_ID)  & (:Name("90 Days")==1) & Contains(monitor, :Monitor Set));
			if (N Rows( maintable << Get Selected Rows() ) > 0,
					
					sub2 = maintable << Subset(
								Selected Rows( 1 ),
								Selected columns only( 0 ),
								Link to original data table( 0 )
					); 
					MeanRepeat2 = sub2 << Summary(
						Group(:RFC_ID, :RFC, :Monitor Set, :Measurement Set, :Subset, :Chart Type, :Name("SPC++ Entity")),
						Mean( :Name( "% OOC" ) ),
						Mean( :Name( "% Repeat" ) ),
						Freq( "None" ),
						Weight( "None" ),
						Link to original data table( 0 )
					); //repeat trigger by RFC and chart
					close(sub2, NoSave);
					
					MeanRepeat2 << Sort( By( :Name("Mean(% Repeat)"), :Name("Mean(% OOC)") ), Order( Descending, Descending ), Replace Table( 0 ) );
					MeanRepeat2 << Select Where( :Name("Mean(% Repeat)") >0);
					if (N Rows( MeanRepeat2 << Get Selected Rows() ) > 0,
							sub3 = MeanRepeat2 << Subset(
									Selected Rows( 1 ),
									Selected columns only( 0 ),
									Link to original data table( 0 )
							); //output to dashboard
							sub3 << save(user_dir || "\\" || "Repeat_Trigger\repeat_trigger_secondary.jmp");
							close(Data Table("repeat_trigger_secondary"), NoSave); 
						,
							print("no RFC for any chart has repeat trigger %> 20% for this product.");
							//create a 90day table:
							repeat_trigger_90day_tb = New Table("repeat_trigger_secondary", 
								New Column("Note", Character),
								New Column("value", Character)
							);
							//manage notes table
							row = {
									:Note = "No Matching RFCs present in last 90 Days for selected monitorsets in OASYS Database has greater than 20% repeat trigger rate",
									:value = ""
							};
							repeat_trigger_90day_tb << add Rows(row );
							repeat_trigger_90day_tb << save(user_dir || "\\" || "Repeat_Trigger\repeat_trigger_secondary.jmp");
							close(Data Table("repeat_trigger_secondary"), NoSave);
							
					);
					close(MeanRepeat2, NoSave);	
				,
					print("no Repeat Trigeer for this product in last 90 days.");
					//create a 90day table:
					repeat_trigger_90day_tb = New Table("repeat_trigger_secondary", 
						New Column("Note", Character),
						New Column("value", Character)
					);
					//manage a 90day table:
					row = {
							:Note = "No Matching RFCs present in last 90 Days in OASYS Database",
							:value = ""
					};
					repeat_trigger_90day_tb << add Rows(row );
					repeat_trigger_90day_tb << save(user_dir || "\\" || "Repeat_Trigger\repeat_trigger_secondary.jmp");
					close(Data Table("repeat_trigger_secondary"), NoSave); 
			);
			
			//close(sub2, NoSave);
			close(maintable, NoSave);
			//close(sub1, NoSave);
			//close(sub0, NoSave);
			//close(dt, NoSave);
		
		,//else
			print("All RFCs are excluded from Audit for repeat trigger");
			row = {
					:Note = "All charts excluded from audit",
					:value = "Yes"
			};
			repeat_trigger_exclusion_tb << add Rows(row );
			
			//create a 30day table:
			repeat_trigger_30day_tb = New Table("repeat_summary", 
				New Column("Note", Character),
				New Column("value", Character)
			);
			//manage a 30day table:
			row = {
					:Note = "No Matching RFCs present in last 30 Days in OASYS Database",
					:value = ""
			};
			repeat_trigger_30day_tb << add Rows(row );
			repeat_trigger_30day_tb << save(user_dir || "\\" || "Repeat_Trigger\repeat_summary.jmp");
			close(Data Table("repeat_summary"), NoSave);
			
			
			//create a 90day table:
			repeat_trigger_90day_tb = New Table("repeat_trigger_secondary", 
				New Column("Note", Character),
				New Column("value", Character)
			);
			//manage a 90day table:
			row = {
					:Note = "No Matching RFCs present in last 90 Days in OASYS Database",
					:value = ""
			};
			repeat_trigger_90day_tb << add Rows(row );
			repeat_trigger_90day_tb << save(user_dir || "\\" || "Repeat_Trigger\repeat_trigger_secondary.jmp");
			close(Data Table("repeat_trigger_secondary"), NoSave); 
					
		
	);
	
	//save notes table
	repeat_trigger_exclusion_tb << save(user_dir || "\\" || "Repeat_Trigger\repeat_trigger_exclusion.jmp");
	close(Data Table("repeat_trigger_exclusion"), NoSave);
	close(dt, NoSave);
	
	
	
	//Action required Table:
	repeat_trigger_AR_Table = New Table("repeat_trigger_dashboard", 
		New Column("RFC with Repeat Trigger >20% Flag", Character),
		New Column("Charts with Repeat Trigger >20% Flag", Character),
		New Column("Action", Character)
	);
	
	//Add Rows
	row1 = {
			:Name("RFC with Repeat Trigger >20% Flag") = "Yes",
			:Name("Charts with Repeat Trigger >20% Flag") = "Yes",
			:Name("Action") = "Required: Identify opportunities to improve RFC effectiveness and provide action plan in presentation."
	};
	row2 = {
			:Name("RFC with Repeat Trigger >20% Flag") = "Yes",
			:Name("Charts with Repeat Trigger >20% Flag") = "No",
			:Name("Action") = "Required: Communicate Repeat Trigger issues to PCS Reps/Tool Owners for actions. Capture action plan in presentation."
	};
	row3 = {
			:Name("RFC with Repeat Trigger >20% Flag") = "No",
			:Name("Charts with Repeat Trigger >20% Flag") = "Yes",
			:Name("Action") = "Recommendation: Investigate root causes for repeat triggers and provide action plan in presentation."
	};
	row4 = {
			:Name("RFC with Repeat Trigger >20% Flag") = "No",
			:Name("Charts with Repeat Trigger >20% Flag") = "No",
			:Name("Action") = "No Action Required."
	};
	repeat_trigger_AR_Table << add Rows(row1 );
	repeat_trigger_AR_Table << add Rows(row2 );
	repeat_trigger_AR_Table << add Rows(row3 );
	repeat_trigger_AR_Table << add Rows(row4 );
	repeat_trigger_AR_Table << save(user_dir || "\\" || "Repeat_Trigger\repeat_trigger_AR_summary.jmp");
	close(Data Table("repeat_trigger_AR_summary"), NoSave);
	
);


EndOfScript = Function({},
	print("---End Of Script---");
	New Window("End Of Script",
				<<Modal,
				vlistbox(
					textbox(),
					textbox("Script ended successfully."),
					textbox(""),
					textbox("Please review your output files at path: "),
					textbox(user_dir),
					hlistbox(spacerbox(Size(50,5)),Button Box("OK")),
					textbox("")
				)
	);
	//Feedback from Dawn and Basia to keep report open at end of script
	Open(report_path || "Report.jrn");
	//Preferences( Table Column Borders( 0 ));
	//Preferences( Table Row Borders( 0 ));
);


GenerateJournalReport = Function({},
	
	report_table = Data Table("Report"); 

	close(Data Table("Monitorsets_from_PRF"), nosave);
	close(Data Table("Summarized_Mapped_Golden"), nosave);
	//try(Window( "MonitorSets" ) << close window);
	
	//Section: PRF
	Monitorsets_PRF = Open(user_dir || "\\"|| "Monitorsets_from_PRF.jmp");
	// note/string for dashboard highlighting
	dashboard_note_1 = "";
	if (N Rows(Monitorsets_PRF) == 0,
			dashboard_note_1 = "No Monitor Sets Added from PRF filter.";
		,
			dashboard_note_1 = "";
	);
	close(Monitorsets_PRF, NoSave);


	//Section: Platform Readiness
	Monitorsets_not_at_site = Open(user_dir || "\\"|| "Platform_Gaps\monitorsets_not_at_site.jmp");
	
	if (N Rows(Monitorsets_not_at_site) > 0,
		row = {
			:Section = "Platform Readiness",
			:Deliverable = "Monitor Sets Not at Site",
			:Success_Criteria = "0",
			:Actual = Char(N Rows(Monitorsets_not_at_site)),
			:Action Plans = "Submit an automation request for L2 to download the model then engineer is to load the charts via the SPC++ Self Service Tool (SST)."
		};	
		,
		row = {
			:Section = "Platform Readiness",
			:Deliverable = "Monitor Sets Not at Site",
			:Success_Criteria = "0",
			:Actual = Char(N Rows(Monitorsets_not_at_site)),
			:Action Plans = ""
		};
	);
	
	report_table << add Rows(row );
	close(Monitorsets_not_at_site, NoSave);



	//Section: Golden Ref
	cr_golden_gap = Open(user_dir || "\\"|| "Charts\Gaps_CR_Golden.jmp");
	/*row = {
			:Section = "Golden Ref",
			:Deliverable = "Charts Not in Golden Reference",
			:Success_Criteria = "0",
			:Actual = Char(N Rows(cr_golden_gap))
	};
	report_table << add Rows(row );
	close(cr_golden_gap, NoSave);
	*/

	//Find Monitorsets, which are not available in Golden document
	cr_golden_gap << Select Where( :Name("Match Flag") == 1); 
	If( N Rows( cr_golden_gap << Get Selected Rows() ) > 0, 
		charts_not_in_grf = cr_golden_gap << Subset( Output Table Name("charts not in Golden"), Link to original data table( 0 ) );
		row = {
				:Section = "Golden Ref",
				:Deliverable = "Charts Not in Golden Reference",
				:Success_Criteria = "0",
				:Actual = Char(N Rows(charts_not_in_grf)),
				:Action Plans = "Submit a Catalyst Admin2 Golden update request to the Catalyst Admin2 Golden owner."
		};
		report_table << add Rows(row );
		close(charts_not_in_grf, NoSave);
		
	, //else
		row = {
				:Section = "Golden Ref",
				:Deliverable = "Charts Not in Golden Reference",
				:Success_Criteria = "0",
				:Actual = "0",
				:Action Plans = ""
		};
		report_table << add Rows(row );	
	);
	close(cr_golden_gap, NoSave);
	
	

	//Section: Catalyst
	/*charts_golden = Open(user_dir || "\\"|| "Charts\Summarized_Mapped_Golden.jmp");
	row = {
			:Section = "Catalyst",
			:Deliverable = "PCS Admin2 default values updated",
			:Success_Criteria = "Yes",
			:Actual = Char(N Rows(charts_golden))
	};
	report_table << add Rows(row );
	close(charts_golden, NoSave);*/
	
	report_table << concatenate(Data Table("Report_temp"), append to first table(1));
	close(Data Table("Report_temp"),nosave);


	//Section: Chart CE!
	//get site name for placeholder
	facility_table = Open(user_dir || "\\" || "Facility.jmp", invisible);
	Factory = Data Table("Facility"):"SITE" << getvalues;
	close(facility_table, NoSave);
	//Handle SS site naming
	if (Factory[1] == "SS", 
		Factory[1] = "VN";
		, 
		print(Factory);	
	);
	
	CE_Gaps = Open(user_dir || "\\"|| "CE_Gaps\CE_Gaps_Chart_Report.jmp");
	if(N Rows(CE_Gaps) > 0,
		row = {
			:Section = "Chart CE!",
			:Deliverable = "# PCS Charts CE! Gaps",
			:Success_Criteria = "0",
			:Actual = Char(N Rows(CE_Gaps)),
			:Action Plans = "Visit PCS Portal -> Engineering Actions -> Site(" || Factory[1]  || ") for CE! Gaps closure and more details."
		};
		,
		row = {
			:Section = "Chart CE!",
			:Deliverable = "# PCS Charts CE! Gaps",
			:Success_Criteria = "0",
			:Actual = Char(N Rows(CE_Gaps)),
			:Action Plans = ""
		};
	);
	
	
	report_table << add Rows(row );
	close(CE_Gaps, NoSave);



	//Section: RFC
	RFC_Gaps = Open(user_dir || "\\"|| "RFC_Gaps\rfc_Gaps.jmp");
	RFC_SC_Gaps = Open(user_dir || "\\"|| "RFC_Gaps\Missing_SC_Gaps.jmp");
	if(N Rows(RFC_Gaps) > 0 | N Rows(RFC_SC_Gaps) ,
		row = {
			:Section = "RFC",
			:Deliverable = "RFCs missing triggers(SPC++ and SC)",
			:Success_Criteria = "0",
			:Actual = "SPC++ : " ||Char(N Rows(RFC_Gaps))||"  SC : " || Char(N Rows(RFC_SC_Gaps)),
			:Action Plans = "Visit PCS Portal -> Engineering Actions(ATTD/WATD) for RFC Gaps closure and more details."
		};
		,
		row = {
			:Section = "RFC",
			:Deliverable = "RFCs missing triggers(SPC++ and SC)",
			:Success_Criteria = "0",
			:Actual = "SPC++ : " ||Char(N Rows(RFC_Gaps))||"  SC : " || Char(N Rows(RFC_SC_Gaps)),
			:Action Plans = ""
		};
	);
	
	report_table << add Rows(row );
	close(RFC_Gaps, NoSave);
	close(RFC_SC_Gaps, NoSave);



	//Section: RFC
	RFC_Rev_Gaps = Open(user_dir || "\\"|| "RFC_Gaps\RFC_Revison_Gaps.jmp");
	if(N Rows(RFC_Rev_Gaps) > 0,
		//summarise gaps by RFC ID
		RFC_Revison_Gaps_summary = Data Table( "RFC_Revison_Gaps" ) << Summary(
			Group( :RFC_ID of Charts_with_RFC_RptInfo, :RFC_Title ),
			Freq( "None" ),
			Weight( "None" ),
			Link to original Data Table(0)
		);
		RFC_Revison_Gaps_summary << Delete column("N Rows");
		row = {
			:Section = "RFC",
			:Deliverable = "RFC's rev CE! Gaps(TD and VF)",
			:Success_Criteria = "0",
			:Actual = Char(N Rows(RFC_Revison_Gaps_summary)),
			:Action Plans = "Close RFC Revision Gaps. Visit PCS Portal for more details."
		};
		report_table << add Rows(row );
		close(RFC_Revison_Gaps_summary, NoSave);
		,
		row = {
			:Section = "RFC",
			:Deliverable = "RFC's rev CE! Gaps(TD and VF)",
			:Success_Criteria = "0",
			:Actual = Char(N Rows(RFC_Rev_Gaps)),
			:Action Plans = ""
		};
		report_table << add Rows(row );
	);
	
	//report_table << add Rows(row );
	close(RFC_Rev_Gaps, NoSave);



	//Section: Control Limit Type
	charts = Open(user_dir || "\\"|| "Charts\Summarized_Mapped_CR.jmp");
	charts << New Column("CL_TYPE", character, Formula(Uppercase(:control_limit_type) ) );
	column( charts, "CL_TYPE" ) << Delete Formula;
	charts << clear select;

	charts << Select Where( :Name("CL_TYPE") == "STATISTICAL");
	stats = N Rows( charts << Get Selected Rows() );
	charts << clear select;

	charts << Select Where( :Name("CL_TYPE") == "ENGINEERING");
	engg = N Rows( charts << Get Selected Rows() );
	charts << clear select;


	charts << Select Where( :Name("CL_TYPE") == "TTD");
	ttd = N Rows( charts << Get Selected Rows() );
	charts << clear select;


	charts << Select Where( :Name("CL_TYPE") == "NONE");
	none = N Rows( charts << Get Selected Rows() );
	charts << clear select;
	close(charts, NoSave);

	row = {
			:Section = "Control Limit Type",
			:Deliverable = "# Charts w/ Statistical Limits",
			:Success_Criteria = "-",
			:Actual = Char(stats)
	};
	report_table << add Rows(row );

	//Section: Control Limit Type
	row = {
			:Section = "Control Limit Type",
			:Deliverable = "# Charts w/ TTD Limits",
			:Success_Criteria = "-",
			:Actual = Char(ttd)
	};
	report_table << add Rows(row );

	//Section: Control Limit Type
	row = {
			:Section = "Control Limit Type",
			:Deliverable = "# Charts w/ Engineering Limits",
			:Success_Criteria = "-",
			:Actual = Char(engg)
	};
	report_table << add Rows(row );

	//Section: Control Limit Type
	row = {
			:Section = "Control Limit Type",
			:Deliverable = "# Charts w/ Data pass through*",
			:Success_Criteria = "0",
			:Actual = Char(none)
	};
	report_table << add Rows(row );


	//Save Report
	report_table << save(user_dir || "\\"|| "Report_Table.jmp");
	close(report_table, NoSave);
	//save report for PPT
	GeneratePPTReport();

	//Preferences( Table Column Borders( 1 ));
	//Preferences( Table Row Borders( 1 ));
	report_table = Open(user_dir || "\\"|| "Report_Table.jmp", invisible);
	monitorsets = Open(user_dir || "\\"|| "Monitor_Sets.jmp", invisible);
	monitorsets_source_summary = Open(user_dir || "\\"|| "Monitor_Sets_Source_Summary.jmp", invisible);
	Monitorsets_from_PRF = open(user_dir || "\\" || "Monitorsets_from_PRF.jmp", invisible);
	monitorsets_not_at_site = Open(user_dir || "\\"|| "Platform_Gaps\monitorsets_not_at_site.jmp", invisible);
	Monitor_Sets_not_in_Golden = Open(user_dir || "\\"|| "Platform_Gaps\Monitor_Sets_not_in_Golden.jmp", invisible);
	Monitor_Sets_not_in_PRF = Open(user_dir || "\\"|| "Platform_Gaps\Monitor_Sets_not_in_PRF.jmp", invisible);
	Monitorsets_not_in_PRF_fromCRGRF = Open(user_dir || "\\" || "monitorsets_from_cr_grf_not_in_PRF.jmp");
	charts = Open(user_dir || "\\"|| "Charts\Summarized_Mapped_CR.jmp", invisible);
	charts_golden = Open(user_dir || "\\"|| "Charts\Summarized_Mapped_Golden.jmp", invisible);
	charts_RFC = Open(user_dir || "\\"|| "Charts\Charts_with_RFC.jmp", invisible);
	CE_Gaps = Open(user_dir || "\\"|| "CE_Gaps\CE_Gaps_Chart_Report.jmp", invisible);
	Comp_Gaps = Open(user_dir || "\\"|| "Comprehensiveness_Gaps\Comprehensiveness_Gaps_Chart_Report.jmp", invisible);
	RFC_Gaps = Open(user_dir || "\\"|| "RFC_Gaps\rfc_Gaps.jmp", invisible);
	RFC_SC_Gaps = Open(user_dir || "\\"|| "RFC_Gaps\Missing_SC_Gaps.jmp", invisible);
	RFC_Rev_Gaps = Open(user_dir || "\\"|| "RFC_Gaps\RFC_Revison_Gaps.jmp", invisible);
	CR_Golden_Mismatches = Open(user_dir || "\\"|| "Charts\Gaps_CR_Golden.jmp", invisible);
	Dashboard_Table = Open(user_dir || "\\"|| "Dashboard.jmp", invisible);
	filter_table = Open(user_dir || "\\"|| "Filters_Applied.jmp", invisible);
	repeat_trigger_summary_dt = Open(user_dir || "\\"|| "Repeat_Trigger\repeat_summary.jmp", invisible);
	//repeat_trigger_exclusion_dt = Open(user_dir || "\\"|| "Repeat_Trigger\repeat_trigger_exclusion.jmp", invisible);
	repeat_trigger_secondary_dt = Open(user_dir || "\\"|| "Repeat_Trigger\repeat_trigger_secondary.jmp", invisible);
	//repeat_trigger_90day_dt = Open(user_dir || "\\"|| "Repeat_Trigger\repeat_trigger_90day.jmp", invisible);
	repeat_trigger_AR_table = Open(user_dir || "\\" || "Repeat_Trigger\repeat_trigger_AR_summary.jmp", invisible );
	
	//column(repeat_trigger_summary_dt,"Mean(% OOC)") << Format( "Best", 5 );
	//column(repeat_trigger_summary_dt,"Mean(% Repeat)") << Format( "Best", 5 );
	try(column(repeat_trigger_summary_dt,"Mean(% OOC)") << Format( "Fixed Dec", 12, 2 ));
	try(column(repeat_trigger_summary_dt,"Mean(% Repeat)") << Format( "Fixed Dec", 12, 2 ));
	
	//column(repeat_trigger_secondary_dt,"Mean(% OOC)") << Format( "Best", 5 );
	//column(repeat_trigger_secondary_dt,"Mean(% Repeat)") << Format( "Best", 5 );
	try(column(repeat_trigger_secondary_dt,"Mean(% OOC)") << Format( "Fixed Dec", 12, 2 ));
	try(column(repeat_trigger_secondary_dt,"Mean(% Repeat)") << Format( "Fixed Dec", 12, 2 ));
	
	
	//find if Filters table has monitorset selected
	filter_table << select where(contains(:Filters,"monitor_set_name") | contains(:Filters,"MONITOR SET"));
	monsets_selection_on_filter_msg = "In SAM Review template, include justification for choosing specific monitor sets from filters.";
	if (N Rows( filter_table << Get Selected Rows() ) > 0,
			monsets_selection_on_filter_msg = "In SAM Review template, include justification for choosing specific monitor sets from filters.";
		,
			monsets_selection_on_filter_msg = "";
	);
	filter_table <<Clear Row States<<Clear Column Selection();
	
	//get path to reports
	report_path = user_dir || "/";
	
	
	//Get RFC info
	rfc = charts_RFC << Summary(
		Group( :RFC_ID, :RFC_Title ),
		Freq( "None" ),
		Weight( "None" ),
		Link to original data table( 0 )
	);
	rfc << Delete column("N Rows");
	
	
	//Get Control Limit information:
	grf_cl_type = Data Table( "Summarized_Mapped_Golden" ) << Summary(
		Group( :control_limit_type ),
		Freq( "None" ),
		Weight( "None" ),
		Link to original data table( 0 )
	);
	grf_cl_type: N Rows << set Name("Charts");
	
	
	//color charts which are old and missing data
	Charts << Select Where( :Date of Latest Point < Today() - In Days(43) | ismissing(:Date of Latest Point) );
	Rws = Charts << Get Selected Rows;
	Rws = AsList(Rws);
	color_to_fill = rgb color(255,204,204);
	column_list = Charts << get column names(String);
	for (i = 1, i <= nitems(column_list), i++,
		column(Charts, column_list[i]) << color cells(color_to_fill, Rws);
	);
	// note/string for charts which are old or missing data to be highlighted
	text_for_exception = "";
	if (N Items(Rws) > 0,
			text_for_exception = "Charts with no data in last 6 WWs: " || Char(N Items(Rws)) || "     (AR: Provide details in SAM Review slides, why you have charts without Data).";
		,
			text_for_exception = "";
	);
	Charts <<Clear Row States<<Clear Column Selection();
	
	//summarise gaps by RFC ID
	if(N Rows(Data Table( "RFC_Revison_Gaps" ) ) >0,
		RFC_Revison_Gaps_summary = Data Table( "RFC_Revison_Gaps" ) << Summary(
			Group( :RFC_ID of Charts_with_RFC_RptInfo, :RFC_Title ),
			Freq( "None" ),
			Weight( "None" ),
			Link to original Data Table(0)
		);
		RFC_Revison_Gaps_summary << Delete column("N Rows");
		column(RFC_Revison_Gaps_summary,"RFC_ID of Charts_with_RFC_RptInfo") << Set Name("RFC ID");
	,
		//create a empty table for SC Alarms:
		RFC_Revison_Gaps_summary = New Table("RFC_Revison_Gaps", 
			New Column("RFC ID", Character),
			New Column("RFC_Title", Character)
		);
	);
	RFC_Revison_Gaps_summary << save(user_dir || "\\" || "RFC_Gaps\RFC_Revison_Gaps_summary.jmp");
	
	
	//Repeat Trigger notes
	repeat_trigger_dash = New Table("repeat_trigger_dashboard", 
		New Column("Deliverable", Character),
		New Column("Success Criteria", Character),
		New Column("Actual", Character),
		New Column("Action", Character)
	);
	colnames = Data Table( "repeat_summary" ) << get column names(  );
	if (N Items(colnames) >2,
		row = {
				:Deliverable = "% of RFCs with repeat trigger <20%",
				:Success Criteria = "100%(x/y)",
				:Actual = output_rpt_perc,
				:Action = "Follow 'Action Required Notes' table at 'Repeat Trigger Gaps' tab."
		};
		repeat_trigger_dash << add Rows(row );
	,
		row = {
				:Deliverable = "% of RFCs with repeat trigger <20%",
				:Success Criteria = "100%(x/y)",
				:Actual = "Either all RFCs are excluded from Audit or, no RFC data collected in last 30 days in OASYS database.",
				:Action = ""
		};
		repeat_trigger_dash << add Rows(row );
	);
	//column(repeat_trigger_dash,"Mean(% OOC)") << Format( "Best", 5 );
	//column(repeat_trigger_dash,"Mean(% Repeat)") << Format( "Best", 5 );
	
	
	//Get Banner Image : comment for Prod version
	//copy = copy file("\\atdfile3.ch.intel.com\atd-web\MFGReports.ch.intel.com\SAM_Review\Raw_Data_Files\Banner_beta.png", user_dir || "\\" ||"Banner_Beta.png");
	
	//Get Catalyst Image : comment for Prod version
	copy = copy file("\\atdfile3.ch.intel.com\atd-web\MFGReports.ch.intel.com\SAM_Review\Raw_Data_Files\Catalyst_Help.png", user_dir || "\\" ||"Catalyst_Help.png");
	copy_spc_charts = copy file("\\atdfile3.ch.intel.com\atd-web\MFGReports.ch.intel.com\SAM_Review\Raw_Data_Files\Catalyst_Help_SPC_Charts.png", user_dir || "\\" ||"Catalyst_Help_SPC_Charts.png");
	
	//Names Default To Here( 1 );
	report_window = New Window( "Report",
		tb_list = Tab Box(
			"Dashboard",
			Tip( "SAM Report" ),
			//Button Box( "Press One" ),
			vlistbox(
					//pb = Picture Box( Open( user_dir || "\\" ||"Banner_Beta.png", png ) ), //Get Banner Image : comment for Prod version
					spacerbox(Size(5,40)),
					//user_guide_btn = Button Box("User Guide/Help", Web("http://mfgreports.ch.intel.com/SAM_Review/User_Guide/SAM%20Review%20Dashboard%20Instructions.pptx"), <<underlinestyle),
					user_guide_btn = Button Box("User Guide/Help", Web("https://content.sp2019.intel.com/sites/attdstats/ATTD_ATM%20Stats%20Library/PCS/BKMS/SAM%20Review%20Dashboard%20Instructions.pptx"), <<underlinestyle),
					panelbox("PCS Setup Dashboard",
						spacerbox(Size(5,10)),
						path_to_print = Text Box( dashboard_note_1 ),
						path_to_print << Font Color( "red" );
						spacerbox(Size(5,10)),
						vlistbox(//vlistbox
							spacerbox(Size(5,10)),
							r1_temp = report_table << Get As Report,
							Rollup_Box = r1_temp[Table Box( 1 )];
							Rollup_Box << Set Column Borders( 1 ) << Set Row Borders( 1 ) << Set Scrollable( 0, 0 );
							spacerbox(Size(5,20)),
							
							/*spacerbox(Size(5,10)),
							//r1_temp = report_table << Get As Report,
							report_table << New Data Box(),
							//Rollup_Box = r1_temp[Table Box( 1 )];
							//Rollup_Box << Set Column Borders( 1 ) << Set Row Borders( 1 ) << Set Scrollable( 0, 0 );
							spacerbox(Size(5,20)),*/
							
							/*V List Box(
								spacerbox(Size(5,25)),
								Button Box( "Open", 
									tb_list << Set Selected( 2 ),
									, << Underline Style(1)
								),
								Button Box( "Open", 
									tb_list << Set Selected( 3 ),
									, << Underline Style(1)
								),
								Button Box( "Open", 
									tb_list << Set Selected( 4 ),
									, << Underline Style(1)
								),
								Button Box( "Open", 
									tb_list << Set Selected( 5 ),
									, << Underline Style(1)
								),
								Button Box( "Open", 
									tb_list << Set Selected( 6 ),
									, << Underline Style(1)
								),
								Button Box( "Open", 
									tb_list << Set Selected( 7 ),
									, << Underline Style(1)
								),
								Button Box( "Open", 
									tb_list << Set Selected( 8 ),
									, << Underline Style(1)
								)
							),*/
							//tb_rpt_90Days = Text Box( "Utilise .ppt format of dashboard(SAM Review Presentation.pptx) to copy content to SAM Review presentation template from path:"  ),
							tb_rpt_90Days = Text Box("To add content to SAM Data Review Template either: (1) make the table above into a data table or (2) access a .pptx version of the table at path:"),
							path_to_print = Text Box( report_path ),
							//path_to_print << Font Color( "red" );
							path_to_print << set width(1400);
							tb_rpt_90Days << set width(1400);
							
						),
					),
					spacerbox(Size(5,10)),
					
					hlistbox(
							//Monitorsets in PRF
							pb_filter = panelbox("Monitorsets in PRF",
								spacerbox(Size(5,10)),
								r1_temp_prf = Monitorsets_from_PRF << Get As Report,
								Rollup_Box_prf = r1_temp_prf[Table Box( 1 )];
								Rollup_Box_prf << Set Column Borders( 1 ) << Set Row Borders( 1 );
							),
							//filter
							pb_filter = panelbox("Filters Applied on WS and PRF data tables",
								spacerbox(Size(5,10)),
								vlistbox(
									tb_monsets_selection_on_filter_msg = Text Box(monsets_selection_on_filter_msg),
									tb_monsets_selection_on_filter_msg << Font Color( "red" );
									tb_monsets_selection_on_filter_msg << set width(900);
									
									spacerbox(Size(5,10)),
									r2_temp = filter_table << Get As Report,
									Rollup_Box2 = r2_temp[Table Box( 1 )];
									Rollup_Box2 << Set Scrollable(0,1);
									Rollup_Box2 << Set Column Borders( 1 ) << Set Row Borders( 1 );
									spacerbox(Size(5,10)),
								),
							),
							pb_filter << Set Width(250);	
					),
					/*pb_filter = panelbox("Filters Applied on WS and PRF data tables",
						spacerbox(Size(5,10)),
						vlistbox(
							tb_monsets_selection_on_filter_msg = Text Box(monsets_selection_on_filter_msg),
							tb_monsets_selection_on_filter_msg << Font Color( "red" );
							tb_monsets_selection_on_filter_msg << set width(700);
							
							spacerbox(Size(5,10)),
							r2_temp = filter_table << Get As Report,
							Rollup_Box2 = r2_temp[Table Box( 1 )];
							Rollup_Box2 << Set Scrollable(0,1);
							Rollup_Box2 << Set Column Borders( 1 ) << Set Row Borders( 1 );
							spacerbox(Size(5,10)),
						),
					),
					pb_filter << Set Width(250);*/
					
					spacerbox(Size(5,10)),
					panelbox("PCS Health Dashboard",
						spacerbox(Size(5,10)),
						vlistbox(
							spacerbox(Size(5,10)),
							r3_temp = repeat_trigger_dash << Get As Report,
							Rollup_Box3 = r3_temp[Table Box( 1 )];
							Rollup_Box3 << Set Column Borders( 1 ) << Set Row Borders( 1 );
							spacerbox(Size(5,10)),
						),
					),
					
					Text Box( "Results are available at path:"  ),
					path_to_print = Text Box( report_path ),
					path_to_print << Font Color( "red" );
			),
			
			
			"Monitor Sets",
			//Closeable( 1 ),
			Tip( "Monitor Sets" ),
			//Button Box( "Press Two" ),
			//monitorsets << Get As Report,
			vlistbox(
					Text Box( "Unique MonitorSets From CR and/or PRF:"  ),
					Text Box( NRows(monitorsets) ),
					spacerbox(Size(5,40)),
					panelbox("Monitorsets",
						spacerbox(Size(5,10)),
						vlistbox(
							spacerbox(Size(5,10)),
							//monitorsets << Get As Report, //Xin asked to remove it
							r1_temp = monitorsets_source_summary << Get As Report,
							Rollup_Box = r1_temp[Table Box( 1 )];
							Rollup_Box << Set Column Borders( 1 ) << Set Row Borders( 1 );
							spacerbox(Size(5,10)),
						),
					),
					spacerbox(Size(5,10)),
			),
			
			/*
			"Monitorsets not at Site",
			//Icon( "Nominal" ),
			Tip( "Monitorsets not at Site" ),
			//Button Box( "Press Three" ),
			vlistbox(
					Text Box( "Monitorsets not at Site:"  ),
					Text Box( NRows(monitorsets_not_at_site ) ),
					spacerbox(Size(5,40)),
					panelbox("Monitorsets not at Site",
						spacerbox(Size(5,10)),
						vlistbox(
							spacerbox(Size(5,10)),
							monitorsets_not_at_site << Get As Report,
							spacerbox(Size(5,10)),
						),
					),
					spacerbox(Size(5,10)),
			),
			
			
			"Monitorsets not in Golden",
			//Icon( "Nominal" ),
			Tip( "Monitorsets not in Golden" ),
			//Button Box( "Press Three" ),
			vlistbox(
					Text Box( "Monitorsets not in Golden:"  ),
					Text Box( NRows(Monitor_Sets_not_in_Golden) ),
					spacerbox(Size(5,40)),
					panelbox("Monitorsets not in Golden",
						spacerbox(Size(5,10)),
						vlistbox(
							spacerbox(Size(5,10)),
							Monitor_Sets_not_in_Golden << Get As Report,
							spacerbox(Size(5,10)),
						),
					),
					spacerbox(Size(5,10)),
			),
			
			"Monitorsets not in PRF",
			//Icon( "Nominal" ),
			Tip( "Monitorsets not in PRF" ),
			//Button Box( "Press Three" ),
			vlistbox(
					Text Box( "Monitorsets not in PRF:"  ),
					Text Box( NRows(Monitor_Sets_not_in_PRF) ),
					spacerbox(Size(5,40)),
					panelbox("Monitorsets not in Golden",
						spacerbox(Size(5,10)),
						vlistbox(
							spacerbox(Size(5,10)),
							Monitor_Sets_not_in_PRF << Get As Report,
							spacerbox(Size(5,10)),
						),
					),
					spacerbox(Size(5,10)),
			),
			*/
			
			"Missing MonitorSets",
			Tip("Missing MonitorSets"),
			Outline Box( "Missing MonitorSets",
						vlistbox(
								/*H List Box(
									Text Box( "Monitorsets not in PRF:"  ),
									Text Box( NRows(Monitor_Sets_not_in_PRF) )
								),*/
								H List Box(
									//Text Box( "Monitorsets not in PRF but exist in CR and Golden:"  ),
									Text Box( "Monitorsets not in PRF:"  ),
									Text Box( NRows(Monitorsets_not_in_PRF_fromCRGRF) )
								),
								H List Box(
									Text Box( "Monitorsets not at Site:"  ),
									Text Box( NRows(monitorsets_not_at_site ) )
								),
								H List Box(
									Text Box( "Monitorsets not in Golden:"  ),
									Text Box( NRows(Monitor_Sets_not_in_Golden) )
								),
								spacerbox(Size(5,20)),
						),
						V List Box(
							/*ob2 = Outline Box( "Monitorsets not in PRF but in WS",
								vlistbox(
										H List Box(
											Text Box( "Monitorsets not in PRF but in WS:"  ),
											Text Box( NRows(Monitor_Sets_not_in_PRF) )
										),
										spacerbox(Size(5,10)),
										panelbox("Monitorsets not in PRF",
											spacerbox(Size(5,10)),
											vlistbox(
												spacerbox(Size(5,10)),
												Monitor_Sets_not_in_PRF << Get As Report,
												spacerbox(Size(5,10)),
											),
										),
										spacerbox(Size(5,10)),
								)
								
								
							),*/
							spacerbox(Size(5,20)),
							//ob3 = Outline Box( "Monitorsets not in PRF but exist in CR and Golden:",
							ob3 = Outline Box( "Monitorsets not in PRF but exist in CR and/or Golden:",
								vlistbox(
										H List Box(
											Text Box( "Monitorsets not in PRF but exist in CR and/or Golden:"  ),
											Text Box( NRows(Monitorsets_not_in_PRF_fromCRGRF) )
										),
										spacerbox(Size(5,10)),
										panelbox("Monitorsets not in PRF",
											spacerbox(Size(5,10)),
											vlistbox(
												spacerbox(Size(5,10)),
												r1_temp = Monitorsets_not_in_PRF_fromCRGRF << Get As Report,
												Rollup_Box = r1_temp[Table Box( 1 )];
												Rollup_Box << Set Column Borders( 1 ) << Set Row Borders( 1 );
												spacerbox(Size(5,10)),
											),
										),
										spacerbox(Size(5,10)),
								)
								
								
							),
							spacerbox(Size(5,20)),
							ob4 = Outline Box( "Monitorsets not at Site",
								vlistbox(
										H List Box(
											Text Box( "Monitorsets not at Site:"  ),
											Text Box( NRows(monitorsets_not_at_site ) )
										),
										spacerbox(Size(5,10)),
										panelbox("Monitorsets not at Site",
											spacerbox(Size(5,10)),
											vlistbox(
												spacerbox(Size(5,10)),
												r2_temp = monitorsets_not_at_site << Get As Report,
												Rollup_Box2 = r2_temp[Table Box( 1 )];
												Rollup_Box2 << Set Column Borders( 1 ) << Set Row Borders( 1 );
												spacerbox(Size(5,10)),
											),
										),
										spacerbox(Size(5,10)),
								)
							),
							spacerbox(Size(5,20)),
							ob5 = Outline Box( "Monitorsets not in Golden",
								vlistbox(
										H List Box(
											Text Box( "Monitorsets not in Golden:"  ),
											Text Box( NRows(Monitor_Sets_not_in_Golden) )
										),
										spacerbox(Size(5,10)),
										panelbox("Monitorsets not in Golden",
											spacerbox(Size(5,10)),
											vlistbox(
												spacerbox(Size(5,10)),
												r3_temp = Monitor_Sets_not_in_Golden << Get As Report,
												Rollup_Box3 = r3_temp[Table Box( 1 )];
												Rollup_Box3 << Set Column Borders( 1 ) << Set Row Borders( 1 );
												spacerbox(Size(5,10)),
											),
										),
										spacerbox(Size(5,10)),
								)
							)
						)
			),
					
			
			"Chart Report <-> Golden : Gaps",
			//Icon( "Nominal" ),
			Tip( "Chart Report - Golden : Gaps" ),
			//Button Box( "Press Three" ),
			vlistbox(
					Text Box( "Number of Chart Report Vs Golden, mismatches:"  ),
					Text Box( NRows(CR_Golden_Mismatches) ),
					spacerbox(Size(5,40)),
					panelbox("Chart Report <-> Golden, mismatches",
						spacerbox(Size(5,10)),
						vlistbox(
							spacerbox(Size(5,10)),
							tb7 = CR_Golden_Mismatches << Get As Report,
							Rollup_Box = tb7[Table Box( 1 )];
							Rollup_Box << Set Column Borders( 1 ) << Set Row Borders( 1 ); 
							spacerbox(Size(5,10)),
						),
					),
					spacerbox(Size(5,10)),
			),
			
			
			
			"Charts",
			Tip("Charts in Golden and Chart Report"),
			Outline Box( "Charts in Golden and Chart-Report",
						vlistbox(
								H List Box(
									Text Box( "Number of Charts in Golden: "  ),
									Text Box( NRows(charts_golden) )
								),
								H List Box(
									Text Box( "Number of Charts in Chart Report: "  ),
									Text Box( NRows(charts) )
								),
								text_to_print = Text Box( text_for_exception ),
								text_to_print << Font Color( "red" );
								spacerbox(Size(5,20)),
						),
						V List Box(
							ob2 = Outline Box( "Charts in Golden",
								vlistbox(
										H List Box(
											Text Box( "Number of Charts in Golden:"  ),
											Text Box( NRows(charts_golden) )
										),
										spacerbox(Size(5,10)),
										r0_temp = grf_cl_type << Get As Report,
										Rollup_Box0 = r0_temp[Table Box( 1 )];
										Rollup_Box0 << Set Column Borders( 1 ) << Set Row Borders( 1 );
										spacerbox(Size(5,10)),
										panelbox("Golden Charts",
											spacerbox(Size(5,10)),
											vlistbox(
												spacerbox(Size(5,10)),
												r1_temp = charts_golden << Get As Report,
												Rollup_Box = r1_temp[Table Box( 1 )];
												Rollup_Box << Set Column Borders( 1 ) << Set Row Borders( 1 );
												spacerbox(Size(5,10)),
											),
										),
										spacerbox(Size(5,10)),
								)
								
								
							),
							spacerbox(Size(5,20)),
							ob3 = Outline Box( "Charts in Chart Report",
								vlistbox(
										H List Box(
											Text Box( "Number of Charts in Chart Report:"  ),
											Text Box( NRows(charts) )
										),
										spacerbox(Size(5,10)),
										panelbox("Chart-Report Charts",
											spacerbox(Size(5,10)),
											vlistbox(
												spacerbox(Size(5,10)),
												tb1 = charts << Get As Report,
												Rollup_Box2 = tb1[Table Box( 1 )];
												Rollup_Box2 << Set Column Borders( 1 ) << Set Row Borders( 1 );
												spacerbox(Size(5,10)),
											),
										),
										spacerbox(Size(5,10)),
								)
							)
						)
			),
			
			

			
			/*
			"Charts - Golden",
			//Icon( "Nominal" ),
			Tip( "Charts - Golden" ),
			//Button Box( "Press Three" ),
			vlistbox(
					Text Box( "Number of Charts in Golden:"  ),
					Text Box( NRows(charts_golden) ),
					spacerbox(Size(5,40)),
					grf_cl_type << Get As Report,
					spacerbox(Size(5,10)),
					panelbox("Golden Charts",
						spacerbox(Size(5,10)),
						vlistbox(
							spacerbox(Size(5,10)),
							charts_golden << Get As Report,
							spacerbox(Size(5,10)),
						),
					),
					spacerbox(Size(5,10)),
			),
			
			
			"Charts - Chart Report",
			//Icon( "Nominal" ),
			Tip( "Charts - Chart Report" ),
			//Button Box( "Press Three" ),
			vlistbox(
					Text Box( "Number of Charts in Chart Report:"  ),
					Text Box( NRows(charts) ),
					spacerbox(Size(5,40)),
					panelbox("Chart-Report Charts",
						spacerbox(Size(5,10)),
						vlistbox(
							spacerbox(Size(5,10)),
							tb1 = charts << Get As Report,
							spacerbox(Size(5,10)),
						),
					),
					spacerbox(Size(5,10)),
			),
			*/
			
			
			"CE! Gaps",
			//Icon( "Nominal" ),
			Tip( "CE! Gaps" ),
			//Button Box( "Press Three" ),
			vlistbox(
					Text Box( "Number of Charts with CE! Gaps:"  ),
					Text Box( NRows(CE_Gaps) ),
					spacerbox(Size(5,40)),
					panelbox("CE! Gaps",
						spacerbox(Size(5,10)),
						vlistbox(
							spacerbox(Size(5,10)),
							tb2 = CE_Gaps << Get As Report,
							Rollup_Box = tb2[Table Box( 1 )];
							Rollup_Box << Set Column Borders( 1 ) << Set Row Borders( 1 );
							spacerbox(Size(5,10)),
						),
					),
					spacerbox(Size(5,10)),
			),
			
			
			"Comprehensiveness Gaps",
			//Icon( "Nominal" ),
			Tip( "Comprehensiveness Gaps" ),
			//Button Box( "Press Three" ),
			vlistbox(
					Text Box( "Number of Charts with Comprehensiveness Gaps:"  ),
					Text Box( NRows(Comp_Gaps) ),
					spacerbox(Size(5,40)),
					panelbox("Comprehensiveness Gaps",
						spacerbox(Size(5,10)),
						vlistbox(
							spacerbox(Size(5,10)),
							tb3 = Comp_Gaps << Get As Report,
							Rollup_Box = tb3[Table Box( 1 )];
							Rollup_Box << Set Column Borders( 1 ) << Set Row Borders( 1 );
							spacerbox(Size(5,10)),
						),
					),
					spacerbox(Size(5,10)),
			),
			
			
			"RFC and Charts",
			//Icon( "Nominal" ),
			Tip( "RFC and Charts" ),
			//Button Box( "Press Three" ),
			vlistbox(
					Text Box( "Charts with SPC++ RFC Information:"  ),
					r0_temp = rfc << Get As Report,
					Rollup_Box0 = r0_temp[Table Box( 1 )];
					Rollup_Box0 << Set Column Borders( 1 ) << Set Row Borders( 1 );
					//Text Box( NRows(charts_RFC) ),
					spacerbox(Size(5,40)),
					panelbox("Charts with RFC Information",
						spacerbox(Size(5,10)),
						vlistbox(
							spacerbox(Size(5,10)),
							r1_temp = charts_RFC << Get As Report,
							Rollup_Box = r1_temp[Table Box( 1 )];
							Rollup_Box << Set Column Borders( 1 ) << Set Row Borders( 1 );
							spacerbox(Size(5,10)),
						),
					),
					spacerbox(Size(5,10)),
			),
			
			/*
			"RFC Gaps(SPC++)",
			//Icon( "Nominal" ),
			Tip( "RFC Gaps - SPC++" ),
			//Button Box( "Press Three" ),
			vlistbox(
					Text Box( "Number of Charts with SPC++ RFC Gaps:"  ),
					Text Box( NRows(RFC_Gaps) ),
					spacerbox(Size(5,40)),
					panelbox("SPC++ RFC Gaps",
						spacerbox(Size(5,10)),
						vlistbox(
							spacerbox(Size(5,10)),
							RFC_Gaps << Get As Report,
							spacerbox(Size(5,10)),
						),
					),
					spacerbox(Size(5,10)),
			),
			
			
			"RFC Gaps(SC)",
			//Icon( "Nominal" ),
			Tip( "RFC Gaps - SC" ),
			//Button Box( "Press Three" ),
			vlistbox(
					Text Box( "Number of Charts with SC RFC Gaps:"  ),
					Text Box( NRows(RFC_SC_Gaps) ),
					spacerbox(Size(5,40)),
					panelbox("SC RFC Gaps",
						spacerbox(Size(5,10)),
						vlistbox(
							spacerbox(Size(5,10)),
							RFC_SC_Gaps << Get As Report,
							spacerbox(Size(5,10)),
						),
					),
					spacerbox(Size(5,10)),
			),
			
			
			"RFC Revision Gaps",
			//Icon( "Nominal" ),
			Tip( "RFC Revision Gaps" ),
			//Button Box( "Press Three" ),
			vlistbox(
					Text Box( "Number of Charts with RFC Revision Gaps:"  ),
					Text Box( NRows(RFC_Rev_Gaps) ),
					spacerbox(Size(5,40)),
					panelbox("RFC Revision Gaps",
						spacerbox(Size(5,10)),
						vlistbox(
							spacerbox(Size(5,10)),
							RFC_Rev_Gaps << Get As Report,
							spacerbox(Size(5,10)),
						),
					),
					spacerbox(Size(5,10)),
			),
			*/
			
			
			"RFC Gaps",
			Tip("RFC Gaps"),
			Outline Box( "RFC Gaps",
						vlistbox(
								H List Box(
									Text Box( "Number of Charts with SPC++ RFC Gaps:"  ),
									Text Box( NRows(RFC_Gaps) )
								),
								H List Box(
									Text Box( "Number of Charts with SC RFC Gaps:"  ),
									Text Box( NRows(RFC_SC_Gaps) )
								),
								H List Box(
									Text Box( "RFCs with Revision Gaps:"  ),
									Text Box( NRows(RFC_Revison_Gaps_summary) )
								),
								RFC_Revison_Gaps_summary << Get As Report,
								spacerbox(Size(5,20)),
						),
						
						V List Box(
							ob2 = Outline Box( "RFC Gaps(SPC++)",
								vlistbox(
										H List Box(
											Text Box( "Number of Charts with SPC++ RFC Gaps:"  ),
											Text Box( NRows(RFC_Gaps) )
										),
										spacerbox(Size(5,10)),
										panelbox("RFC Gaps(SPC++)",
											spacerbox(Size(5,10)),
											vlistbox(
												spacerbox(Size(5,10)),
												tb4 = RFC_Gaps << Get As Report,
												Rollup_Box = tb4[Table Box( 1 )];
												Rollup_Box << Set Column Borders( 1 ) << Set Row Borders( 1 );
												spacerbox(Size(5,10)),
											),
										),
										spacerbox(Size(5,10)),
								)
								
								
							),
							spacerbox(Size(5,20)),
							ob3 = Outline Box( "RFC Gaps(SC)",
								vlistbox(
										H List Box(
											Text Box( "Number of Charts with SC RFC Gaps:"  ),
											Text Box( NRows(RFC_SC_Gaps) )
										),
										spacerbox(Size(5,10)),
										panelbox("RFC Gaps(SC)",
											spacerbox(Size(5,10)),
											vlistbox(
												spacerbox(Size(5,10)),
												tb5 = RFC_SC_Gaps << Get As Report,
												Rollup_Box2 = tb5[Table Box( 1 )];
												Rollup_Box2 << Set Column Borders( 1 ) << Set Row Borders( 1 );
												spacerbox(Size(5,10)),
											),
										),
										spacerbox(Size(5,10)),
								)
							),
							spacerbox(Size(5,20)),
							ob4 = Outline Box( "RFC Revision Gaps",
								vlistbox(
										H List Box(
											Text Box( "Number of Charts with RFC Revision Gaps:"  ),
											Text Box( NRows(RFC_Rev_Gaps) )
										),
										spacerbox(Size(5,10)),
										panelbox("RFC Revision Gaps",
											spacerbox(Size(5,10)),
											vlistbox(
												spacerbox(Size(5,10)),
												tb6 = RFC_Rev_Gaps << Get As Report,
												Rollup_Box3 = tb6[Table Box( 1 )];
												Rollup_Box3 << Set Column Borders( 1 ) << Set Row Borders( 1 );
												spacerbox(Size(5,10)),
											),
										),
										spacerbox(Size(5,10)),
								)
							)
						)
			),
			
			
			
			"Repeat Trigger Gaps",
			Tip("Repeat Trigger Gaps"),
			Outline Box( "Repeat Trigger Gaps",
						vlistbox(
								H List Box(
									Text Box( "Repeat Trigger Gaps details(RFCs not excluded from audit)"  )
								),
								spacerbox(Size(5,20)),
						),
						
						V List Box(
							ob1 = Outline Box( "Repeat Trigger Gaps(30 Days) : RFC Level",
								vlistbox(
										spacerbox(Size(5,10)),
										panelbox("Repeat Trigger Gaps(30 Days) : RFC Level",
											spacerbox(Size(5,10)),
											vlistbox(
												spacerbox(Size(5,10)),
												r1_temp = repeat_trigger_summary_dt << Get As Report,
												Rollup_Box = r1_temp[Table Box( 1 )];
												Rollup_Box << Set Column Borders( 1 ) << Set Row Borders( 1 );
												spacerbox(Size(5,10)),
											),
										),
										spacerbox(Size(5,10)),
								)
								
								
							),
							spacerbox(Size(5,20)),
							
							spacerbox(Size(5,20)),
							ob2 = Outline Box( "Repeat Trigger Gaps(90 Days, Product specific): Chart Level",
								vlistbox(
										spacerbox(Size(5,10)),
										panelbox("Repeat Trigger Gaps(90 Days, Product specific): Chart Level",
											spacerbox(Size(5,10)),
											vlistbox(
												spacerbox(Size(5,10)),
												r2_temp = repeat_trigger_secondary_dt << Get As Report,
												Rollup_Box2 = r2_temp[Table Box( 1 )];
												Rollup_Box2 << Set Column Borders( 1 ) << Set Row Borders( 1 );
												spacerbox(Size(5,10)),
											),
										),
										spacerbox(Size(5,10)),
								)
								
								
							),
							spacerbox(Size(5,20)),
							
							ob3 = Outline Box( "Action Required Notes",
								vlistbox(
										spacerbox(Size(5,10)),
										panelbox("Action Table:",
											spacerbox(Size(5,10)),
											vlistbox(
												spacerbox(Size(5,10)),
												r3_temp = repeat_trigger_AR_table << Get As Report,
												Rollup_Box3 = r3_temp[Table Box( 1 )];
												Rollup_Box3 << Set Column Borders( 1 ) << Set Row Borders( 1 );
												spacerbox(Size(5,10)),
											),
										),
										spacerbox(Size(5,10)),
								)
							)
							
						)
			),
			
			
			
			"PCS Health",
			//Icon( "Nominal" ),
			Tip( "PCS Health" ),
			vlistbox(
					spacerbox(Size(5,15)),
					Outline Box( "PCS Health: Catalyst PCS Health Module",
						spacerbox(Size(5,10)),
						vlistbox(
							
							Text Box("NOTE: If you already had Catalyst open, while the running script: You may need to REFRESH your favorite list in Catalyst to see the new entry for file:  <b> " || favoritefileName || "</b>",<<Markup, <<SetWidth( 1400 )),
							spacerbox(Size(15,20)),
							Text Box("->Refresh Favorites list: 'Right Click' on 'My Favorites' and click Refresh(see screenshot below).", <<SetWidth( 1200 ) ),
							Text Box("->Favorite list Cleanup/Edit: 'Right Click' on Favorite file(see screenshot below).", <<SetWidth( 1200 ) ),
							
							spacerbox(Size(5,20)),
							Text Box( "<b>Step 1:</b> Open Catalyst and select 'My Favorites' at the bottom of the screen.       ",<<Markup , <<SetWidth( 1200 )  ),
							spacerbox(Size(5,10)),
							Text Box( "<b>Step 2:</b> Click on Favorite file: <b> " || favoritefileName || "</b> , and <u>wait</u> for PCS Health Dashboard to load.                ",<<Markup , <<SetWidth( 1300 )),
							spacerbox(Size(5,10)),
							Text Box( "<b>Step 3:</b> Take screenshot of PCS Health Dashboard(capture filters shown at top in screenshot) and add it to presentation.       ",<<Markup , <<SetWidth( 1200 ) ),
							spacerbox(Size(5,30)),
							
							
						),
						
					),
					spacerbox(Size(5,10)),
					Outline Box( "Catalyst Instructions:",
						spacerbox(Size(5,10)),
						vlistbox(
							pb = Picture Box( Open( user_dir || "\\" ||"Catalyst_Help.png", png ) ), //Get Banner Image : comment for Prod version
						),
						
					),
					
					//Text Box(Char(ws_cr_filter)),
					//Text Box(Char(prf_filter_selection)),
			),
			
			
			"SPC++ Charts",
			//Icon( "Nominal" ),
			Tip( "SPC++ Charts" ),
			vlistbox(
					spacerbox(Size(5,15)),
					Outline Box( "SPC++ Charts: Catalyst SPC++ Module",
						spacerbox(Size(5,10)),
						vlistbox(
							
							Text Box("NOTE: If you already had Catalyst open, while the running script: You may need to REFRESH your favorite list in Catalyst to see the new entry for file:  <b> " || favoritefileNameSPCChart || "</b>",<<Markup, <<SetWidth( 1400 )),
							spacerbox(Size(15,20)),
							Text Box("->Refresh Favorites list: 'Right Click' on 'My Favorites' and click Refresh(see screenshot below).", <<SetWidth( 1200 ) ),
							Text Box("->Favorite list Cleanup/Edit: 'Right Click' on Favorite file(see screenshot below).", <<SetWidth( 1200 ) ),
							
							spacerbox(Size(5,20)),
							Text Box( "<b>Step 1:</b> Open Catalyst and select 'My Favorites' at the bottom of the screen.       ",<<Markup , <<SetWidth( 1200 )  ),
							spacerbox(Size(5,10)),
							Text Box( "<b>Step 2:</b> Click on Favorite file: <b> " || favoritefileNameSPCChart || "</b> , and <u>wait</u> for SPC++ Charts to load.                ",<<Markup , <<SetWidth( 1300 )),
							//spacerbox(Size(5,10)),
							//Text Box( "<b>Step 3:</b> Take screenshot of PCS Health Dashboard(capture filters shown at top in screenshot) and add it to presentation.       ",<<Markup , <<SetWidth( 1200 ) ),
							spacerbox(Size(5,30)),
							
							
						),
						
					),
					spacerbox(Size(5,10)),
					Outline Box( "Catalyst Instructions:",
						spacerbox(Size(5,10)),
						vlistbox(
							pb = Picture Box( Open( user_dir || "\\" ||"Catalyst_Help_SPC_Charts.png", png ) ), //Get Banner Image : comment for Prod version
						),
						
					),
					
					//Text Box(Char(ws_cr_filter)),
					//Text Box(Char(prf_filter_selection)),
			),
			
			
			
			/*
			"Backup(For Reviewer)",
			//Icon( "Nominal" ),
			Tip( "Backup(For Reviewer)" ),
			vlistbox(
					Text Box( "Backup(For Reviewer)"  ),
					spacerbox(Size(5,40)),
					panelbox("Backup(For Reviewer)",
						spacerbox(Size(5,10)),
						vlistbox(
							spacerbox(Size(5,10)),
							r1_temp = Dashboard_Table << Get As Report,
							Rollup_Box = r1_temp[Table Box( 1 )];
							Rollup_Box << Set Column Borders( 1 ) << Set Row Borders( 1 );
							spacerbox(Size(5,10)),
						),
					),
					spacerbox(Size(5,10)),
					//Text Box(Char(ws_cr_filter)),
					//Text Box(Char(prf_filter_selection)),
			),*/
			
			
		)
	);
	
	//tb1[table box(1)] << Set Scrollable(0,1);
	//tb2[table box(1)] << Set Scrollable(0,0);
	//tb3[table box(1)] << Set Scrollable(0,0);
	//tb4[table box(1)] << Set Scrollable(0,0);
	//tb5[table box(1)] << Set Scrollable(0,0);
	//tb6[table box(1)] << Set Scrollable(0,0);
	//tb7[table box(1)] << Set Scrollable(0,0);
	report_window << Save Journal(user_dir || "\\"|| "Report.jrn");
	report_window << close Window();
	
	//Close data tables
	Close(Data Table("Report_Table"), NoSave);
	close(filter_table, NoSave);
	Close(monitorsets, NoSave);
	close(monitorsets_source_summary, NoSave);
	close(Monitorsets_from_PRF, NoSave);
	close(monitorsets_not_at_site, NoSave);
	close(Monitor_Sets_not_in_Golden, NoSave);
	close(Monitor_Sets_not_in_PRF, NoSave);
	close(Monitorsets_not_in_PRF_fromCRGRF, NoSave);
	Close(charts, NoSave);
	Close(charts_golden, NoSave);
	close(grf_cl_type, NoSave);
	Close(charts_RFC, NoSave);
	close(rfc, NoSave);
	Close(CE_Gaps, NoSave);
	Close(Comp_Gaps, NoSave);
	Close(RFC_Gaps, NoSave);
	Close(RFC_SC_Gaps, NoSave);
	Close(RFC_Rev_Gaps, NoSave);
	close(RFC_Revison_Gaps_summary, NoSave);
	close(CR_Golden_Mismatches, NoSave);
	close(repeat_trigger_dash, NoSave);
	//close(repeat_trigger_dt, NoSave);
	close(repeat_trigger_summary_dt, NoSave);
	close(repeat_trigger_secondary_dt, NoSave);
	close(repeat_trigger_AR_table, NoSave);
	Close(Dashboard_Table, NoSave);
	
	
	print("Journal File Generated...");
	//Save Text File( user_dir || "\" || "Filters.txt", "Filters Selected" || Char(ws_cr_filter)  || "\!n", mode("append"));
	

);


//https://community.jmp.com/t5/Discussions/Data-filter-script/td-p/11239

ProgressBar = Function({},
	
	//Names Default To Here( 1 );
	//i = 1;
	//imax = 100;
	progress_bar_dlgStatus = New Window( "Overall Progress",
		V List Box(
			dlg_gb = Graph Box(
				Title( "Overall Progress" ), 
				FrameSize( 150, 15 ), 
				X Scale( 0, 100 ), 
				Y Scale( 0, 1 ), 
				yaxis( show major ticks( 0 ), show minor ticks( 0 ) ), 
				xname( "% complete" ), 
				yname( "" )
			),
			tb = Text Box(
				//" Current step " || Char( i ) || " of " || Char( imax ),
				"Gathering Data...",
				<<Set Font Size( 12 ),
				//<<Justify Text( "center" ),
				<<Set width( 300 )
			),
			tb1 = Text Box(
				//" Current step " || Char( i ) || " of " || Char( imax ),
				" Please do not close windows while script is running.",
				<<Set Font Size( 8 ),
				<<Font Color( "red" ),
				<<Set width( 400 )
			)
		)
	);

	dlg_gb[Axis Box( 2 )] << Delete;
	dlg_gb[Axis Box( 1 )] << Delete;
	progress_bar_dlgStatus << Set Window Size(450, 225);
);

UpdateProgressBar = Function({status, val},
	prog = val;
	/*For( i = 1, i <= imax, i++,
		prog = (i / imax) * 100;
		dlgStatus[FrameBox( 1 )] << Add Graphics Script( {Fill Color( "blue" ), Rect( 0, 1, prog, 0, 1 )} );
		tb << set text( " Current step " || Char( i ) || " of " || Char( imax ) );
		Wait( 0.1 );
	);*/
	progress_bar_dlgStatus[FrameBox( 1 )] << Add Graphics Script( {Fill Color( "blue" ), Rect( 0, 1, prog, 0, 1 )} );
	Wait( 0.3 );
	tb << set text( Char( status ) );
	Wait( 0.3 );
	//progress_bar_dlgStatus << ShowWindow( 1 );
);

CaptureLog = Function({filter},
	
	save log(user_dir || "\\" || filter || ".txt");
	clear log();
	
);

ClearLogFile = Function({},
	
	clear log();
	
);

ProcessLogFile = function({},
	
	//x = Load Text File( user_dir || "\\" || "filter_Selection.txt" );
	//x = Open( user_dir || "\\" || "filter_Selection.txt" );
	dt = Open(
	user_dir || "\\" || "filter_Selection.txt",  // exchange YOURPATH with your path to the file
		columns( New Column( "Log_Comments", Character, "Nominal" ) ),
		Import Settings(
				End Of Line( Semicolon, Other( ")" ) ),
				End Of Field( CSV( 0 ) ),
				Strip Quotes( 1 ),
				Use Apostrophe as Quotation Mark( 0 ),
				Use Regional Settings( 0 ),
				Scan Whole File( 1 ),
				Treat empty columns as numeric( 0 ),
				CompressNumericColumns( 0 ),
				CompressCharacterColumns( 0 ),
				CompressAllowListCheck( 0 ),
				Labels( 0 ),
				Column Names Start( 1 ),
				Data Starts( 1 ),
				Lines To Read( "All" ),
				Year Rule( "20xx" )
		)
	);
	
	dt << select where(contains(:Log_Comments,"Where") | contains(:Log_Comments,"Add Filter"));
	Data Table( "filter_Selection" ) << Subset(
		Selected Rows( 1 ),
		Selected columns only( 0 ),
		Link to original data table( 0 ),
		Output Table( "Filters_Applied" )
	);
	close(dt, NoSave);
	//create new column with clean data
	Data Table( "Filters_Applied" ) << New column("Filters", Character);
	for each row(
		if (contains(:Log_Comments,"Where") , 
			:Filters  = substr(:Log_Comments,9,-1);
		,//else 
		if (contains(:Log_Comments,"Add Filter") , 
			:Filters  = "Filter Selection:";
			,//else 
			:Filters  = "";
			);
		);
	);
	Data Table( "Filters_Applied" ) << delete column(:Log_Comments);
	
	//Change cell content
	Data Table( "Filters_Applied" ):Filters[1] = "Filter Selection on WS and CR data:";
	for each row(
		if (contains(:Filters,"Filter Selection:") , 
			:Filters  = "Filter Selection on PRF data:";
		,//else 
		//do nothing
		);
		
	);
	
	//color cells
	rmat = Data Table( "Filters_Applied" ) << get rows where(:Filters == "Filter Selection on PRF data:");
	:Filters << Color Cells( "Gray",{1,rmat[1]} );
	
	//add empty row between filters
	RowStyle1 = {:Filters = ""}; 
	RowIndex = rmat[1]-1 ;  　
	Data Table( "Filters_Applied" ) << add Rows(RowStyle1 );
	Data Table( "Filters_Applied" ) << Select Rows(n rows(Data Table( "Filters_Applied" )));
	Data Table( "Filters_Applied" ) << Move Rows(After(RowIndex)); 
	Data Table( "Filters_Applied" ) <<Clear Row States<<Clear Column Selection();

	Data Table( "Filters_Applied" ) << save(user_dir || "\\" || "Filters_Applied.jmp");
	close(Data Table( "Filters_Applied.jmp" ), NoSave);
	//Delete File(user_dir || "\\" || "filter_Selection.txt");
	
);

//tb << Set Selected( 2 );
//New Window( "Example", Button Box( "Press Me", Print( "Pressed." ) ) );

GeneratePPTReport = Function({},
	//create report for ppt slide
	report_table_ppt = Open(user_dir || "\\"|| "Report_Table.jmp");
	//report_table_ppt << New Column("Action Plans", character );
	report_table_ppt << New Column("ECD", character );
	
	
	//FMEA Section
	//report_table_ppt
	row = {
			:Section = "FMEA",
			:Deliverable = "FMEA updated for > 125 RPN",
			:Success_Criteria = "Yes",
			:Actual = "",
			:Action Plans = "",
			:ECD = ""
	};
	report_table_ppt << add Rows(row );
	//ICM PCS Section
	row = {
			:Section = "ICM PCS",
			:Deliverable = "ICM PCS Enabled**",
			:Success_Criteria = "Yes",
			:Actual = "",
			:Action Plans = "",
			:ECD = ""
	};
	report_table_ppt << add Rows(row );
	//column("ECD") << Set Field Width(200);
	column("Section") << Set Display Width(110);
	column("Deliverable") << Set Display Width(210);
	column("Success_Criteria") << Set Display Width(100);
	column("Actual") << Set Display Width(100);
	column("ECD") << Set Display Width(100);
	column("Action Plans") << Set Display Width(200);
	
	ppt_window=New Window("Report For Presentation",
				spacerbox(Size(5,10)),
				vlistbox(
					Text Box( "PCS Model: Set Up (SPC++)" ),
					report_table_ppt << Get As Report << Set Width(500),
					spacerbox(Size(5,5)),
					tb1 = Text Box( "* Exceptions: 1. charts used to calculate data for another chart (e.g. Percent/Percent norm chart) or 2. the chart is a documented part of the RFC.  These must be approved by RPM." ),
					tb2 = Text Box( "** ICM PCS is owned by ATM NPI integrator and is not a gating item for TD transfer." ),
					tb1 << Set Font Size( 8 ) << Set Width( 800 ),
					tb2 << Set Font Size( 8 ) << Set Width( 800 ),
				),
	);
	ppt_window << Save Journal(user_dir || "\\"|| "Report_PPT.jrn");
	ppt_window << Save Presentation(user_dir || "\\"|| "SAM Review Presentation.pptx");
	close(report_table_ppt, NoSave);
	ppt_window << close Window();
);


//Prompt for monitorset entries check in PRF - yes/No
PromptMonitorsetsWindow = Function({},
	print("---------- PromptMonitorsetsWindow Function ----------");
	//Making report table global
	report_table = New Table("Report", 
			New Column("Section", Character), 
			New Column("Deliverable", Character), 
			New Column("Success_Criteria", Character),
			New Column("Actual", Character),
			New Column("Action Plans", character ),
			invisible
	);
	
	//Section: PRF
	Monitorsets_PRF = Open(user_dir || "\\"|| "Monitorsets_from_PRF.jmp", invisible);
	row_count = N Rows(Monitorsets_PRF);
	//close(Monitorsets_PRF, nosave);
	if (row_count > 0,
		PromptMonitorSetListPRF();
		
		,
		row = {
			:Section = "PRF",
			:Deliverable = "Monitor Sets in PRF are correct",
			:Success_Criteria = "Yes",
			:Actual = "No",
			:Action Plans = "No Monitor Sets Added from PRF filter. Make proper selection on PRF Filter or detail the action plan for monitorset additions/deletion to PRF."
		};
		report_table << add Rows(row );
		PromptGoldenWindow();
	);
	
	//close(Monitorsets_PRF, nosave);
	//try(Window( "MonitorSets Selected" ) << close window);
);


PromptMonitorSetListPRF = Function({},
	
	progress_bar_dlgStatus << show window(0);//close window for progress bar
	print("---------- PromptMonitorSetListPRF Function ----------");
	//Monitorsets_PRF = Open(user_dir || "\\"|| "Monitorsets_from_PRF.jmp");
	//Create ReportWindow
			monsets_prompt=New Window("MonitorSets",
				spacerbox(Size(5,10)),
				
				spacerbox(Size(5,10)),
				vlistbox(
					filterpb=panelbox("I verify that the list below includes all monitor sets for the product under review.",
						spacerbox(Size(5,10)),
						hlistbox(
							//filtervb=vlistbox(),
							spacerbox(Size(5,10)),
							//buttonbox("Open PRF", OpenPRFFilter),
							//genrespb=panelbox("Options",
								spacerbox(Size(5,10)),
								buttonbox("Yes", PromptMonitorSetListPRF_Yes),
								spacerbox(Size(5,10)),
								buttonbox("No", PromptMonitorSetListPRF_No),
								spacerbox(Size(5,10)),
								
							//),
							spacerbox(Size(5,10)),
						),
						spacerbox(Size(5,10)),
					),
					
					Text Box( "MonitorSets listed in PRF:" ),
					r1_temp = DataTable("Monitorsets_from_PRF") << Get As Report,
					Rollup_Box = r1_temp[Table Box( 1 )];
					Rollup_Box << Set Column Borders( 1 ) << Set Row Borders( 1 ) << Set Scrollable( 0, 0 );
					
					
					spacerbox(Size(5,10)),
				),
			);
			
			
			//close(Monitorsets_PRF, NoSave);
			
	
);

PromptMonitorSetListPRF_Yes = Function({},
	try(Window( "MonitorSets" ) << close window);
	if (N Rows(Data Table("Monitorsets_from_PRF") ) > 0,
		row = {
			:Section = "PRF",
			:Deliverable = "Monitor Sets in PRF are correct",
			:Success_Criteria = "Yes",
			:Actual = "Yes",
			:Action Plans = ""
		};
		,
		row = {
			:Section = "PRF",
			:Deliverable = "Monitor Sets in PRF are correct",
			:Success_Criteria = "Yes",
			:Actual = "No",
			:Action Plans = "Make selection on PRF Filter or detail the action plan for monitorset additions to PRF."
		};
	);
	
	report_table << add Rows(row );
	PromptGoldenWindow();
	
	
);

PromptMonitorSetListPRF_No = Function({},
	try(Window( "MonitorSets" ) << close window);
	if (N Rows(Data Table("Monitorsets_from_PRF")) > 0,
		row = {
			:Section = "PRF",
			:Deliverable = "Monitor Sets in PRF are correct",
			:Success_Criteria = "Yes",
			:Actual = "No",
			:Action Plans = "Make proper selection on PRF Filter or detail the action plan for monitorset additions/deletion to PRF."
		};
		,
		row = {
			:Section = "PRF",
			:Deliverable = "Monitor Sets in PRF are correct",
			:Success_Criteria = "Yes",
			:Actual = "No",
			:Action Plans = "Make proper selection on PRF Filter or detail the action plan for monitorset additions/deletion to PRF."
		};
	);
	
	report_table << add Rows(row );
	PromptGoldenWindow();
	
);



//Prompt for Charts updated in Golden - yes/No
PromptGoldenWindow = Function({},
	print("---------- PromptGoldenWindow Function ----------");
	
	//Section: Golden
	Charts_Golden = Open(user_dir || "\\"|| "Charts\Summarized_Mapped_Golden.jmp", invisible);
	
	PromptGolden();
	
);


PromptGoldenWindow = Function({},
	print("---------- PromptGoldenWindow Function ----------");
	
	//Section: Golden
	charts_golden = Open(user_dir || "\\"|| "Charts\Summarized_Mapped_Golden.jmp", invisible);
	
	//Making report table global
	report_table_temp = New Table("Report_temp", 
			New Column("Section", Character), 
			New Column("Deliverable", Character), 
			New Column("Success_Criteria", Character),
			New Column("Actual", Character),
			New Column("Action Plans", character ),
			invisible
	);
	
	//progress_bar_dlgStatus << show window(0);//close window for progress bar
	//print("---------- PromptMonitorSetListPRF Function ----------");
	//Monitorsets_PRF = Open(user_dir || "\\"|| "Monitorsets_from_PRF.jmp");
	//Create ReportWindow
			golden_prompt=New Window("Catalyst PCS Admin2 Golden Default Values",
				spacerbox(Size(5,10)),
				
				spacerbox(Size(5,10)),
				vlistbox(
					filterpb=panelbox("I verify that in Catalyst PCS Admin2 Golden, all of the chart default values are updated appropriately.",
						spacerbox(Size(5,10)),
						hlistbox(
							//filtervb=vlistbox(),
							spacerbox(Size(5,10)),
							//buttonbox("Open PRF", OpenPRFFilter),
							//genrespb=panelbox("Options",
								spacerbox(Size(5,10)),
								buttonbox("Yes", PromptGolden_Yes),
								spacerbox(Size(5,10)),
								buttonbox("No", PromptGolden_No),
								spacerbox(Size(5,10)),
								
							//),
							spacerbox(Size(5,10)),
						),
						spacerbox(Size(5,10)),
					),
					
					Text Box( "Charts listed in Catalyst PCS Admin2 Golden:" ),
					tb_note_golden = Text Box( "(List of charts includes Monitorsets from CR and PRF)" ),
					tb_note_golden << set width(700);
					r1_temp = charts_golden << Get As Report,
					Rollup_Box = r1_temp[Table Box( 1 )];
					Rollup_Box << Set Scrollable(20,0);
					Rollup_Box << Set Column Borders( 1 ) << Set Row Borders( 1 ) << Set Scrollable( 0, 0 );
					
					
					spacerbox(Size(5,10)),
				),
			);
			
			
			//close(Monitorsets_PRF, NoSave);
			
	
);

PromptGolden_Yes = Function({},
	report_table_temp = Data Table("Report_temp"); 
	try(Window( "Catalyst PCS Admin2 Golden Default Values" ) << close window);
	row = {
			:Section = "Catalyst",
			:Deliverable = "PCS Admin2 default values updated",
			:Success_Criteria = "Yes",
			:Actual = "Yes",
			:Action Plans = ""
	};
	
	report_table_temp << add Rows(row );
	GenerateJournalReport();
	UpdateProgressBar("Generating Final Report...", 100);
	progress_bar_dlgStatus << closewindow();//close window for progress bar
	EndOfScript();
	print("--------------------Script Completed--------------------");
	
);

PromptGolden_No = Function({},
	report_table_temp = Data Table("Report_temp"); 
	try(Window( "Catalyst PCS Admin2 Golden Default Values" ) << close window);
	row = {
			:Section = "Catalyst",
			:Deliverable = "PCS Admin2 default values updated",
			:Success_Criteria = "Yes",
			:Actual = "No",
			:Action Plans = "Update Catalyst PCS Admin2 Golden default values."
	};
	
	report_table_temp << add Rows(row );
	GenerateJournalReport();
	UpdateProgressBar("Generating Final Report...", 100);
	progress_bar_dlgStatus << closewindow();//close window for progress bar
	EndOfScript();
	print("--------------------Script Completed--------------------");
);


//PCS Health
CatalystFavoriteFunction=Function({},
		//Log Line
		Print("Catalyst_Parameter_Ranking_Script:  CatalystFavoriteFunction starting.");
		Print("Catalyst_Parameter_Ranking_Script:  CatalystFavoriteFunction:  Determine user input for file name starting.");
		
		//Ask user what name to use when saving favorite file
		//Will be saved to user Catalyst Favorites directory by using the $DOCUMENTS which point to the individual users' Documents folder
		//By default, save as SPCRankFav.catalyst
		//Must have .catalyst extension to work as a Favorite in Catalyst (script ensures this is the case)
	
		//Set default path base on individual users Documents folder
		favoritepath=Convert File Path("$DOCUMENTS", windows)||"Intel\Catalyst\My Favorites\PROD\";
		
		//Set default file name
		START_DATE = "03Apr2019_19_19_34";
		CurrTime = As Date(Today()); 
		CurrTimeChar = Char(CurrTime); 
		Left = Words(CurrTimeChar,":"); 
		Date = Left[1]; 
		DesDate = Date || "_" || Char(Hour(CurrTime)) || "_" || Char(Minute(CurrTime)) || "_"|| Char(Second(CurrTime)); 
		START_DATE = DesDate; 


		favoritefile="SAM_Review_PCS_Health_" || START_DATE ||".catalyst";
		/*
		//Create Window asking for user input on file name and prompting with the default file name
		spcfavnamewindow=New Window("Name for SPC++ Catalyst Favorite",
			<<modal, 
			vlistbox(
				hlistbox(
					textbox("Enter name for Catalyst Favorite:    " ),
					favname=texteditbox(favoritefile,
						Set Script(favoritefile = favname << Get Text() )
					)
				),
				spacerbox(Size(5,10)),
				hlistbox(
					buttonbox("OK"),
					buttonbox("Cancel"),
				)
			);
		);

		//Exit Function if "Cancel" button is chosen in user window
		If(
			//if Cancel button is selected
			spcfavnamewindow=={Button( -1 )}, 
			//then end script and show a log line
			Print("Catalyst_Parameter_Ranking_Script:  CatalystFavoriteFunction:  Cancel chosen, exiting function.");
			Print("Catalyst_Parameter_Ranking_Script:  CatalystFavoriteFunction completed.");
			Return();
			Wait( 0.1 );
		);
		*/
		//If "OK" button is selected, continue rest of function
		//Verify the file name ends in ".catalyst" and if not concatenate the ".catalyst" to the end of the file name
		If(
			//if (file name does not end in ".catalyst")
			Right(favoritefile, 9) != ".catalyst", 
			//then (concatenate ".catalyst" to end of file name)
			favoritefile=favoritefile||".catalyst"
		);
		
		//Log Line
		Print("Catalyst_Parameter_Ranking_Script:  CatalystFavoriteFunction:  Determine user input for file name completed.");
		Print("Catalyst_Parameter_Ranking_Script:  CatalystFavoriteFunction:  Format list of monitor set and measurement sets starting.");
		
		
		//Default variables as text strings
		catfavmonsettext = "";
		catfavmeassettext = "";
		areaGrouping = "";
		moduleName = "";
		functionalArea = "";
		marketCodeName = "";
		dieCodeName = "";
		packagetech = "";
		formFactor = "";
		prodgroup3 = "";
		ParameterClassification = "";
		controlLimitType = "";
		wwReportRan = "";
		
		
		
		//open all tables required to create favorite
		data_subset_file = Open(user_dir || "\\"|| "data_subset.jmp", invisible);
		charts_golden = Open(user_dir || "\\"|| "Charts\Summarized_Mapped_Golden.jmp", invisible);
		
		//variables to hold dictionaries
		areaGrouping = "";
		mktCodeName = "";
		dieCodeName = "";
		packagetech = "";
		formFactor = "";
		prodgroup3 = "";
		moduleName = "";
		functionalArea = "";
		parameterClassification = "";
		controlLimitType = "";
		wwReportRan = "";
		
		
		//Create summary Table for each column and get dictionary 
		//Area Grouping
		areaGroupingSummary = data_subset_file << Summary(
			Group( :area_grouping ),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 )
		);
		areaGroupingSummary << Delete column("N Rows");
		//Get Associative Array Keys
		areaGrouping = Associative Array(areaGroupingSummary:area_grouping<<Get Values)<<Get Keys;
		close(areaGroupingSummary, nosave);
		//Loop through list of keys and concatenate to text string separating by commmas
		areaGroupingtext = "";
		For(loop=1, loop<=NItems(areaGrouping), loop++,
			areaGroupingtext=areaGroupingtext||areaGrouping[loop]||",";
		);
		
		//Market Code Name
		mktCodeNameSummary = data_subset_file << Summary(
			Group( :mkt_code ),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 )
		);
		mktCodeNameSummary << Delete column("N Rows");
		//Get Associative Array Keys
		mktCodeName = Associative Array(mktCodeNameSummary:mkt_code<<Get Values)<<Get Keys;
		close(mktCodeNameSummary, nosave);
		//Loop through list of keys and concatenate to text string separating by commmas
		mktCodeNametext = "";
		For(loop=1, loop<=NItems(mktCodeName), loop++,
			mktCodeNametext=mktCodeNametext||mktCodeName[loop]||",";
		);
		
		
		//Die Code Name
		mmCodeNameSummary = data_subset_file << Summary(
			Group( :mm_code ),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 )
		);
		mmCodeNameSummary << Delete column("N Rows");
		//Get Associative Array Keys
		dieCodeName = Associative Array(mmCodeNameSummary:mm_code<<Get Values)<<Get Keys;
		close(mmCodeNameSummary, nosave);
		//Loop through list of keys and concatenate to text string separating by commmas
		dieCodeNametext = "";
		For(loop=1, loop<=NItems(dieCodeName), loop++,
			dieCodeNametext=dieCodeNametext||dieCodeName[loop]||",";
		);
		
		
		//Package Technology
		packageTechSummary = data_subset_file << Summary(
			Group( :package_tech ),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 )
		);
		packageTechSummary << Delete column("N Rows");
		//Get Associative Array Keys
		packagetech = Associative Array(packageTechSummary:package_tech<<Get Values)<<Get Keys;
		close(packageTechSummary, nosave);
		//Loop through list of keys and concatenate to text string separating by commmas
		packagetechtext = "";
		For(loop=1, loop<=NItems(packagetech), loop++,
			packagetechtext=packagetechtext||packagetech[loop]||",";
		);
		
		
		//Form Factor
		formFactorSummary = data_subset_file << Summary(
			Group( :form_factor ),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 )
		);
		formFactorSummary << Delete column("N Rows");
		//Get Associative Array Keys
		formFactor = Associative Array(formFactorSummary:form_factor<<Get Values)<<Get Keys;
		close(formFactorSummary, nosave);
		//Loop through list of keys and concatenate to text string separating by commmas
		formFactortext = "";
		For(loop=1, loop<=NItems(formFactor), loop++,
			formFactortext=formFactortext||formFactor[loop]||",";
		);
		
		
		//Prodgroup3
		prodgroup3Summary = data_subset_file << Summary(
			Group( :prodgroup3 ),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 )
		);
		prodgroup3Summary << Delete column("N Rows");
		//Get Associative Array Keys
		prodgroup3 = Associative Array(prodgroup3Summary:prodgroup3<<Get Values)<<Get Keys;
		close(prodgroup3Summary, nosave);
		//Loop through list of keys and concatenate to text string separating by commmas
		prodgroup3text = "";
		For(loop=1, loop<=NItems(prodgroup3), loop++,
			prodgroup3text=prodgroup3text||prodgroup3[loop]||",";
		);
		
		//close dtaa subset file
		close(data_subset_file, nosave);
		
		
		
		//Module Name
		modulenameSummary = charts_golden << Summary(
			Group( :Module ),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 )
		);
		modulenameSummary << Delete column("N Rows");
		//Get Associative Array Keys
		moduleName = Associative Array(modulenameSummary:Module<<Get Values)<<Get Keys;
		close(modulenameSummary, nosave);
		//Loop through list of keys and concatenate to text string separating by commmas
		moduleNametext = "";
		For(loop=1, loop<=NItems(moduleName), loop++,
			moduleNametext=moduleNametext||moduleName[loop]||",";
		);
		
		
		//Functional Area
		functionalAreaSummary = charts_golden << Summary(
			Group( :Area ),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 )
		);
		functionalAreaSummary << Delete column("N Rows");
		//Get Associative Array Keys
		functionalArea = Associative Array(functionalAreaSummary:Area<<Get Values)<<Get Keys;
		close(functionalAreaSummary, nosave);
		//Loop through list of keys and concatenate to text string separating by commmas
		functionalAreatext = "";
		For(loop=1, loop<=NItems(functionalArea), loop++,
			functionalAreatext=functionalAreatext||functionalArea[loop]||",";
		);
		
		
		
		//Parameter Classification
		parameterClassificationSummary = charts_golden << Summary(
			Group( :Parameter Classification ),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 )
		);
		parameterClassificationSummary << Delete column("N Rows");
		//Get Associative Array Keys
		parameterClassification = Associative Array(parameterClassificationSummary:Parameter Classification<<Get Values)<<Get Keys;
		close(parameterClassificationSummary, nosave);
		//Loop through list of keys and concatenate to text string separating by commmas
		parameterClassificationtext = "";
		For(loop=1, loop<=NItems(parameterClassification), loop++,
			parameterClassificationtext=parameterClassificationtext||parameterClassification[loop]||",";
		);
		
		
		//Control Limit Type
		controlLimitTypeSummary = charts_golden << Summary(
			Group( :control_limit_type ),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 )
		);
		controlLimitTypeSummary << Delete column("N Rows");
		//Get Associative Array Keys
		controlLimitType = Associative Array(controlLimitTypeSummary:control_limit_type<<Get Values)<<Get Keys;
		close(controlLimitTypeSummary, nosave);
		//Loop through list of keys and concatenate to text string separating by commmas
		controlLimitTypetext = "";
		For(loop=1, loop<=NItems(controlLimitType), loop++,
			controlLimitTypetext=controlLimitTypetext||controlLimitType[loop]||",";
		);
		
		//close Golden charts
		close(charts_golden, nosave);
		
		//wwReportRan
		wwReportRan = {"202125"};
		//Loop through list of keys and concatenate to text string separating by commmas
		wwReportRantext = "";
		For(loop=1, loop<=NItems(wwReportRan), loop++,
			wwReportRantext=wwReportRantext||wwReportRan[loop]||",";
		);
		
		//logger
		//variables to hold dictionaries
		print(areaGroupingtext);
		print(mktCodeNametext);
		print(dieCodeNametext);
		print(packagetechtext);
		print(formFactortext);
		print(prodgroup3text);
		print(moduleNametext);
		print(functionalAreatext);
		print(parameterClassificationtext);
		print(controlLimitTypetext);
		print(wwReportRantext);
		
		
		//Log Line
		Print("Catalyst_Parameter_Ranking_Script:  CatalystFavoriteFunction:  Format list of monitor set and measurement sets completed.");
		Print("Catalyst_Parameter_Ranking_Script:  CatalystFavoriteFunction:  Create and save Catalyst text file starting.");
		
		areaGroupingXML = "";
		moduleNameXML = "";
		functionalAreaXML = "";
		marketCodeNameXML = "";
		dieCodeNameXML = "";
		packagetechXML = "";
		formFactorXML = "";
		prodgroup3XML = "";
		ParameterClassificationXML = "";
		ControlLimitTypeXML = "";
		
		
		//Get WW information
		_year = year(today());
		_ww = week of year(today());
		year_ww =  Char(_year) || Char(_ww);
		
		//-------------------------------Area Grouping-------------------------------
		areaGroupingXML="<FilterSection ColumnName=\!"AreaGrouping\!">
        <SearchText />
        <Order>0</Order>
        <FilterXml>
          <Filter>
            <Group Operation=\!"In\!" ValueType=\!"System.Object\!" Column=\!"AreaGrouping\!">";
            
		for(loop = 1, loop<= N Items(areaGrouping), loop++,
			val = areaGrouping[loop];
			areaGroupingXML = areaGroupingXML || "
				<Filter Operation=\!"Equal\!" Column=\!"AreaGrouping\!" ValueType=\!"System.Object\!">
					<Value>"||val||"</Value>
			    </Filter>
			  ";
		);
		areaGroupingXML = areaGroupingXML || 
	"</Group>
				</Filter>
		</FilterXml>
  </FilterSection>";
	print(areaGroupingXML);
		
		//-------------------------------Module Name-------------------------------
		moduleNameXML="<FilterSection ColumnName=\!"ModuleName\!">
        <SearchText />
        <Order>1</Order>
        <FilterXml>
          <Filter>
            <Group Operation=\!"In\!" ValueType=\!"System.Object\!" Column=\!"ModuleName\!">";
            
		for(loop = 1, loop<= N Items(moduleName), loop++,
			val = moduleName[loop];
			moduleNameXML = moduleNameXML || "
				<Filter Operation=\!"Equal\!" Column=\!"ModuleName\!" ValueType=\!"System.Object\!">
					<Value>"||val||"</Value>
			    </Filter>
			  ";
		);
		moduleNameXML = moduleNameXML || 
	"</Group>
				</Filter>
		</FilterXml>
  </FilterSection>";
	print(moduleNameXML);
		
		
		//-------------------------------Functional Area-------------------------------
		functionalAreaXML="<FilterSection ColumnName=\!"FunctionalArea\!">
        <SearchText />
        <Order>2</Order>
        <FilterXml>
          <Filter>
            <Group Operation=\!"In\!" ValueType=\!"System.Object\!" Column=\!"FunctionalArea\!">";
            
		for(loop = 1, loop<= N Items(functionalArea), loop++,
			val = functionalArea[loop];
			functionalAreaXML = functionalAreaXML || "
				<Filter Operation=\!"Equal\!" Column=\!"FunctionalArea\!" ValueType=\!"System.Object\!">
					<Value>"||val||"</Value>
			    </Filter>
			  ";
		);
		functionalAreaXML = functionalAreaXML || 
	"</Group>
				</Filter>
		</FilterXml>
  </FilterSection>";
	print(functionalAreaXML);
		
		
		//-------------------------------Market Code Name-------------------------------
		marketCodeNameXML="<FilterSection ColumnName=\!"MarketCodeName\!">
        <SearchText />
        <Order>3</Order>
        <FilterXml>
          <Filter>
            <Group Operation=\!"In\!" ValueType=\!"System.Object\!" Column=\!"MarketCodeName\!">";
            
		for(loop = 1, loop<= N Items(mktCodeName), loop++,
			val = mktCodeName[loop];
			marketCodeNameXML = marketCodeNameXML || "
				<Filter Operation=\!"Equal\!" Column=\!"MarketCodeName\!" ValueType=\!"System.Object\!">
					<Value>"||val||"</Value>
			    </Filter>
			  ";
		);
		marketCodeNameXML = marketCodeNameXML || 
	"</Group>
				</Filter>
		</FilterXml>
  </FilterSection>";
	print(marketCodeNameXML);
		
		
		//-------------------------------Die Code Name-------------------------------
		dieCodeNameXML="<FilterSection ColumnName=\!"DieCodeName\!">
        <SearchText />
        <Order>4</Order>
        <FilterXml>
          <Filter>
            <Group Operation=\!"In\!" ValueType=\!"System.Object\!" Column=\!"DieCodeName\!">";
            
		for(loop = 1, loop<= N Items(dieCodeName), loop++,
			val = dieCodeName[loop];
			dieCodeNameXML = dieCodeNameXML || "
				<Filter Operation=\!"Equal\!" Column=\!"DieCodeName\!" ValueType=\!"System.Object\!">
					<Value>"||val||"</Value>
			    </Filter>
			  ";
		);
		dieCodeNameXML = dieCodeNameXML || 
	"</Group>
				</Filter>
		</FilterXml>
  </FilterSection>";
	print(dieCodeNameXML);
	
	
		//-------------------------------Package Technology-------------------------------
		packagetechXML="<FilterSection ColumnName=\!"PackageTech\!">
        <SearchText />
        <Order>5</Order>
        <FilterXml>
          <Filter>
            <Group Operation=\!"In\!" ValueType=\!"System.Object\!" Column=\!"PackageTech\!">";
        //need to add spaces after packageTech name    
		for(loop = 1, loop<= N Items(packagetech), loop++,
			val = packagetech[loop];
			//Form Factor string lenth is set to 15 in Catalyst. Therefore adding spaces to string to match the length.
			/*len_val = Length(val);
			spaces = "";
			for (i = 1,i <= (15-len_val), i++,
				spaces = spaces || " ";
			);
			val = val || spaces;*/
			packagetechXML = packagetechXML || "
				<Filter Operation=\!"Equal\!" Column=\!"PackageTech\!" ValueType=\!"System.Object\!">
					<Value>"||val||"</Value>
			    </Filter>
			  ";
		);
		packagetechXML = packagetechXML || 
	"</Group>
				</Filter>
		</FilterXml>
  </FilterSection>";
	print(packagetechXML);
	
	
	
		//-------------------------------Form Factor-------------------------------
		formFactorXML="<FilterSection ColumnName=\!"FormFactor\!">
        <SearchText />
        <Order>6</Order>
        <FilterXml>
          <Filter>
            <Group Operation=\!"In\!" ValueType=\!"System.Object\!" Column=\!"FormFactor\!">";
        //need to add spaces after formFactor name     
		for(loop = 1, loop<= N Items(formFactor), loop++,
			val = formFactor[loop];
			//Form Factor string lenth is set to 10 in Catalyst. Therefore adding spaces to string to match the length.
			/*len_val = Length(val);
			spaces = "";
			for (i = 1,i <= (10-len_val), i++,
				spaces = spaces || " ";
			);
			val = val || spaces;*/
			formFactorXML = formFactorXML || "
				<Filter Operation=\!"Equal\!" Column=\!"FormFactor\!" ValueType=\!"System.Object\!">
					<Value>"||val|| "</Value>
			    </Filter>
			  ";
		);
		formFactorXML = formFactorXML || 
	"</Group>
				</Filter>
		</FilterXml>
  </FilterSection>";
	print(formFactorXML);
	
		//-------------------------------prodgroup3-------------------------------
		prodgroup3XML="<FilterSection ColumnName=\!"ProdGroup3\!">
        <SearchText />
        <Order>7</Order>
        <FilterXml>
          <Filter>
            <Group Operation=\!"In\!" ValueType=\!"System.Object\!" Column=\!"ProdGroup3\!">";
            
		for(loop = 1, loop<= N Items(prodgroup3), loop++,
			val = prodgroup3[loop];
			prodgroup3XML = prodgroup3XML || "
				<Filter Operation=\!"Equal\!" Column=\!"ProdGroup3\!" ValueType=\!"System.Object\!">
					<Value>"||val||"</Value>
			    </Filter>
			  ";
		);
		prodgroup3XML = prodgroup3XML || 
	"</Group>
				</Filter>
		</FilterXml>
  </FilterSection>";
	print(prodgroup3XML);
	
		//-------------------------------ParameterClassification-------------------------------
		ParameterClassificationXML="<FilterSection ColumnName=\!"ParameterClassification\!">
        <SearchText />
        <Order>8</Order>
        <FilterXml>
          <Filter>
            <Group Operation=\!"In\!" ValueType=\!"System.Object\!" Column=\!"ParameterClassification\!">";
            
		for(loop = 1, loop<= N Items(parameterClassification), loop++,
			val = parameterClassification[loop];
			ParameterClassificationXML = ParameterClassificationXML || "
				<Filter Operation=\!"Equal\!" Column=\!"ParameterClassification\!" ValueType=\!"System.Object\!">
					<Value>"||val||"</Value>
			    </Filter>
			  ";
		);
		ParameterClassificationXML = ParameterClassificationXML || 
	"</Group>
				</Filter>
		</FilterXml>
  </FilterSection>";
	print(ParameterClassificationXML);
	
	
		//-------------------------------ControlLimitType-------------------------------
		ControlLimitTypeXML="<FilterSection ColumnName=\!"ControlLimitType\!">
        <SearchText />
        <Order>9</Order>
        <FilterXml>
          <Filter>
            <Group Operation=\!"In\!" ValueType=\!"System.Object\!" Column=\!"ControlLimitType\!">";
            
		for(loop = 1, loop<= N Items(ControlLimitType), loop++,
			val = ControlLimitType[loop];
			ControlLimitTypeXML = ControlLimitTypeXML || "
				<Filter Operation=\!"Equal\!" Column=\!"ControlLimitType\!" ValueType=\!"System.Object\!">
					<Value>"||val||"</Value>
			    </Filter>
			  ";
		);
		ControlLimitTypeXML = ControlLimitTypeXML || 
	"</Group>
				</Filter>
		</FilterXml>
  </FilterSection>";
	print(ControlLimitTypeXML);
	
	
			//-------------------------------ParameterClassfication, ControlLimitType, WWInfo-------------------------------
			xml_1 = areaGroupingXML || moduleNameXML || functionalAreaXML || marketCodeNameXML || dieCodeNameXML || packagetechXML || formFactorXML || prodgroup3XML || ParameterClassificationXML || ControlLimitTypeXML;
			favoritetext = "<?xml version=\!"1.0\!" encoding=\!"utf-16\!"?>
			<ViewState xmlns:xsd=\!"http://www.w3.org/2001/XMLSchema\!" xmlns:xsi=\!"http://www.w3.org/2001/XMLSchema-instance\!">
			  <Module>YEA.Modules.PcsHealthReviewMod</Module>
			  <ViewStateType>YEA.Modules.PcsHealthReviewMod.Models.ViewState</ViewStateType>
			  <DefaultLoad>false</DefaultLoad>
			  <Tab>Grid</Tab>
			  <PreFilter>
				<ConditioningColumns />
				<GroupingColumns />
				<SortingColumns /><FilterSections>"|| xml_1 || 
				
				
				"<FilterSection ColumnName=\!"WwReportRan\!">
					<SearchText />
					<Order>10</Order>
					<FilterXml>
					  <Filter>
						<Filter Operation=\!"Equal\!" Column=\!"WwReportRan\!" ValueType=\!"System.String\!">
						  <Value>" ||year_ww|| "</Value>
						</Filter>
					  </Filter>
					</FilterXml>
				  </FilterSection>
				</FilterSections>
			  </PreFilter>
			</ViewState>";

			//</FilterSection> removed from 3rd last line
		
		
		
		
		/*
		//Write catalyst text file - JSL writes it just as it is seen, \! is the escape character
		favoritetext ="<?xml version=\!"1.0\!" encoding=\!"utf-16\!"?>
		<ViewState xmlns:xsd=\!"http://www.w3.org/2001/XMLSchema\!" xmlns:xsi=\!"http://www.w3.org/2001/XMLSchema-instance\!">
		  <Module>YEA.Modules.PcsHealthReviewMod</Module>
		  <ViewStateType>YEA.Modules.PcsHealthReviewMod.Models.ViewState</ViewStateType>
		  <DefaultLoad>false</DefaultLoad>
		  <PreFilterXML>
			<Filter>
			  <Group Operation=\!"And\!">
			   <Filter Operation=\!"Equal\!" Column=\!"AreaGrouping\!" ValueType=\!"System.String\!">
				  <Value>"||areaGroupingtext||"</Value></Filter>
				<Filter Operation=\!"Equal\!" Column=\!"ModuleName\!" ValueType=\!"System.Object\!">
				  <Value>"||moduleNametext||"</Value></Filter>
                <Filter Operation=\!"Equal\!" Column=\!"FunctionalArea\!" ValueType=\!"System.Object\!">
				  <Value>"||functionalAreatext||"</Value></Filter>
                <Filter Operation=\!"Equal\!" Column=\!"MarketCodeName\!" ValueType=\!"System.Object\!">
				  <Value>"||mktCodeNametext||"</Value></Filter>
                <Filter Operation=\!"Equal\!" Column=\!"DieCodeName\!" ValueType=\!"System.Object\!">
				  <Value>"||dieCodeNametext||"</Value></Filter>
                <Filter Operation=\!"Equal\!" Column=\!"PackageTech\!" ValueType=\!"System.Object\!">
				  <Value>"||packagetechtext||"</Value></Filter>
                <Filter Operation=\!"Equal\!" Column=\!"FormFactor\!" ValueType=\!"System.Object\!">
				  <Value>"||formFactortext||"</Value></Filter>
                <Filter Operation=\!"Equal\!" Column=\!"ProdGroup3\!" ValueType=\!"System.Object\!">
				  <Value>"||prodgroup3text||"</Value></Filter>
                <Filter Operation=\!"Equal\!" Column=\!"ParameterClassification\!" ValueType=\!"System.Object\!">
				  <Value>"||parameterClassificationtext||"</Value></Filter>
                <Filter Operation=\!"Equal\!" Column=\!"ControlLimitType\!" ValueType=\!"System.Object\!">
				  <Value>"||controlLimitTypetext||"</Value></Filter>
				<Filter Operation=\!"Equal\!" Column=\!"WwReportRan\!" ValueType=\!"System.String\!">
				  <Value>wwReportRantext</Value>
				</Filter>
			  </Group>
			</Filter>
		  </PreFilterXML>
		  <Tab>PcsHealthSAMReview</Tab>
		  <DrillDownFilter>
			<Filter>
			</Filter>
		  </DrillDownFilter>
		</ViewState>";
		*/
		
		
		//Save Catalyst favorite file
		try(Save Text File(favoritepath||favoritefile, favoritetext));
		favoritefileName = favoritefile;
		//Log Line
		Print("Catalyst_Parameter_Ranking_Script:  CatalystFavoriteFunction:  Create and save Catalyst text file completed.");
				
		
		/*
		//Create Window alerting user to completion of saved favorite file
		spcfavdonewindow=New Window( "PCS Health (Catalyst) Favorite Created",
			<<modal, 
			vlistbox(
				textbox( "Catalyst Favorite: "|| favoritefile ||" has been saved to "|| favoritepath,
					<<Set Wrap(1000),
					<<Set Font("Intel Clear"),
					<<Font Color("Blue"),
					<<Set Font Size(12),	
				),
				spacerbox(Size(5,10)),
				Text box ("You may need to REFRESH your favorite list in Catalyst to see the new entry.", 
					<<Set Wrap(1000),
					<<Set Font("Intel Clear"),
					<<Set Font Size(11),
				),
			)
		);
		*/
		//Log Line
		Print("Catalyst_Parameter_Ranking_Script:  CatalystFavoriteFunction completed.");
		
); //End of CatalystFavoriteFunction


make_ww_cols = function({},
	
		
	_year = year(today());
	_ww = week of year(today());
	year_ww =  Char(_year) || Char(_ww);
	/*
	year_ww = eval list({
		char(_year) || "_ "|| char(_ww - 12),
		char(_year) || "_ "|| char(_ww - 11),
		char(_year) || "_ "|| char(_ww - 10),
		char(_year) || "_ "|| char(_ww - 9),
		char(_year) || "_ "|| char(_ww - 8),
		char(_year) || "_ "|| char(_ww - 7),
		char(_year) || "_ "|| char(_ww - 6),
		char(_year) || "_ "|| char(_ww - 5),
		char(_year) || "_ "|| char(_ww - 4),
		char(_year) || "_ "|| char(_ww - 3),
		char(_year) || "_ "|| char(_ww - 2),
		char(_year) || "_ "|| char(_ww - 1)
	});
	*/

); // end make_ww_cols function



CatalystFavoriteFunctionSPCCharts=Function({},
	
	//Log Line
		Print("SPC++ Charts: Catalyst_Parameter_Ranking_Script:  CatalystFavoriteFunction starting.");
		
		//Set default path base on individual users Documents folder
		favoritepath=Convert File Path("$DOCUMENTS", windows)||"Intel\Catalyst\My Favorites\PROD\";
		
		//Set default file name
		START_DATE = "03Apr2019_19_19_34";
		CurrTime = As Date(Today()); 
		CurrTimeChar = Char(CurrTime); 
		Left = Words(CurrTimeChar,":"); 
		Date = Left[1]; 
		DesDate = Date || "_" || Char(Hour(CurrTime)) || "_" || Char(Minute(CurrTime)) || "_"|| Char(Second(CurrTime)); 
		START_DATE = DesDate; 


		favoritefile="SAM_Review_SPC++_Charts_" || START_DATE ||".catalyst";
		
		//If "OK" button is selected, continue rest of function
		//Verify the file name ends in ".catalyst" and if not concatenate the ".catalyst" to the end of the file name
		If(
			//if (file name does not end in ".catalyst")
			Right(favoritefile, 9) != ".catalyst", 
			//then (concatenate ".catalyst" to end of file name)
			favoritefile=favoritefile||".catalyst"
		);
		
		
		
		//Default variables as text strings
		catfavmonsettext = "";
		catfavmeassettext = "";
		areaGrouping = "";
		moduleName = "";
		functionalArea = "";
		marketCodeName = "";
		dieCodeName = "";
		packagetech = "";
		formFactor = "";
		prodgroup3 = "";
		ParameterClassification = "";
		controlLimitType = "";
		wwReportRan = "";
		
		
		
		//open all tables required to create favorite
		data_subset_file = Open(user_dir || "\\"|| "data_subset.jmp", invisible);
		charts_golden = Open(user_dir || "\\"|| "Charts\Summarized_Mapped_Golden.jmp", invisible);
		facility_file = Open(user_dir || "\\"|| "Facility.jmp", invisible);
		//monsets_prf = Open(user_dir || "\\"|| "Monitorsets_from_PRF.jmp", invisible);
		
		//variables to hold dictionaries
		factory = "";
		areaGrouping = "";
		mktCodeName = "";
		dieCodeName = "";
		packagetech = "";
		formFactor = "";
		prodgroup3 = "";
		moduleName = "";
		functionalArea = "";
		parameterClassification = "";
		controlLimitType = "";
		wwReportRan = "";
		
		
		//Create summary Table for each column and get dictionary 
		//Facility
		facilitySummary = facility_file << Summary(
			Group( :facility ),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 )
		);
		facilitySummary << Delete column("N Rows");
		//Get Associative Array Keys
		facilitylist = Associative Array(facilitySummary:facility<<Get Values)<<Get Keys;
		close(facilitySummary, nosave);
		//Loop through list of keys and concatenate to text string separating by commmas
		facilitytext = "";
		For(loop=1, loop<=NItems(facilitylist), loop++,
			facilitytext = facilitytext||facilitylist[loop]||",";
		);
		close(facility_file, nosave);
		
		//Area Grouping
		areaGroupingSummary = data_subset_file << Summary(
			Group( :area_grouping ),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 )
		);
		areaGroupingSummary << Delete column("N Rows");
		//Get Associative Array Keys
		areaGrouping = Associative Array(areaGroupingSummary:area_grouping<<Get Values)<<Get Keys;
		close(areaGroupingSummary, nosave);
		//Loop through list of keys and concatenate to text string separating by commmas
		areaGroupingtext = "";
		For(loop=1, loop<=NItems(areaGrouping), loop++,
			areaGroupingtext=areaGroupingtext||areaGrouping[loop]||",";
		);
		
		//Market Code Name
		mktCodeNameSummary = data_subset_file << Summary(
			Group( :mkt_code ),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 )
		);
		mktCodeNameSummary << Delete column("N Rows");
		//Get Associative Array Keys
		mktCodeName = Associative Array(mktCodeNameSummary:mkt_code<<Get Values)<<Get Keys;
		close(mktCodeNameSummary, nosave);
		//Loop through list of keys and concatenate to text string separating by commmas
		mktCodeNametext = "";
		For(loop=1, loop<=NItems(mktCodeName), loop++,
			mktCodeNametext=mktCodeNametext||mktCodeName[loop]||",";
		);
		
		
		//Die Code Name
		mmCodeNameSummary = data_subset_file << Summary(
			Group( :mm_code ),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 )
		);
		mmCodeNameSummary << Delete column("N Rows");
		//Get Associative Array Keys
		dieCodeName = Associative Array(mmCodeNameSummary:mm_code<<Get Values)<<Get Keys;
		close(mmCodeNameSummary, nosave);
		//Loop through list of keys and concatenate to text string separating by commmas
		dieCodeNametext = "";
		For(loop=1, loop<=NItems(dieCodeName), loop++,
			dieCodeNametext=dieCodeNametext||dieCodeName[loop]||",";
		);
		
		
		//Package Technology
		packageTechSummary = data_subset_file << Summary(
			Group( :package_tech ),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 )
		);
		packageTechSummary << Delete column("N Rows");
		//Get Associative Array Keys
		packagetech = Associative Array(packageTechSummary:package_tech<<Get Values)<<Get Keys;
		close(packageTechSummary, nosave);
		//Loop through list of keys and concatenate to text string separating by commmas
		packagetechtext = "";
		For(loop=1, loop<=NItems(packagetech), loop++,
			packagetechtext=packagetechtext||packagetech[loop]||",";
		);
		
		
		//Form Factor
		formFactorSummary = data_subset_file << Summary(
			Group( :form_factor ),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 )
		);
		formFactorSummary << Delete column("N Rows");
		//Get Associative Array Keys
		formFactor = Associative Array(formFactorSummary:form_factor<<Get Values)<<Get Keys;
		close(formFactorSummary, nosave);
		//Loop through list of keys and concatenate to text string separating by commmas
		formFactortext = "";
		For(loop=1, loop<=NItems(formFactor), loop++,
			formFactortext=formFactortext||formFactor[loop]||",";
		);
		
		
		//Prodgroup3
		prodgroup3Summary = data_subset_file << Summary(
			Group( :prodgroup3 ),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 )
		);
		prodgroup3Summary << Delete column("N Rows");
		//Get Associative Array Keys
		prodgroup3 = Associative Array(prodgroup3Summary:prodgroup3<<Get Values)<<Get Keys;
		close(prodgroup3Summary, nosave);
		//Loop through list of keys and concatenate to text string separating by commmas
		prodgroup3text = "";
		For(loop=1, loop<=NItems(prodgroup3), loop++,
			prodgroup3text=prodgroup3text||prodgroup3[loop]||",";
		);
		
		//close dtaa subset file
		close(data_subset_file, nosave);
		
		
		
		//Module Name
		modulenameSummary = charts_golden << Summary(
			Group( :Module ),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 )
		);
		modulenameSummary << Delete column("N Rows");
		//Get Associative Array Keys
		moduleName = Associative Array(modulenameSummary:Module<<Get Values)<<Get Keys;
		close(modulenameSummary, nosave);
		//Loop through list of keys and concatenate to text string separating by commmas
		moduleNametext = "";
		For(loop=1, loop<=NItems(moduleName), loop++,
			moduleNametext=moduleNametext||moduleName[loop]||",";
		);
		
		
		//Functional Area
		functionalAreaSummary = charts_golden << Summary(
			Group( :Area ),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 )
		);
		functionalAreaSummary << Delete column("N Rows");
		//Get Associative Array Keys
		functionalArea = Associative Array(functionalAreaSummary:Area<<Get Values)<<Get Keys;
		close(functionalAreaSummary, nosave);
		//Loop through list of keys and concatenate to text string separating by commmas
		functionalAreatext = "";
		For(loop=1, loop<=NItems(functionalArea), loop++,
			functionalAreatext=functionalAreatext||functionalArea[loop]||",";
		);
		
		
		
		//Parameter Classification
		parameterClassificationSummary = charts_golden << Summary(
			Group( :Parameter Classification ),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 )
		);
		parameterClassificationSummary << Delete column("N Rows");
		//Get Associative Array Keys
		parameterClassification = Associative Array(parameterClassificationSummary:Parameter Classification<<Get Values)<<Get Keys;
		close(parameterClassificationSummary, nosave);
		//Loop through list of keys and concatenate to text string separating by commmas
		parameterClassificationtext = "";
		For(loop=1, loop<=NItems(parameterClassification), loop++,
			parameterClassificationtext=parameterClassificationtext||parameterClassification[loop]||",";
		);
		
		
		//Control Limit Type
		controlLimitTypeSummary = charts_golden << Summary(
			Group( :control_limit_type ),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 )
		);
		controlLimitTypeSummary << Delete column("N Rows");
		//Get Associative Array Keys
		controlLimitType = Associative Array(controlLimitTypeSummary:control_limit_type<<Get Values)<<Get Keys;
		close(controlLimitTypeSummary, nosave);
		//Loop through list of keys and concatenate to text string separating by commmas
		controlLimitTypetext = "";
		For(loop=1, loop<=NItems(controlLimitType), loop++,
			controlLimitTypetext=controlLimitTypetext||controlLimitType[loop]||",";
		);
		
		
		
		//wwReportRan
		wwReportRan = {"202125"};
		//Loop through list of keys and concatenate to text string separating by commmas
		wwReportRantext = "";
		For(loop=1, loop<=NItems(wwReportRan), loop++,
			wwReportRantext=wwReportRantext||wwReportRan[loop]||",";
		);
		
		
		//Monitorset
		monitorsetSummary = charts_golden << Summary(
			Group( :Monitor Set ),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 )
		);
		monitorsetSummary << Delete column("N Rows");
		//Get Associative Array Keys
		monitorsetSummarylist = Associative Array(monitorsetSummary:Monitor Set<<Get Values)<<Get Keys;
		close(monitorsetSummary, nosave);
		//Loop through list of keys and concatenate to text string separating by commmas
		monitorsettext = "";
		For(loop=1, loop<=NItems(monitorsetSummarylist), loop++,
			monitorsettext = monitorsettext||monitorsetSummarylist[loop]||",";
		);
		
		//Measurementset
		measurementsetSummary = charts_golden << Summary(
			Group( :Measurement Set ),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 )
		);
		measurementsetSummary << Delete column("N Rows");
		//Get Associative Array Keys
		measurementsetlist = Associative Array(measurementsetSummary:Measurement Set<<Get Values)<<Get Keys;
		close(measurementsetSummary, nosave);
		//Loop through list of keys and concatenate to text string separating by commmas
		measurementsettext = "";
		For(loop=1, loop<=NItems(measurementsetlist), loop++,
			measurementsettext = measurementsettext||measurementsetlist[loop]||",";
		);
		
		
		//close Golden charts
		close(charts_golden, nosave);
		
		
		
		
		//logger
		//variables to hold dictionaries
		print(areaGroupingtext);
		print(mktCodeNametext);
		print(dieCodeNametext);
		print(packagetechtext);
		print(formFactortext);
		print(prodgroup3text);
		print(moduleNametext);
		print(functionalAreatext);
		print(parameterClassificationtext);
		print(controlLimitTypetext);
		print(wwReportRantext);
		
		
		//Log Line
		Print("SPC++ Charts: Fetched data from tables.");
		
		areaGroupingXML = "";
		moduleNameXML = "";
		functionalAreaXML = "";
		marketCodeNameXML = "";
		dieCodeNameXML = "";
		packagetechXML = "";
		formFactorXML = "";
		prodgroup3XML = "";
		ParameterClassificationXML = "";
		ControlLimitTypeXML = "";
		
		
		//Get WW information
		_year = year(today());
		_ww = week of year(today());
		year_ww =  Char(_year) || Char(_ww);
		
		
	
		//Log Line
		Print("SPC++ Charts: Fetched data from tables.");

		//create xml components
		facilityXML="<Filter Operation=\!"Equal\!" ValueType=\!"System.String\!" Column=\!"Facility\!">";
		facilityXML = facilityXML || "<Value>"||facilitytext||"</Value>";
		facilityXML = facilityXML || "</Filter>";
		//print(facilityXML); 
		
		marketCodeNameXML="<Filter Operation=\!"Equal\!" ValueType=\!"System.String\!" Column=\!"MarketCodeName\!">";
		marketCodeNameXML = marketCodeNameXML || "<Value>"||mktCodeNametext||"</Value>";
		marketCodeNameXML = marketCodeNameXML || "</Filter>";
		//print(marketCodeNameXML);
		
		dieCodeNameXML="<Filter Operation=\!"Equal\!" ValueType=\!"System.String\!" Column=\!"DieCodeName\!">";
		dieCodeNameXML = dieCodeNameXML || "<Value>"||dieCodeNametext||"</Value>";
		dieCodeNameXML = dieCodeNameXML || "</Filter>";
		//print(dieCodeNameXML);
		
		packagetechXML="<Filter Operation=\!"Equal\!" ValueType=\!"System.String\!" Column=\!"PackageTech\!">";
		packagetechXML = packagetechXML || "<Value>"||packagetechtext||"</Value>";
		packagetechXML = packagetechXML || "</Filter>";
		//print(packagetechXML);
		
		formFactorXML="<Filter Operation=\!"Equal\!" ValueType=\!"System.String\!" Column=\!"FormFactor\!">";
		formFactorXML = formFactorXML || "<Value>"||formFactortext||"</Value>";
		formFactorXML = formFactorXML || "</Filter>";
		//print(formFactorXML);
		
		prodgroup3XML="<Filter Operation=\!"Equal\!" ValueType=\!"System.String\!" Column=\!"ProdGroup3\!">";
		prodgroup3XML = prodgroup3XML || "<Value>"||prodgroup3text||"</Value>";
		prodgroup3XML = prodgroup3XML || "</Filter>";
		//print(prodgroup3XML);
		
		moduleNameXML="<Filter Operation=\!"Equal\!" ValueType=\!"System.String\!" Column=\!"ModuleName\!">";
		moduleNameXML = moduleNameXML || "<Value>"||moduleNametext||"</Value>";
		moduleNameXML = moduleNameXML || "</Filter>";
		//print(moduleNameXML);
		
		functionalAreaXML="<Filter Operation=\!"Equal\!" ValueType=\!"System.String\!" Column=\!"FunctionalArea\!">";
		functionalAreaXML = functionalAreaXML || "<Value>"||functionalAreatext||"</Value>";
		functionalAreaXML = functionalAreaXML || "</Filter>";
		//print(functionalAreaXML);
		
		MonitorSetNameXML="<Filter Operation=\!"Equal\!" ValueType=\!"System.String\!" Column=\!"MonitorSetName\!">";
		MonitorSetNameXML = MonitorSetNameXML || "<Value>"||monitorsettext||"</Value>";
		MonitorSetNameXML = MonitorSetNameXML || "</Filter>";
		//print(MonitorSetNameXML);
		
		MeasurementSetNameXML="<Filter Operation=\!"Equal\!" ValueType=\!"System.String\!" Column=\!"MeasurementSetName\!">";
		MeasurementSetNameXML = MeasurementSetNameXML || "<Value>"||measurementsettext||"</Value>";
		MeasurementSetNameXML = MeasurementSetNameXML || "</Filter>";
		//print(MeasurementSetNameXML);
		
		IntelWWXML="<Filter Operation=\!"Equal\!" ValueType=\!"System.String\!" Column=\!"IntelWW\!">";
		IntelWWXML = IntelWWXML || "<Value>"||"LastN = 6"||"</Value>";
		IntelWWXML = IntelWWXML || "</Filter>";
		//print(IntelWWXML);
		
		part1_xml = facilityXML || marketCodeNameXML || dieCodeNameXML || packagetechXML || formFactorXML || prodgroup3XML || moduleNameXML || functionalAreaXML || MonitorSetNameXML || MeasurementSetNameXML || IntelWWXML;
		
		
		favoritetext = "<?xml version=\!"1.0\!" encoding=\!"utf-16\!"?>
		<ViewState xmlns:xsd=\!"http://www.w3.org/2001/XMLSchema\!" xmlns:xsi=\!"http://www.w3.org/2001/XMLSchema-instance\!">
		  <Module>YEA.Modules.PcsMod</Module>
		  <ViewStateType>YEA.Modules.PcsMod.Models.ViewState</ViewStateType>
		  <DefaultLoad>false</DefaultLoad>
		  <GroupingColumns>Equipment,Facility</GroupingColumns>
		  <ConditioningColumns>MeasurementSetName,SpcChartSubset</ConditioningColumns>
		  <SortingColumns />
		  <PreFilterXML>
		  <Filter>
		  <Group Operation=\!"And\!" >"|| part1_xml || "
		  </Group>
		  </Filter>
		  </PreFilterXML>";
			
		part2_xml = facilityXML || marketCodeNameXML || dieCodeNameXML || packagetechXML || formFactorXML || prodgroup3XML || moduleNameXML;	
		
		
		//-------------------------------FunctionalArea-------------------------------
		functionalAreaXML="<Group Operation=\!"In\!" ValueType=\!"System.String\!" Column=\!"FunctionalArea\!">";
            
		for(loop = 1, loop<= N Items(functionalArea), loop++,
			val = functionalArea[loop];
			functionalAreaXML = functionalAreaXML || "
				<Filter Operation=\!"Equal\!" Column=\!"FunctionalArea\!" ValueType=\!"System.String\!">
					<Value>"||val||"</Value>
			    </Filter>";
		);
		functionalAreaXML = functionalAreaXML || 
		"</Group>";
		//print(functionalAreaXML);
			
		
		//-------------------------------MonitorSetName-------------------------------
		MonitorSetNameXML="<Group Operation=\!"In\!" ValueType=\!"System.String\!" Column=\!"MonitorSetName\!">";
            
		for(loop = 1, loop<= N Items(monitorsetSummarylist), loop++,
			val = monitorsetSummarylist[loop];
			MonitorSetNameXML = MonitorSetNameXML || "
				<Filter Operation=\!"Equal\!" Column=\!"MonitorSetName\!" ValueType=\!"System.String\!">
					<Value>"||val||"</Value>
			    </Filter>";
		);
		MonitorSetNameXML = MonitorSetNameXML || 
		"</Group>";
		//print(MonitorSetNameXML);
		
		
		//-------------------------------MeasurementSetName-------------------------------
		MeasurementSetNameXML="<Group Operation=\!"In\!" ValueType=\!"System.String\!" Column=\!"MeasurementSetName\!">";
            
		for(loop = 1, loop<= N Items(measurementsetlist), loop++,
			val = measurementsetlist[loop];
			MeasurementSetNameXML = MeasurementSetNameXML || "
				<Filter Operation=\!"Equal\!" Column=\!"MeasurementSetName\!" ValueType=\!"System.String\!">
					<Value>"||val||"</Value>
			    </Filter>";
		);
		MeasurementSetNameXML = MeasurementSetNameXML || 
		"</Group>";
		//print(MeasurementSetNameXML);
		
		
		//-------------------------------IntelWW-------------------------------
		_year = year(today());
		_ww = week of year(today());
		year_ww =  Char(_year) || Char(_ww);
	
		IntelWWXML="<Group Operation=\!"In\!" ValueType=\!"System.String\!" Column=\!"IntelWW\!">";
            
		for(loop = 6, loop>= 0, loop--,
			val = char(_year) || char(_ww - loop);
			IntelWWXML = IntelWWXML || "
				<Filter Operation=\!"Equal\!" Column=\!"IntelWW\!" ValueType=\!"System.String\!">
					<Value>"||val||"</Value>
			    </Filter>";
		);
		IntelWWXML = IntelWWXML || 
		"</Group>";
		//print(IntelWWXML);
		
		
		part2 = "<Tab>PcsPivotCharts</Tab>
			<DrillDownFilter>
			<Filter>	
			<Group Operation=\!"And\!" >"|| part2_xml || functionalAreaXML || MonitorSetNameXML || MeasurementSetNameXML || IntelWWXML || "</Group>
			</Filter>
			</DrillDownFilter>
			</ViewState>";
		
		favoritetext = favoritetext || part2;	
		print(favoritetext);
		
		//Save Catalyst favorite file
		try(Save Text File(favoritepath||favoritefile, favoritetext));
		favoritefileNameSPCChart = favoritefile;
		//Log Line
		Print("SPC++ Chart:  CatalystFavoriteFunction:  Create and save Catalyst text file completed.");
				
		
		
		//Log Line
		Print("SPC++ Chart:  CatalystFavoriteFunction completed.");

);