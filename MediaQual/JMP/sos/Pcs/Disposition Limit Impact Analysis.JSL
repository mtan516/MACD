/**************************************************************************
Disposition limit Impact Analysis Automation Script

By: 		Wang Fang ( PDMO Statistician)
Edited by:	Justin McBride
Rev:		1.3
Date: 		Dec 2010
Remark: 	This script can perform disposition limit impact analysis

*****************  Version 1.4	*****************
* Date: 12/28/10
Edited script's dialog box for limit inputs.

*****************  Version 1.3	*****************
* Date: 5/20/10
Modified script so that you do not have to have data to plot the chart.

*****************  Version 1.2	*****************
* Date: 2/5/08
Corret misspelled "Parameter" in the last two summary tables.
Improve control on axis
*****************  Version 1.1	*****************
* Date: 1/28/08
Add ::ref_path="C:\Program Files\SOS2\Reference Files";


****************************************************************************/
ClearGlobals();

// Create dummy data table if none are open.
// Add ref data source and skip main diag.
NoData=0;
if (NTable()==0,
	NoData=1;
	NoDatD=Dialog("No data table detected.", " ",
		"Enter Parameter Name", ParamName=Edittext(),
		Button("OK"),Button("Cancel"));
	RemoveFrom(NoDatD,2);
	evallist(NoDatD);
		
	dt=newTable("Dummy Table", /*invisible,*/ newColumn("Facility", Character), newColumn("Lot", Character),
		newColumn("Parameter ID", Character, formula(eval(ParamName))), newColumn(eval(ParamName), numeric), addRows(2));
	column(1)[1]="F1";
	column(1)[2]="F1";
	column(2)[1]="L1";
	column(2)[2]="L1";
	column(3)[1]=1;
	column(3)[2]=2;
	column(4)[1]=1;
	column(4)[2]=2;
	for each row(
		rowstate()=combine states(Excluded State(row()),Hidden State(row())));		
	);

// Main Program

::Dispo_MainDiag_Expr = Expr(
If(NoData==0, 
	::result = ColumnDialog( Title("Disposition Limit Impact Analysis"),
		y = ColList("Response Variable (Required)",Max Col(1),MinCol(1),DataType(Numeric), Columns(:PARAMETERVALUE) ),
									 x = ColList("Run ID (Required)",MinCol(1),MaxCol(1),Columns(:LOT)),
									 subx=ColList("Sub RunID (Optional)", MaxCol(1)),
		Param = ColList("Parameter ID (Required)",Max Col(3),DataType(Character) ),
		Col_List = ColList( "Facility or Entity (Required)", Max Col(2), Min Col(1), MaxCol(1),DataType(Character), Columns(FACILITY) ),
		" ",
		HList( VList(
			""
			),
			VList(
			VList("Choose Source of RPL%, Spec Limits and Control Limits", ref_select=ComboBox("Enter Manually","Create Reference Table","Retrieve Saved Reference Table",1)),
			" "
			)
		)

	);

::Param=result["Param"];
::x=result["x"];
::subx=result["subx"];
::Response=result["y"];
::Col_List = Result["Col_List"];		//Facility or Entity
::Col_Count = NItems(Col_List);
ref_select = result["ref_select"];
button[1]=result["Button"]
,

//////////////////// Else
	::result1 = dialog( Title("Disposition Limit Impact Analysis"),
		HList( VList(
			""
			),
			VList(
			VList("Choose Source of RPL%, Spec Limits and Control Limits", ref_select=ComboBox("Enter Manually","Create Reference Table","Retrieve Saved Reference Table",1)),
			" "
			)
		)

	);

::Param={Parameter ID}; //Param ID.
::x={Lot};
::Response=evallist({ParamName});
::Col_List = {Facility};		//Facility or Entity
::Col_Count = NItems(Col_List);
ref_select = result1["ref_select"];
button[1]=result1["Button"]
	
)  //EndIf

	
); //EndExpr

::Generate_ParamID = Expr(
	CurrentDataTable(dt);
	If( !Contains( dt<<GetColumnNames(String), "PARAMETERID" ), dt<<AddMultipleColumns("PARAMETERID",1,AfterLast,Character(128)) );
	If( NItems(p_arg) != 0, //p_arg is Param
		new_arg="";
		parmid = Column("PARAMETERID");
		For(i=1,i<=NItems(p_arg),i++,
			base_arg="Char( Column(\!"" || Char(p_arg[i]) || "\!")[] )";
			new_arg ||= base_arg;
			If( i!=NItems(p_arg), new_arg ||= " || \!"_\!" || " );
		);

		ForEachRow( parmid[] = Eval(Parse(new_arg)) );
		Param_Grp_List = EvalList( {Parse(parmid<<GetName)} );
		Wait(0);
		Summarize( Param_List=By( parmid ) );
		N_Params=NItems(Param_List);
		col_offset=1,

		/*ELSE*/
		parmid=Column(Response[1]);
		Param_List[1]= Char(Response[1]);
		N_Params=1;
		col_offset=0;

	)

); //EndExpr

::Dispo_PrePro_Expr=Expr(
	y_name=Char(Response[1]);
	x_name = Char(x[1]);
	Eval(substitute(NameExpr(Generate_ParamID), Expr(p_arg), Expr(Param)));
	Summarize(Param_list=By(parmid));
	N_Params=NItems(Param_list);
	insertinto(lot_Grp_list, x[1]);
	if(Nitems(subx)>0,subx_name=Char(subx[1]); insertinto(lot_Grp_list,subx_name));
	for(i=1,i<=Col_Count, i++, insertinto(lot_Grp_list, Col_list[i]);insertinto(Grp_list,Col_list[i]));
	lot_sum_tab=dt<<Summary(Group(Eval(lot_Grp_list)), Mean(eval(response)), Std Dev(eval(response)));
	lot_sum_tab<<Set Name("Summary Data by Run ID");
	x_col=column(ncol(lot_sum_tab)-1);
	x_col<<set name("MEAN");
	y_col=column(ncol(lot_sum_tab));
	y_col<<set name("STD DEV");
);



::RefSrcDispoExpr = Expr( RefSrcRPLDlg = NewWindow("Reference Value Source",
	BorderBox(Left(3),Top(4),
	VListBox(PanelBox("",TextBox( "Script has paused. Before continuing:", <<SetFontStyle("Bold") ),
				TextBox(""),
				TextBox( "	1)	Review the reference table values and update them if necessary.", <<SetFontStyle("Bold") ),
				TextBox(""),
				TextBox( "	2)	Optionally save the reference table using File -> Save As.", <<SetFontStyle("Bold") ),
				TextBox( "		(Note that a copy of your reference table will automatically be saved in C:\Program Files\SOS2\Reference Files\)", <<SetFontStyle("Italic") ),
				TextBox(""),
				TextBox( "	3)	Make sure your reference table is the active table by clicking on it.", <<SetFontStyle("Bold") ),
				TextBox(""),
				TextBox( "When finished, click OK to resume the script", <<SetFontStyle("Bold") ),
				TextBox(""),
			CurrentDataTable(dt);
			Choose( ref_select,
																																		NULL,
				ref_tab=dt<<Summary( Group( parmid ) );
				CurrentDataTable(ref_tab);
				Column(ref_tab,1)<<ScrollLock(1);
								ref_tab<<AddMultipleColumns("RPL%", 1, AfterLast, Numeric);
								Column("RPL%")<<Range Check(LTLT(0, 100));
				ref_tab<<AddMultipleColumns("Mean Parameter LCL",1,AfterLast,Numeric);
				ref_tab<<AddMultipleColumns("Mean Parameter CL",1,AfterLast,Numeric);
				ref_tab<<AddMultipleColumns("Mean Parameter UCL",1,AfterLast,Numeric);
				ref_tab<<AddMultipleColumns("StdDev Parameter CL",1,AfterLast,Numeric);
				ref_tab<<AddMultipleColumns("StdDev Parameter UCL",1,AfterLast,Numeric);
				ref_tab<<AddMultipleColumns("Parameter LSL",1,AfterLast,Numeric);
				ref_tab<<AddMultipleColumns("Parameter Target",1,AfterLast,Numeric);
				ref_tab<<AddMultipleColumns("Parameter USL",1,AfterLast,Numeric);
				ref_tab<<SetName("RPL Reference Table");
				ref_tab<<ScrollWindow(0,0);
				date_stamp = Today();
				Ref_Table_Name = Ref_Path || Char(ref_tab<<GetName) || "_" || Char(date_stamp) || ".jmp";
				//ref_tab<<Save( Ref_Table_Name );
				ref_tab=CurrentDataTable(),

				Try( ref_tab=Open(), CleanUP(); button[1]=-1); ref_tab=CurrentDataTable();ref_tab<<ScrollWindow(0,0);
				Ref_Table_Name= Ref_Path || Char(ref_tab<<GetName) || ".jmp";

			) //EndChoose ref_select
		), //End PanelBox
		PanelBox("Action",
			LineupBox(NCol(2),
				ButtonBox("OK", ref_tab=CurrentDataTable(); If( Type(ref_tab)=="DataTable", InsertInto(tab_create_list, ref_tab<<GetName) ); RefSrcRPLDlg<<CloseWindow;
						Try( Eval(_Main), Print("ERROR");CleanUP(); button[1]=-1) ),

				ButtonBox("Cancel",RefSrcRPLDlg<<CloseWindow)

			) //End LineUpBox
		) //End PanelBox
	) //End HListBox
	) //End BorderBox
); //End NewWindow

RefSrcRPLDlg<<MoveWindow(0,0);
RefSrcRPLDlg<<ZoomWindow;
RefSrcRPLDlg<<BringWindowToFront;
ref_tab<<MoveWindow(0,350);

); //EndExpr


Dispo_Main=Expr(
	CurrentDataTable(dt);
	If(ref_select>1,
		If(NRow(ref_tab)!=0,
			ref_tab_join=dt<<Join(With(ref_tab), Merge Same Name Columns, Select(:PARAMETERID),
			SelectWith(:RPL%, :Mean Parameter LCL, :Mean Parameter CL, :Mean Parameter UCL, :StdDev Parameter CL, :StdDev Parameter UCL, 																																												:Parameter LSL, :Parameter Target, :Parameter USL),
			By Matching Columns(:PARAMETERID=:PARAMETERID), Drop Multiples(1, 0), Include Non Matches(1,0)), button[1]=-1;
		);
		if(button[1]==1,
			matchflgvals=Column(ref_tab_join, "Match Flag")<<GetValues;
			delrows=ref_tab_join<<GetRowsWhere(:Match Flag!=3);
			if(NRow(delRows)!=0, ref_tab_join<<DeleteRows(delrows) );
			ParamID_Ref=Column(ref_tab_join, "PARAMETERID")<<GetValues;
			Param_LSL_Ref=Column(ref_tab_join, "Parameter LSL") << DataType(Numeric) << GetValues;
			Param_USL_Ref=Column(ref_tab_join, "Parameter USL") << DataType(Numeric) << GetValues;
			Param_Target_Ref=Column(ref_tab_join, "Parameter Target") << DataType(Numeric) << GetValues;
			Param_MUCL_Ref=Column(ref_tab_join, "Mean Parameter UCL") << DataType(Numeric) << GetValues;
			Param_MLCL_Ref=Column(ref_tab_join, "Mean Parameter LCL") << DataType(Numeric) << GetValues;
			Param_MCL_Ref=Column(ref_tab_join, "Mean Parameter CL") << DataType(Numeric) << GetValues;
			Param_SUCL_Ref=Column(ref_tab_join, "StdDev Parameter UCL") << DataType(Numeric) << GetValues;
			Param_SCL_Ref=Column(ref_tab_join, "StdDev Parameter CL") << DataType(Numeric) << GetValues;
			Param_RPLPER_Ref=Column(ref_tab_join, "RPL%")<<GetValues;
			close(ref_tab_join,no save);
			close(ref_tab,no save);
		)
	);
	if(button[1]==1,
		n=1;
		while(n<=N_Params & cont==1,
			If(ref_select>1,
				lsl_val[n]=Param_LSL_Ref[n];
				usl_val[n]=Param_USL_Ref[n];
				target_val[n]=Param_Target_Ref[n];
				mucl_val[n]=Param_MUCL_Ref[n];
				mlcl_val[n]=Param_MLCL_Ref[n];
				mcl_val[n]=Param_MCL_Ref[n];
				sucl_val[n]=Param_SUCL_Ref[n];
				scl_val[n]=Param_SCL_Ref[n];
				rpl_val[n]=Param_RPLPER_Ref[n]/100,
	
				/*ELSE*/
				x_name=Char(Param_list[n]);
				rpl_diag=Dialog(Title("RPL%, Specification Limits and Control Limits"),
				Lineup(2, "Enter RPL%, Spec Limit and Control Limit for Parameter:", x_name), "",
				Lineup(2, "RPL% (Required, 0<RPL%<100)", rpl=EditNumber(), "", ""),
				HList("Spec Limits: ", "LSL ", lsl=EditNumber(),  " Target ", target=EditNumber(), " USL ", usl=EditNumber()),
				"",
				HList("Xbar Chart:   ","LCL ",x_LCL=EditNumber()," CL      ",x_CL=EditNumber()," UCL ",x_UCL=EditNumber() ),
				HList("S Chart: "," 	                  "," CL      ",s_CL=EditNumber()," UCL ",s_UCL=EditNumber() ),
				HList(Button("OK"), Button("Cancel"))
				);//end repl_diag;
				button[2]=rpl_diag["Button"];
				lsl_val[n]=rpl_diag["lsl"];
				usl_val[n]=rpl_diag["usl"];
				target_val[n]=rpl_diag["target"];
				mucl_val[n]=rpl_diag["x_UCL"];
				mlcl_val[n]=rpl_diag["x_LCL"];
				mcl_val[n]=rpl_diag["x_CL"];
				sucl_val[n]=rpl_diag["s_UCL"];
				scl_val[n]=rpl_diag["s_CL"];
				rpl_val[n]=rpl_diag["rpl"]/100;
				while(button[2]==1&(Ismissing(rpl_val[n])|(rpl_val[n]>=100)|rpl_val[n]<0|(IsMissing(lsl_val[n])&IsMissing(usl_val[n]))|(lsl_val[n]>=usl_val[n]) | (sucl_val[n]<0|scl_val[n]<0|sucl_val[n]<scl_val[n])|(mucl_val[n]<mlcl_val[n])|(mucl_val[n]<mcl_val[n])|(mcl_val[n]<mlcl_val[n])),
					rpl_diag=Dialog(Title("RPL%, Specification Limits and Control Limits"),
						Lineup(2, "Enter RPL%, Spec Limit and Control Limit for Parameter:", x_name), "",
						Lineup(2, "RPL% (Required, 0<RPL%<100)", rpl=EditNumber(), "", ""),
						HList("Spec Limit", "LSL", lsl=EditNumber(),  "Target", target=EditNumber(), "USL", usl=EditNumber()),
						"",
						HList("Xbar Chart","LCL",x_LCL=EditNumber(),"CL			",x_CL=EditNumber(),"UCL",x_UCL=EditNumber() ),
						HList("S Chart"," 																							"," CL			",s_CL=EditNumber(),"UCL",s_UCL=EditNumber() ),
						HList(Button("OK"), Button("Cancel"))
					);//end repl_diag;
					button[2]=rpl_diag["Button"];
					lsl_val[n]=rpl_diag["lsl"];
					usl_val[n]=rpl_diag["usl"];
					target_val[n]=rpl_diag["target"];
					mucl_val[n]=rpl_diag["x_UCL"];
					mlcl_val[n]=rpl_diag["x_LCL"];
					mcl_val[n]=rpl_diag["x_CL"];
					sucl_val[n]=rpl_diag["s_UCL"];
					scl_val[n]=rpl_diag["s_CL"];
					rpl_val[n]=rpl_diag["rpl"]/100;
				)//end while
			);//end if ref_select>1
			
			if(button[2]!=-1, cont=1, cont=-1);
			lsl_intercept[n]=-lsl_val[n]/Normal Quantile(1-rpl_val[n]);
			usl_intercept[n]=usl_val[n]/Normal Quantile(1-rpl_val[n]);
			lsl_slope[n]=1/Normal Quantile(1-rpl_val[n]);
			usl_slope[n]=-1/Normal Quantile(1-rpl_val[n]);
			
			n++;
		);//endwhile
		current data table(lot_sum_tab);
		lot_sum_tab<<New Column("Out-of-Dispo Flag",Numeric);
		For(i=1, i<=N_Params, i++,
			lot_sum_tab << ClearSelect << select where(column(lot_sum_tab, "PARAMETERID")[]==Char(Param_list[i]));
			rowlist=lot_sum_tab<<GetRowsWhere(Selected());
			OOD[i]=0;
			total_run[i]=NRow(rowlist);
			eval(Out_of_Dispo_Calc);
			OOD_percent[i]=char(round(OOD[i]*100/total_run[i],2))||"%";
			eval(substitute(NameExpr(ScatterPlot_Expr), Expr(_jmpver), jmpver,Expr(_setmax), 2*Max(Max(Column(lot_sum_tab,"STD DEV")[rowlist]),sucl_val[i]),Expr(_a1), lsl_intercept[i], Expr(_b1), lsl_slope[i], Expr(_a2), usl_intercept[i], Expr(_b2), usl_slope[i]));
			Biv_Chart_list[i]=Biv_Chart_Box;
			eval(Dispo_Flag_Expr);
		);
		lot_sum_tab << ClearSelect;
		eval(Dispo_Flag_Sum_Report);
		eval(OOD__Overall_Sum_Report);
		eval(OOD_Group_Report);
		eval(Dispo_Output_Report);
		opt<<Append(FooterBox)
	);
);//EndExpr

::Out_of_Dispo_Calc=Expr(  for(k=1, k<=NRow(rowlist), k++,
																		if(lsl_intercept[i]+lsl_slope[i]*column(lot_sum_tab,"MEAN")[rowlist[k]]<column(lot_sum_tab,"STD DEV")[rowlist[k]]|
																		usl_intercept[i]+usl_slope[i]*column(lot_sum_tab,"MEAN")[rowlist[k]]<column(lot_sum_tab,"STD DEV")[rowlist[k]],
																		column(lot_sum_tab,"Out-of-Dispo Flag")[rowlist[k]]=1;
																		OOD[i]=OOD[i]+1,
																		column(lot_sum_tab,"Out-of-Dispo Flag")[rowlist[k]]=0;
																		)
																)
												 );
::ScatterPlot _Expr= Expr(rowlist=lot_sum_tab<<GetRowsWhere(Selected());
													xmin = Min(Column( lot_sum_tab,"Mean")[rowlist] );
										xmax = Max(Column( lot_sum_tab,"Mean")[rowlist]);
													ymin = 0;
										ymax = Max(Column( lot_sum_tab,"STD DEV")[rowlist]);
													x_chart_max=Max(xmax, usl_val[i]);
													x_chart_min=Min(xmin, lsl_val[i]);
													y_chart_max=Max(ymax, sucl_val[i]);
													xrnd=Floor(log((x_chart_max-x_chart_min),10));
													If( xrnd >= 0 & xrnd < 1, xrnd=2,
											 If( xrnd >= 1	& xrnd < 10, xrnd=1,
										If( xrnd >= 10, xrnd=0, xrnd=(-xrnd)+1 )
											)
																		 );
													y_chart_min=ymin;
													yrnd=Floor(log((y_chart_max-y_chart_min),10));
													If( yrnd >= 0 & yrnd < 1, yrnd=2,
											If( yrnd >= 1  & yrnd < 10, yrnd=1,
												If( yrnd >= 10, yrnd=0, yrnd=(-yrnd)+1 )
												)
												);

												Biv_Chart_Box=HListBox(Bivariate(Y(eval(y_col)), X( eval(x_col)), Where(Selected())
																																																																 ));
																																	Biv_Chart_Box[TextBox(1)]<<Delete;
																																	Biv_Chart_Box[PictureBox(2)]<<Delete;
																																	Biv_Chart_Box[framebox(1)]<<Row Legend(column(char(Col_List[1]) ), Color(1),Marker(1));
																																	Biv_Chart_Box[framebox(1)]<<add graphics script(pen color("Red");Fill color("Yellow");if(_jmpver!="5.1.1", Transparency(0.25));
																																																																																			YFunction(_a1+_b1*x, x, fill(2, _setmax))
																																																																																		 );
																																	Biv_Chart_Box[framebox(1)]<<add graphics script(pen color("Red"); Fill color("Yellow");if(_jmpver!="5.1.1", Transparency(0.25));
																																																																																			YFunction(_a2+_b2*x, x, fill(2, _setmax))
																																																																																			);
																																	Biv_Chart_Box[framebox(1)]<<add graphics script(pen color("Red");Fill color("Yellow");if(jmpver!="5.1.1", Transparency(0.25));
																																																																																			YFunction(_a1+_b1*x, x)
																																																																																		 );
																																	Biv_Chart_Box[framebox(1)]<<add graphics script(pen color("Red"); Fill color("Yellow");if(jmpver!="5.1.1", Transparency(0.25));
																																																																																			YFunction(_a2+_b2*x, x)
																																																																																			);
																																	Biv_Chart_Box[AxisBox(1)]<<AddRefLine( sucl_val[i],"Solid","Blue");
																																	Biv_Chart_Box[AxisBox(1)]<<AddRefLine( scl_val[i],"Solid","Green");
																																	Biv_Chart_Box[AxisBox(2)]<<AddRefLine( mucl_val[i],"Solid","Blue");
																																	Biv_Chart_Box[AxisBox(2)]<<AddRefLine( mlcl_val[i],"Solid","Blue");
																																	Biv_Chart_Box[AxisBox(2)]<<AddRefLine( mcl_val[i],"Solid","Green");
																																	Biv_Chart_Box[OutlineBox(1)]<<Set Title( "Disposition Limit Impact Analysis:"||Param_list[i] );
																																	Biv_Chart_Box[AxisBox(2)]<<Format("Best");
																																	Biv_Chart_Box[AxisBox(2)]<<Max(Round(x_chart_max, xrnd));
																																	Biv_Chart_Box[AxisBox(2)]<<Min(Round(x_chart_min,xrnd));
																																	Biv_Chart_Box[AxisBox(2)]<<Inc(Round(0.1*(x_chart_max-x_chart_min), xrnd));
																																	Biv_Chart_Box[AxisBox(2)]<<Rotated Labels(1);
																																	Biv_Chart_Box[AxisBox(1)]<<Format("Best");
																																	Biv_Chart_Box[AxisBox(1)]<<Max(round(y_chart_max+0.1*(y_Chart_max-y_Chart_min),yrnd));
																																	Biv_Chart_Box[AxisBox(1)]<<Min(y_chart_min);
																																	Biv_Chart_Box[AxisBox(1)]<<Inc(Round(0.1*(y_chart_max-y_chart_min), yrnd));
																																); //EndExpr x


Dispo_Flag_Expr=Expr( 				 if(lsl_intercept[i]+lsl_slope[i]*mlcl_val[i]<sucl_val[i]&!IsMissing(lsl_intercept[i]+lsl_slope[i]*mlcl_val[i]<sucl_val[i]),
																															low_flag[i]="FLAG", low_flag[i]="None");
																															if(usl_intercept[i]+usl_slope[i]*mucl_val[i]<sucl_val[i]&!IsMissing(usl_intercept[i]+usl_slope[i]*mucl_val[i]<sucl_val[i]),
																															 upp_flag[i]="FLAG", upp_flag[i]="None");
																															 if(Ismissing(usl_val[i]), min_rpl[i]=round((1-Normal Distribution((-lsl_val[i]+mlcl_val[i])/(sucl_val[i])))*100,1); flag[i]=low_flag[i],
																																																					 min_rpl[i]=round((1-Normal Distribution(usl_val[i]/sucl_val[i]-mucl_val[i]/sucl_val[i]))*100,1); flag[i]=upp_flag[i]);
																														 ); //EndExpr

Dispo_Flag_Sum_Report=Expr (	 ind_col={"Parameter", "RPL%", "Control Limit Flag", "Min RPL%"};
															 Disp_flag=Outlinebox(Char("Disposition Analysis Flag Summary Report "),
																										disp_flag_tab_box=TableBox();
																										);
															 disp_flag_tab_box<<append(StringColBox(ind_col[1], Param_List));
															 disp_flag_tab_box<<append(NumberColBox(ind_col[2], rpl_val*100));
															 disp_flag_tab_box<<append(StringColBox(ind_col[3], flag));
															 disp_flag_tab_box<<append(NumberColBox(ind_col[4], min_rpl));
															 disp_flag_tab_box<<append(NumberColBox("LSL", lsl_val));
															 disp_flag_tab_box<<append(NumberColBox("Target",target_val));
															 disp_flag_tab_box<<append(NumberColBox("USL",usl_val));
															 disp_flag_tab_box<<append(NumberColBox("Mean LCL",mlcl_val));
															 disp_flag_tab_box<<append(NumberColBox("Mean CL",mcl_val));
															 disp_flag_tab_box<<append(NumberColBox("Mean UCL",mucl_val));
															 disp_flag_tab_box<<append(NumberColBox("Std CL", scl_val));
															 disp_flag_tab_box<<append(NumberColBox("Std UCL",sucl_val));
															 disp_flag_tab_box<<Table Style("Bordered")
															);//EndExpr

OOD__Overall_Sum_Report=Expr(ind_col={"Parameter","#Run","#OOD","OOD%"};
														 OOD_Ind=Outlinebox(Char("Out of Disposition Summary Report"),
																							OOD_tab_box=TableBox();
																								);
														 OOD_tab_box<<append(StringColBox(ind_col[1], Param_List));
														 OOD_tab_box<<append(NumberColBox(ind_col[2],Total_run));
														 OOD_tab_box<<append(NumberColBox(ind_col[3],OOD));
														 OOD_tab_box<<append(StringColBox(ind_col[4],OOD_percent));
													 OOD_tab_box<<Table Style("Bordered")
														 );//EndExpr

OOD_Group_Report=Expr(ind_col={"Parameter","Group","#Run","#OOD","OOD%"};
										temp_tb=lot_sum_tab<<Summary(Group(Eval(Grp_list)), Sum("Out-of-Dispo Flag"));
										current data table(temp_tb);
										Column(NCOL())<<Set Name("OOD");
										temp_tb<<New Column("OOD%",character,formula(char(round(:OOD*100/:N Rows,2))||"%"));												 temp_tb<<run formulas;
										Param_Grp_List=column(temp_tb,"PARAMETERID")<<get values;
										Grp_List=column(temp_tb,2)<<get values;
										Grp_N=Column(temp_tb,3)<<get values;
										Grp_OOD=column(temp_tb,"OOD")<<get values;
										Grp_OOD_percent=Column(temp_tb,"OOD%")<<get values;
										//close(temp_tb,no save);
										OOD_Grp_Ind=Outlinebox(Char("Out of Disposition by Facility(or Entity)Summary Report"),
																							OOD_grp_tab_box=TableBox();
																								);
														 OOD_Grp_tab_box<<append(StringColBox(ind_col[1], Param_Grp_List));
														 OOD_Grp_tab_box<<append(StringColBox(ind_col[2],Grp_List));
														 OOD_Grp_tab_box<<append(NumberColBox(ind_col[3],Grp_N));
														 OOD_Grp_tab_box<<append(NumberColBox(ind_col[4],Grp_OOD));
														 OOD_Grp_tab_box<<append(StringColBox(ind_col[5],Grp_OOD_percent));
												OOD_Grp_tab_box<<Table Style("Bordered")
											);//EndExpr

Dispo_Output_Report=Expr(Graph_Legend = outlinebox("Graph Legend",
																					 outlinebox("Reference Lines",
																				 textbox("	Red solid lines are Disposition Limits."),
																				 " ",
																				 textbox("	Green solid lines are centerline."),
																				 " ",
																				 textbox("	Blue solid lines are control limit.")
																										),
																				 textbox("")
																					);// Graph Legend Report
								 Graph_Legend<<Close;
												 new window("Disposition Limit Impact Analysis",opt=outlinebox("Disposition Limit Impact Analysis"));
																												for(i=1, i<=N_Params, i++,
																																 opt<<append(Biv_Chart_list[i]);
																																 opt<<append(Graph_legend);
																															);


						opt<<append(Disp_flag);
						opt<<append(OOD_Grp_Ind);
						opt<<append(OOD_Ind);
						opt<<append(TextBox("Min RPL% is the estimated %OOS at the intersection of the mean and standard control limits. It is the Min RPL% necessary so that you only disposition if you are also out-of-control"))

												 );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
///////////////////<Main Routine>/////////////////////////////////////////////////////
Include("$ADDIN_HOME(com.intel.sos)\libraries\sosglbls.jsl");
If( NTable()==0,dt=open(),dt=CurrentDataTable() );
dt<<ClearSelect;
dt<<ClearColumnSelection;
try (jmpver=JMP Version(), jmpver="5.1.1");

::button={0,0};
::ref_select=1;
::valid=1;
::cont=1;
::lsl_val={};
::usl_val={};
::target_val={};
::mucl_val={};
::mlcl_val={};
::mcl_val={};
::sucl_val={};
::scl_val={};
::rpl_val={};
::usl_intercept={};
::lsl_intercept={};
::usl_slope={};
::lsl_slope={};
::lot_Grp_list={PARAMETERID};
::Grp_list={PARAMETERID};
::Biv_Chart_list={};
::low_flag={};
::upp_flag={};
::min_rpl={};
::flag={};
::OOD={};
::total_run={};
::OOD_percent={};
::ref_path="C:\Program Files\SOS2\Reference Files";

while(valid==1&button[1]!=-1,
										Eval(Dispo_MainDiag_Expr); /*add if? */
										If(button[1]==1,
																		Eval(Dispo_PrePro_Expr);
																		if((ref_select>1),
																											Eval(Substitute(NameExpr(RefSrcDispoExpr), Expr(_Main), Expr(Dispo_Main))); valid=0,
																											Eval(Dispo_Main);
																											valid=0;
																										 )
													)
			 );

