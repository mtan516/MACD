/*****

*****/
clear globals();
Try(Include("$ADDIN_HOME(com.intel.sos)\libraries\sosglbls.jsl"), ::FooterBox = V List Box(Text Box(" ")));

ARL_alpha_list = {"370", "500", "600", "700", "800", "900", "1,000", "2,000", "3,000", "4,000", "5,000", "6,000", "7,000", "8,000", "9,000", "10,000", "15,000", "20,000", "30,000", "40,000", "50,000", "60,000", "70,000", "80,000", "90,000", "100,000"};
ARL_alpha_values = {};
for(i=1, i<=nitems(ARL_alpha_list), i++,
	insert into(ARL_alpha_values, num(ARL_alpha_list[i]))
);
dt_lookupttd = Open(
	"$ADDIN_HOME(com.intel.sos)\Reference Files\EWMA Optimal Lambda TTD.jmp",
	invisible
);
dt_lookup2 = Open(
	"$ADDIN_HOME(com.intel.sos)\Reference Files\EWMA Optimal Lambda 2-sided.jmp",
	invisible
);
dt_lookupall = Open(
	"$ADDIN_HOME(com.intel.sos)\Reference Files\EWMA Lookup.jmp",
	invisible
);

lookupttd = dt_lookupttd << get as matrix;
lookup2 = dt_lookup2 << get as matrix;
lookupall = dt_lookupall << get as matrix;

::target = 0;
::process_sigma = 1;
::TTD = 0;
::UAD = 5*process_sigma;
::std_delta2=0;
OK_cnt = 0;

ewma_db = Expr(
	ob = Outline Box( "EWMA Input Parameters",
		ob_hbox = hlist box(
		V List Box(
			lineup = Lineup Box(
				2,
				Text Box( "Process Target: " ),
				target_box = Number Edit Box( target ),
				Text Box( "Process Standard Deviation: " ),
				psd_box = Number Edit Box( process_sigma ),
				Text Box( "Tool-to-Tool Delta (TTD): " ),
				TTD_box = Number Edit Box( TTD ),
				Text Box( "Unacceptable Delta (UAD): " ),
				delta_box = Number Edit Box( UAD ),
				Text Box( "ARL alpha: " ),
				arl_a_box = Combo Box( ARL_alpha_list )
			)
		)
		),
		H List Box(
			Button Box( "OK",
				::target = target_box << get;
				::process_sigma = psd_box << get;
				::TTD = TTD_box << get;
				::UAD = delta_box << get;
				arl_a_char =  ARL_alpha_list[arl_a_box << get()];
				arl_a = Num(arl_a_char);
				std_delta = round(min(10,round(((UAD)/process_sigma)/0.05,0)*0.05),2);
				//if(std_delta>5, std_delta2 = 5);
				std_delta_TTD = round(min(10,round(((UAD - TTD)/process_sigma)/0.05,0)*0.05),2);
				If(IsMissing(TTD)|TTD==0,
				opt_row = Loc( lookup2[0, 2] == std_delta & lookup2[0, 3] == arl_a );
				opt_lambda = lookup2[opt_row, 1];
				opt_k = lookup2[opt_row, 4];
				opt_beta = lookup2[opt_row, 5];
				opt_rows = Loc(lookupall[0,2] == std_delta & lookupall[0,3]==arl_a)
				,
				opt_row = Loc( lookupttd[0, 2] == std_delta_TTD & lookupttd[0, 3] == arl_a );
				opt_lambda = lookupttd[opt_row, 1];
				opt_k = lookupttd[opt_row, 6];
				opt_beta = lookupttd[opt_row, 8];
				opt_rows = Loc(lookupall[0,2] == std_delta_TTD & lookupall[0,3]==arl_a)
				);
				UCL_e = target + TTD + opt_k * process_sigma * sqrt(opt_lambda/(2-opt_lambda));
				LCL_e = target - TTD - opt_k * process_sigma * sqrt(opt_lambda/(2-opt_lambda));
				OK_cnt ++;
				eval(ob_res);
			),
			Button Box( "Cancel", eval(close_dts);ewma_input<<close window)
		)
	)
); //end ewma_db expression


ob_res =expr(If(OK_cnt<=1,
	ewma_input<<append(outlinebox("EWMA Optimal Parameters",
		tablebox(
			rep_targ = numbercolbox("Target", matrix(target),<<set format(6,2)),
			rep_sigma = numbercolbox("Standard Deviation (s)", matrix(process_sigma),<<set format(6,2)),
			rep_ttd = numbercolbox("TTD", matrix(TTD),<<set format(6,2)),
			rep_uad = numbercolbox("UAD", matrix(UAD),<<set format(6,2)),
			rep_alpha = numbercolbox("ARL alpha", matrix(arl_a),<<set format(7,0,"Fixed Dec","Use thousands separator")),
			If(ismissing(TTD)|TTD==0,
			rep_std = numbercolbox("(UAD-TTD)/s", matrix(std_delta),<<set format(6,2)),
			rep_std = numbercolbox("(UAD-TTD)/s", matrix(std_delta_TTD),<<set format(6,2))),
			rep_lambda = numbercolbox("Optimal Lambda", matrix(opt_lambda),<<set format(6,2)),
			rep_k = numbercolbox("k ", matrix(opt_k),<<set format(6,2)),
			rep_beta = numbercolbox("ARL beta", matrix(ceiling(opt_beta)),<<set format(6,0)),
			rep_LCL = numbercolbox("LCL", matrix(LCL_e),<<set format(6,3)),
			rep_UCL = numbercolbox("UCL", matrix(UCL_e),<<set format(6,3)),
			<<table style("Bordered")
		)
	)
	);
	,
	rep_targ<<set values(matrix(target));
	rep_sigma<<set values(matrix(process_sigma));
	rep_ttd<<set values(matrix(TTD));
	rep_uad<<set values(matrix(UAD));
	If(ismissing(TTD)|TTD==0,
	rep_std<<set values(matrix(std_delta)),
	rep_std<<set values(matrix(std_delta_TTD)));
	rep_lambda<<set values(matrix(opt_lambda));
	rep_k<<set values(matrix(opt_k));
	rep_alpha<<set values(matrix(arl_a));
	rep_beta<<set values(matrix(ceiling(opt_beta)));
	rep_LCL<<set values(matrix(LCL_e));
	rep_UCL<<set values(matrix(UCL_e));
	ttd_gb<<delete;
	lbd_obox<<delete;
	);
	ob_hbox<<append(eval(ttd_plot));
	ewma_input<<append(eval(lbd_plot));
	lbd_obox<<append(FooterBox);
	wait(.01);
	ewma_input[outlinebox("Lambda?")][text box(7)]<<delete;
	ewma_input[outlinebox("Lambda?")][text box(4)]<<delete;
	ewma_input[outlinebox("Lambda?")][text box(1)]<<delete;

);//end EWMA Results expr

close_dts = expr(
	if(!IsEmpty(dt_lookupttd),Close( dt_lookupttd, nosave ));
	if(!IsEmpty(dt_lookup2),Close( dt_lookup2, nosave ));
	if(!IsEmpty(dt_lookupall),Close( dt_lookupall, nosave ));
);

ttd_plot = Expr(
	ttd_gb = Graph Box(
		FrameSize(240, 180),
		X Scale(0,20),
		Y Scale(Target-(UAD+process_sigma), Target+(UAD+process_sigma)),
		X Axis(Show Major Grid(1)),
		Y Axis(Show Major Grid(1)),
		XName("Time"),
		YName(""),
		Pen Color("green");
		Pen Size(2);
		line style(0);		
		t_line = HLine(Target);
		text({1,Target},"Target = ", Target);
		Pen Color("blue");
		Pen Size(2);
		line style(1);
		ttd_hi = HLine(Target+TTD);
		text({9,Target + TTD},"TTD = ", TTD);
		text({9,Target - TTD},"TTD = ", -1*TTD);
		ttd_lo = HLine(Target-TTD);
		Pen Color("red");
		Pen Size(2);
		line style(1);
		uad_hi = HLine(Target+UAD);
		uad_lo = HLine(Target-UAD);
		text({15,Target + UAD},"UAD = ", UAD);
		text({15,Target - UAD},"UAD = ", -1*UAD);
		Pen Color( "red" );
		Pen Size( 1 );
		Line Style( 0 );
		ucl_line = H Line(UCL_e);
		lcl_line = H Line(LCL_e);
		Text( {1, UCL_e[1]}, "UCL = ", round(UCL_e[1],3) );
		Text( {1, LCL_e[1]}, "LCL = ", round(LCL_e[1],3) );
	)
);

lbd_plot = Expr(
	if(IsMissing(TTD)|TTD==0,
		dtplot = dt_lookup2;
		betacol = column(dt_lookup2,"ARL beta 2");
		stddelta = std_delta;
		delta_label = "(UAD-TTD)/s",
		dtplot = dt_lookupttd;
		betacol = column(dt_lookupttd,"ARL beta TTD");
		stddelta = std_delta_TTD;
		delta_label = "(UAD-TTD)/s"
	);
	lbd_obox = 
	OutlineBox("Lambda, Delta, & ARL Beta Plots",
	HlistBox(
	ld_plot = dtplot<<Overlay Plot(
	X( :delta ),
	Y( :lambda ),
	Sort X( 0 ),
	Separate Axes( 1 ),
	Connect Points( 1 ),
	Show Points( 0 ),
	Where( :ARL alpha == arl_a ),
	SendToReport(
	Dispatch(
		{},
		"Overlay Plot",
		OutlineBox,
		{Set Title( "Lambda vs. Delta (d) for ARL alpha = "||arl_a_char )}
	),
	Dispatch(
		{},
		"106",
		ScaleBox,
		{Add Ref Line( opt_lambda[1], Dotted, "Black", "Optimal Lambda" )
			, Show Major Grid( 1 ), Show Minor Grid( 1 )
		}
	),
	Dispatch(
		{},
		"101",
		ScaleBox,
		{Add Ref Line( stddelta, Dotted, "Black", delta_label ),
		Rotated Labels( "Perpendicular" ), Show Major Grid( 1 ), Show Minor Grid( 1 )}
	),
	Dispatch( {}, "", AxisBox( 3 ), {Add Axis Label( "delta (d)" )} ),
	)
	),
	bl_plot = dt_lookupall<<Overlay Plot(
	X( :lambda ),
	Y( eval(betacol) ),
	Sort X( 0 ),
	Separate Axes( 1 ),
	Connect Points( 1 ),
	Show Points( 0 ),
	Where( :ARL alpha == arl_a & :delta == stddelta),
	SendToReport(
	Dispatch(
		{},
		"Overlay Plot",
		OutlineBox,
		{Set Title( "ARL vs. Lambda for ARL alpha="||arl_a_char||", Delta (d)="||char(stddelta) )}
	),
	Dispatch(
		{},
		"106",
		ScaleBox,
			{Add Ref Line(opt_beta,Dotted,"Black","ARL Beta"), 
			Show Major Grid( 1 ), Show Minor Grid( 1 )}
	),
	Dispatch(
		{},
		"101",
		ScaleBox,
		{Add Ref Line( opt_lambda[1], Dotted, "Black", "Optimal Lambda" ),
		Rotated Labels( "Perpendicular" ), Show Major Grid( 1 ), Show Minor Grid( 1 )}
	),
	Dispatch( {}, "", AxisBox( 2 ), {Add Axis Label( "ARL for d="||char(stddelta) )} )
	)
	),
	bd_plot = dtplot<<Overlay Plot(
	X( :delta ),
	Y( eval(betacol) ),
	Sort X( 0 ),
	Separate Axes( 1 ),
	Connect Points( 1 ),
	Show Points( 0 ),
	Where( :ARL alpha == arl_a ),
	SendToReport(
	Dispatch(
		{},
		"Overlay Plot",
		OutlineBox,
		{Set Title( "ARL vs. Delta (d) for Optimal Lambda = "||char(opt_lambda[1]))}
	),
	Dispatch(
		{},
		"106",
		ScaleBox,
			{Scale( "Log" ),
			Inc( 1 ), Minor Ticks( 8 ), Add Ref Line(
				opt_beta,
				Dotted,
				"Black",
				"ARL Beta"
			), Show Major Grid( 1 ), Show Minor Grid( 1 )}
	),
	Dispatch(
		{},
		"101",
		ScaleBox,
		{Add Ref Line( stddelta, Dotted, "Black", delta_label ),
		Rotated Labels( "Perpendicular" ), Show Major Grid( 1 ), Show Minor Grid( 1 )}
	),
	Dispatch( {}, "", AxisBox( 3 ), {Add Axis Label( "delta (d)" )} ),
	Dispatch( {}, "", AxisBox( 2 ), {Add Axis Label( "ARL" )} )
	)
	)	)//end Plot Outline box
	);
);
ewma_input = new window("EWMA Parameter Input", <<OnClose(eval(close_dts)), ewma_db);
