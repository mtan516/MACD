/*******************************************************************************************
	
	1-Proportion Analysis
	Author: Jonathan Gatlin
	Revised by:  Damien Chee
	Rev: 2
	Date: 11/23/07
	JMP Version: 5.1.1
	Starting Condition: User inputs Alpha, data type, hypothesis type, output format,
                          target proportion, sample size and X (# defects or #good units).
	Output: The script will output the sample proportion, a confidence limit, 
              and a decision based upon the p-value.  If X is left blank, the script
              will output the extreme value of X that allows passing the test. 
	Changes:
		3/7/06: Added global footer box
		3/15/06 (rev 1.2 by Paul Wenz): Improved output format
		11/23/07 (rev 2): 	Added batch processing
							Added :: scoping prefix
		

********************************************************************************************/

Try(Include("$ADDIN_HOME(com.intel.sos)\libraries\sosglbls.jsl"),
	::FooterBox=VListBox(textbox(" "))
    );

/****************************************************************************/
/************* Initialize, Launch Dialog and Extract Variables **************/
/****************************************************************************/

::button = 1;
::alpha = .05;
::datatype="# Defective Units";
::hyptype="SB";
::scale="%";
::target_p0% = .;
::x=.;
::n=.;
::label="";
::output = textbox("");

::a1="";
::b1="";
::a2="";
::b2="";
::c2="";
::a3="";
::b3="";
::n=.;
::xmod=.;
::nmod=.;
::tphat=.;
::pval=.;
::pvalt=.;
::tupper=.;
::tlower=.;
::upper=.;
::lower=.;
::tscale="";
::decision1="";
::d2="";
::py="";
::nullh="";
::alth="";
::problex=.;
::probgex="";
::minprob=.;
::txtci="";
::xloop=.;
::xpval=.;
::text="";
::xloopu=.;
::xpvalu=.;
::uflag=.;
::resultu="";
::iu=.;
::xloopl=.;
::xpvall=.;
::lflag=.;
::resultl="";
::il=.;
::tb1="";
::tb2="";
::tb3="";
::tb4="";
::tb3a="";
::tb4a="";
::rnum = 2;
::a=.;
::Start_Proc=.;
::Start_Analysis = .;
::goflag = 0;


/****** FUNCTIONS FOR BATCH ANALYSIS *****/

/***** START ANALYSIS *****/
::Start_Proc = Expr(

/***** Check for error *****/
::goflag=0;
if (NRow(dt)==0, Dialog(Title("Error"),"","There must be at least 1 variable", "",Button("OK"),""); goflag=1);

if (NCol(dt)<8 
	| char(Column name(1)) != "Variable Label (optional)" 
	| char(Column name(2)) != "Hypothesis Type" 
	| char(Column name(3)) != "Target Proportion" 
	| char(Column name(4)) != "Unit" 
	| char(Column name(5)) != "X" 
	| char(Column name(6)) != "Input Type" 
	| char(Column name(7)) != "Sample Size" 
	| char(Column name(8)) != "Alpha", 
		Dialog(Title("Error"),"","Please do not modify any columns", "","Please rerun the script", " ", Button("OK"),""); goflag=1; Promptwin<<CloseWindow);

rnum = NRow(dt);

/* Start loop for checking entries */
::chkloop=1;
::errmsg="";

while (goflag==0 & chkloop <= rnum,

/* check input type */
if (column(6)[chkloop] !="# Defective Units" & column(6)[chkloop] !="# Good Units",
	errmsg = "Input Type should be Good or Defective Units";
	goflag=1);

/* check unit type */
if (column(4)[chkloop] !="%" & column(4)[chkloop] !="DPM",
	errmsg = "Unit must be % or DPM";
	goflag=1);

/* check hypothesis type */
if (column(2)[chkloop] !="SB" & column(2)[chkloop] !="SEB" & column(2)[chkloop] !="SE" ,
	errmsg = "Hypothesis type should be SEB, SB or SE";
	goflag=1);

/* Check for alpha */	
if(Column (8)[chkloop] > .4 | Column name(8)[chkloop] <= 0, 
	errmsg = "Alpha must be between 0 and .4";
	goflag=1,
  Is Missing(Column (8)[chkloop]),
	errmsg = "Please Enter a Value For Alpha, Between 0 and .4";
	goflag=1
);

if (goflag==0,
/* Check for sample size */	
::n = Column (7)[chkloop];
::ntemp=floor(n);
if(ntemp==0 & n==0, ::nmod=0,
   ntemp==0 & n>0, ::nmod=1,
   ntemp>=1, ::nmod=modulo(n,ntemp)
);
if(Column (7)[chkloop] <= 1,
	errmsg = "Sample Size must be a positive integer > 1";
	goflag=1,
  Is Missing(Column (7)[chkloop]),
	errmsg = "Please Enter a positive integer for Sample Size";
	goflag=1,
  nmod > 0,
	errmsg = "Sample Size must be an integer";
	goflag=1
);
); /*End IF */


if (goflag == 0,

/* Check for p */
if(column(4)[chkloop]=="%",
	if(column(3)[chkloop] >= 100 | column(3)[chkloop] <= 0, 
		errmsg = "Target Proportion must be 0% < p < 100%";
		goflag=1,
	  Is Missing(column(3)[chkloop]),
		errmsg = "Please Enter a Value For Target Proportion, 0% < p < 100%";
		goflag=1
	);
);
if(column(4)[chkloop]=="DPM",
	if(column(3)[chkloop] >= 1000000 | column(3)[chkloop] <= 0,
		errmsg = "Target Proportion must be 0 DPM < p < 1,000,000 DPM";
		goflag=1,
	Is Missing(column(3)[chkloop]),
		errmsg = "Please Enter a Value For Target Proportion, 0 DPM < p < 1,000,000 DPM";
		goflag=1
	);
);

/* Check for x */
::x = Column (5)[chkloop];
::xtemp=floor(x);
if(xtemp==0 & x==0, ::xmod=0,
   xtemp==0 & x>0, ::xmod=1,
   xtemp>=1, ::xmod=modulo(x,xtemp)
);
if(column(5)[chkloop] > column(7)[chkloop] | column(5)[chkloop] < 0,
	errmsg = "X must be between 0 and Sample Size";
	goflag=1,
  Is Missing(column(5)[chkloop]),
	errmsg = "Please enter a value for X";
	goflag=1,
  xmod > 0, 
	errmsg = "X must be an integer";
	goflag=1
);
); /* End IF */


chkloop++;
); /* End While loop */


if (errmsg!="",
	Dialog(Title("Error"), errmsg, "", Button("OK"),"")
);

if (goflag==0, 
	Promptwin<<CloseWindow;
	Start_Analysis);
); /* END Start_Proc */


/***** MAIN ANALYSIS PROCEDURE *****/
::Start_Analysis = Expr(

/* Initialize summary list */
::plist = {};
::xlist = {};
::nlist = {};
::xproplist = {};
::lcllist = {};
::ucllist = {};
::pvallist = {};
::alphalist = {};
::decisionlist = {};
::titlelist={};
::datatypelist={};

for (chkloop=1, chkloop <=NRow(dt), chkloop++,

/* Get variables */
::tphat=.;
::pval=.;
::pvalt=.;
::tupper=.;
::tlower=.;
::upper=.;
::lower=.;
::tscale="";
::decision1="";
::d2="";
::py="";
::nullh="";
::alth="";
::problex=.;
::probgex="";
::minprob=.;
::txtci="";

::titlesuffix=column(1)[chkloop];
if (titlesuffix =="", titlesuffix = "Variable "||char(chkloop));
::alpha = column(8)[chkloop];
::conf=100*(1-alpha);

::x = column(5)[chkloop];
::n = column(7)[chkloop];
::hyptype = column(2)[chkloop];
::datatype = column(6)[chkloop];
::scale = column(4)[chkloop];
if(scale=="DPM", ::tscale=" DPM",
   scale=="%", ::tscale=scale);
::target_p0% = column(3)[chkloop]; 
if(scale=="%",::target_p0 = column(3)[chkloop]/100,
    scale=="DPM",::target_p0 = column(3)[chkloop]/1000000);
if(datatype=="# Defective Units", ::py="p",
   datatype=="# Good Units", ::py="y");
if(hyptype=="SE",
	::nulldesc="Statistically Equal (SE)"; 
	::altdesc="Statistically Different (SD)";
	::conftype="2-Sided");
if(hyptype=="SEB",
	::nulldesc="Statistically Equal or Better (SEB)"; 
	::altdesc="Statistically Worse (SW)";
	::conftype="1-Sided");
if(hyptype=="SB",
	::nulldesc="Statistically Equal or Worse (SEW)"; 
	::altdesc="Statistically Better (SB)";
	::conftype="1-Sided");


/* Defect SB and Yield SEB */
if(datatype=="# Defective Units" & hyptype=="SB" | datatype=="# Good Units" & hyptype=="SEB",
 tphat=x/n;
 if(scale=="%", phat=round(tphat*100,3),
    scale=="DPM", phat=round(tphat*1000000,0));
 if(x==n, pval=1,
    x!=n, pval=round(1-FDistribution(((n-x)/(x+1))*(target_p0/(1-target_p0)),2*(x+1),2*(n-x)),3));
 if(pval < .001, pvalt="<.001",
    pval >=.001, pvalt=pval);

 if(x==n, tupper=1,
    x!=n, tupper=((x+1)*FQuantile(1-alpha,2*(x+1),2*(n-x)))/((n-x)+(x+1)*FQuantile(1-alpha,2*(x+1),2*(n-x))));
 if(x==0, tlower=0,
    x!=0, tlower=(x*FQuantile(alpha,2*x,2*(n-x+1)))/((n-x+1)+x*FQuantile(alpha,2*x,2*(n-x+1))));
 if(scale=="%", upper=round(tupper*100,3); lower=round(tlower*100,3),
    scale=="DPM", upper=round(tupper*1000000,0); lower=round(tlower*1000000,0));
 
 if(datatype=="# Defective Units",lower=.);

 if(datatype=="# Defective Units",
     if(pval<=alpha,decision1=py||" is SB than "||char(target_p0%)||tscale; d2="Reject the Null Hypothesis",
        pval >alpha,decision1=py||" is SEW than "||char(target_p0%)||tscale; d2="Do Not Reject the Null Hypothesis"),
    datatype=="# Good Units",
     if(pval<=alpha,decision1=py||" is SW than "||char(target_p0%)||tscale; d2="Reject the Null Hypothesis",
        pval >alpha,decision1=py||" is SEB than "||char(target_p0%)||tscale; d2="Do Not Reject the Null Hypothesis"));
 nullh=py||" >= "||char(target_p0%)||tscale;
 alth=py||" < "||char(target_p0%)||tscale;
);


/* Defect SEB and Yield SB */
if(datatype=="# Defective Units" & hyptype=="SEB" | datatype=="# Good Units" & hyptype=="SB",
 tphat=x/n;
 if(scale=="%", phat=round(tphat*100,3),
    scale=="DPM", phat=round(tphat*1000000,0));
 if(x==0, pval=1,
    x!=0, pval=round(FDistribution(((n-x+1)/x)*(target_p0/(1-target_p0)),2*x,2*(n-x+1)),3));
 if(pval < .001, pvalt="<.001",
    pval >=.001, pvalt=pval);

 if(x==n, tupper=1,
    x!=n, tupper=((x+1)*FQuantile(1-alpha,2*(x+1),2*(n-x)))/((n-x)+(x+1)*FQuantile(1-alpha,2*(x+1),2*(n-x))));
 if(x==0, tlower=0,
    x!=0, tlower=(x*FQuantile(alpha,2*x,2*(n-x+1)))/((n-x+1)+x*FQuantile(alpha,2*x,2*(n-x+1))));
 if(scale=="%", upper=round(tupper*100,3); lower=round(tlower*100,3),
    scale=="DPM", upper=round(tupper*1000000,0); lower=round(tlower*1000000,0));

 if(datatype=="# Good Units",upper=.);

 if(datatype=="# Defective Units",
     if(pval<=alpha,decision1=py||" is SW than "||char(target_p0%)||tscale; d2="Reject the Null Hypothesis",
        pval >alpha,decision1=py||" is SEB than "||char(target_p0%)||tscale; d2="Do Not Reject the Null Hypothesis"),
    datatype=="# Good Units",
     if(pval<=alpha,decision1=py||" is SB than "||char(target_p0%)||tscale; d2="Reject the Null Hypothesis",
        pval >alpha,decision1=py||" is SEW than "||char(target_p0%)||tscale; d2="Do Not Reject the Null Hypothesis"));
 nullh=py||" <= "||char(target_p0%)||tscale;
 alth=py||" > "||char(target_p0%)||tscale;
);


/* Defect SE and Yield SE */
if(hyptype=="SE",
 tphat=x/n;
 if(scale=="%", phat=round(tphat*100,3),
    scale=="DPM", phat=round(tphat*1000000,0));
 if(x==n, problex=1,
    x!=n, problex=1-FDistribution(((n-x)/(x+1))*(target_p0/(1-target_p0)),2*(x+1),2*(n-x)));
 if(x==0, probgex=1,
    x!=0, probgex=FDistribution(((n-x+1)/x)*(target_p0/(1-target_p0)),2*x,2*(n-x+1)));
 minprob=min(problex,probgex);
 if(minprob >= .5, pval=1,
    minprob <  .5, pval=round(2*minprob,3));
 if(pval < .001, pvalt="<.001",
    pval >=.001, pvalt=pval);
 if(x==n, tupper=1,
    x!=n, tupper=((x+1)*FQuantile(1-alpha/2,2*(x+1),2*(n-x)))/((n-x)+(x+1)*FQuantile(1-alpha/2,2*(x+1),2*(n-x))));
 if(x==0, tlower=0,
    x!=0, tlower=(x*FQuantile(alpha/2,2*x,2*(n-x+1)))/((n-x+1)+x*FQuantile(alpha/2,2*x,2*(n-x+1))));
 if(scale=="%", upper=round(tupper*100,3); lower=round(tlower*100,3),
    scale=="DPM", upper=round(tupper*1000000,0); lower=round(tlower*1000000,0));
 txtci="2-Sided CI";
 nullh=py||" = "||char(target_p0%)||tscale;
 alth=py||" <> "||char(target_p0%)||tscale;
 if(pval<=alpha,decision1=py||" is SD to "||char(target_p0%)||tscale; d2="Reject the Null Hypothesis",
    pval >alpha,decision1=py||" is SE to "||char(target_p0%)||tscale; d2="Do Not Reject the Null Hypothesis");
);


/* CREATE INDIVIDUAL OUTPUT WINDOW */

::hyptab = Outlinebox("Hypotheses",
	hlistbox(
   		vlistbox(
			textbox("Null Hypothesis:"),
            		textbox("Alternative Hypothesis:")
		),
		textbox(""),textbox(""),textbox(""),
   		vlistbox(
			textbox(nullh),
            		textbox(alth)
		),
   		textbox(""),textbox(""),textbox(""),
   		vlistbox(
			textbox(nulldesc),
            		textbox(altdesc)
		)
  	)
);
::protab = OutlineBox("Sample Proportion and Confidence Intervals",
	TableBox(
		NumberColBox(datatype,{x}),
		NumberColBox("Sample Size",{n}),
		NumberColBox("Sample "||tscale,{phat}),
		NumberColBox(char(conf)||"% "||conftype||" LCL"||tscale,{lower}),
		NumberColBox(char(conf)||"% "||conftype||" UCL"||tscale,{upper})
	)
);
::restab = OutlineBox("Test Results",
	TableBox(
		StringColBox("P-Value",{char(pvalt)}),
		NumberColBox("Alpha",{alpha}),
		StringColBox("  ",{"  "}),
		StringColBox("Decision",{d2||": "||decision1})
	)
);

if (chkloop == 1, 
	::output = New Window("1-Proportion Analysis",
		::tbx = Outline Box(titlesuffix, 
			hyptab,
			protab,
			restab,
			textbox(" ")
		)
	),
	output << Append(
		::tbx = Outline Box(titlesuffix, 
			hyptab,
			protab,
			restab,
			textbox(" ")
		)
	)
);
if (NRow(dt) >1, tbx << close);

/* Update summary list */
InsertInto (titlelist, titlesuffix);
InsertInto (xlist, x);
InsertInto (nlist, n);
InsertInto (xproplist, char(phat)|| " " || tscale);
InsertInto (lcllist, lower);
InsertInto (ucllist, upper);
InsertInto (alphalist, alpha);
InsertInto (pvallist, char(pvalt));
InsertInto (decisionlist, decision1);
InsertInto (datatypelist, Word(1, datatype, "#"));

); /* END For */


::sumbox=TableBox(
	StringColBox("Variable",titlelist),
	NumberColBox("X", xlist),
	StringColBox("Data Type",datatypelist),
	NumberColBox("Sample Size", nlist),
	StringColBox("Sample Proportion", xproplist),
	NumberColBox("LCL", lcllist),
	NumberColBox("UCL", ucllist),
	NumberColBox("Alpha", alphalist),
	StringColBox("P-Value", pvallist),
	StringColBox("Decision", decisionlist)	
);

sumbox<<Table Style(Bordered);
output << Append(Outline Box("Overall 1-Proportion Analysis Summary Table",sumbox, textbox(" ")));
output << Append( FooterBox );


); /* END Start_Analysis */


/***** MAIN BATCH FUNCTION *****/
::Batch_Input = Expr(

/***** Create Input Table *****/
dt = New Table("1-Proportion Binomial Analysis", New Column ("Hypothesis Type"), addRows (2));
	Column(1) << Data Type (Character);
::incolhyp = Column(1);
	incolhyp << List Check ({"SEB", "SB", "SE"});
	incolhyp[1] = hyptype;
	incolhyp[2] = "SEB";
::incoltar = New Column ("Target Proportion", Numeric, Continuous);
	incoltar[1] = target_p0%;
::incolun = New Column ("Unit", Character);
	incolun << List Check ({"%", "DPM"});
	incolun[1] = scale;
	incolun[2] = "%";
::incolx = New Column ("X", Numeric, Continuous);
	incolx[1]=x;
::incolityp = New Column ("Input Type", Character);
	incolityp << Set Field Width (16);
	incolityp << List Check ({"# Defective Units", "# Good Units"});
	incolityp[1] = datatype;
	incolityp[2] = "# Defective Units";
::incoln = New Column ("Sample Size", Numeric, Continuous);
	incoln[1]=n;
::incolalp = New Column ("Alpha", Numeric, Continuous);
	incolalp[1]=alpha;

::hydef = New Column ("hypdef", character, hide);
hydef << formula(If( :Hypothesis Type == "",  :Hypothesis Type[Row()] = "SEB")); 
hydef << eval formula;

::hyunit = New Column ("unitdef", character, hide);
hyunit << formula(If( :Unit == "",  :Unit[Row()] = "%")); 
hyunit << eval formula;

::hytype = New Column ("typdef", character, hide);
hytype << formula(If( :Input Type == "",  :Input Type[Row()] = "# Defective Units")); 
hytype << eval formula;

::hyalp = New Column ("alpdef", numeric, hide);
hyalp << formula(If(Is Missing( :Alpha),  :Alpha[Row()] = 0.05)); 
hyalp << eval formula;

dt << move window (0, 0);
dt << size window (3000, 200);

dt<<add multiple columns("Variable Label (optional)",1,before first, Character);
	::incolname = column (1);
	incolname[1] = label;

/***** Set-up prompt window *****/
::Promptwin = NewWindow("1-Proportion Analysis Input Prompt",
	BorderBox(Left(3),Top(4),
	VListBox(
		PanelBox("", TextBox("Script has paused. Before continuing:", <<SetFontStyle("Bold") ),
				TextBox(""),
				TextBox( "	1)  Enter the all information into the input table.", <<SetFontStyle("Bold") ),
				TextBox(""),
				TextBox( "	2)  Do not rename or delete the columns.", <<SetFontStyle("Bold") ),
				TextBox(""),
				TextBox( "	3)  Make sure your reference table is the active table by clicking on it.", <<SetFontStyle("Bold") ),
				TextBox(""),
				TextBox( "When finished, click OK to resume the script", <<SetFontStyle("Bold") ),
				TextBox("")
		), //End PanelBox
		PanelBox("Action",
			LineupBox(NCol(2),
				ButtonBox("OK", Start_Proc),
				ButtonBox("Cancel", Promptwin<<CloseWindow)
			) //End LineUpBox
		) //End PanelBox
	) //End HListBox
	) //End BorderBox
); //End NewWindow



); /* END Batch_Input */



while(button==1,

 If(datatype=="# Defective Units",a1="# Defective Units";b1="# Good Units",
    datatype=="# Good Units",a1="# Good Units";b1="# Defective Units");
 If(hyptype=="SB",a2="SB";b2="SEB";c2="SE",
    hyptype=="SEB",a2="SEB";b2="SB";c2="SE",
    hyptype=="SE",a2="SE";b2="SB";c2="SEB");
 If(scale=="%",a3="%";b3="DPM",scale=="DPM",a3="DPM";b3="%");


::result=Dialog(title("1-Proportion Analysis"),
  "Provide Values for Target Proportion, X and Sample Size.",
  "Leave X blank to search for the extreme value of X that allows for passing the test.",
  " ",
  VList(
   Lineup(3,
   "Hypothesis Type",hyptype=combobox(a2,b2,c2)," ",
    " "," "," ",
    "Target Proportion", target_p0=EditNumber(target_p0%),scale=combobox(a3,b3),
    " "," "," ",
    "X", x=EditNumber(x),datatype=combobox(a1,b1), 
    "Sample Size", n=EditNumber(n)," ",
    " "," "," ", 
    "Variable Label (optional)", label=EditText(label), " ",
    " "," "," ",			
    "Alpha", alpha=EditNumber(alpha)," "), 
   " ",
   " ",
   ::batch= CheckBox("Input more than 1 variable",0),
   HList(Button("OK"), Button("Cancel"))
  )
 );


button = result["Button"];
alpha=result["Alpha"];
::conf=100*(1-alpha);
x=result["x"];
::xtemp=floor(x);
if(xtemp==0 & x==0, xmod=0,
   xtemp==0 & x>0, xmod=1,
   xtemp>=1, xmod=modulo(x,xtemp));
n=result["n"];
::ntemp=floor(n);
if(ntemp==0 & n==0, nmod=0,
   ntemp==0 & n>0, nmod=1,
   ntemp>=1, nmod=modulo(n,ntemp));
label=result["label"];
 if( IsMissing(label), titlesuffix="", 
    !IsMissing(label), titlesuffix="for "||label);
hyptype=result["hyptype"];
 if(hyptype==1,hyptype=a2,
    hyptype==2,hyptype=b2,
    hyptype==3,hyptype=c2);
datatype=result["datatype"];
 if(datatype==1,datatype=a1,
    datatype==2,datatype=b1);
scale=result["scale"];
 if(scale==1,scale=a3,
    scale==2,scale=b3);
if(scale=="DPM", tscale=" DPM",
   scale=="%", tscale=scale);
target_p0%=result["target_p0"]; 
 if(scale=="%",target_p0=result["target_p0"]/100,
    scale=="DPM",target_p0=result["target_p0"]/1000000);
if(datatype=="# Defective Units", py="p",
   datatype=="# Good Units", py="y");

::batch = result["batch"];
if (batch==1, button=0);


if(hyptype=="SE",nulldesc="Statistically Equal (SE)"; altdesc="Statistically Different (SD)";conftype="2-Sided");
if(hyptype=="SEB",nulldesc="Statistically Equal or Better (SEB)"; altdesc="Statistically Worse (SW)";conftype="1-Sided");
if(hyptype=="SB",nulldesc="Statistically Equal or Worse (SEW)"; altdesc="Statistically Better (SB)";conftype="1-Sided");

/****************************************************************************/
/************************** Error Checking **********************************/
/****************************************************************************/

/* Error Checking for Alpha and Sample Size */

if(button==1,
  if(alpha > .4 | alpha <= 0, Dialog(Title("Error"),"","Alpha must be between 0 and .4",
   "",Button("OK"),"");alphatest="out",Is Missing(alpha),Dialog(Title("Error"),
   "","Please Enter a Value For Alpha, Between 0 and .4","",Button("OK"),"");
   alphatest="missing",alphatest="OK");
  if(n <= 1, Dialog(Title("Error"), "", "Sample Size must be a positive integer > 1", 
   "", Button("OK"), "");ntest="out",Is Missing(n), Dialog(Title("Error"), "", 
   "Please Enter a positive integer for Sample Size", "", Button("OK"), ""); ntest="missing",
   nmod > 0, Dialog(Title("Error"), "", "Sample Size must be an integer", "", Button("OK"), "");
   ntest="nonint",ntest="OK");
 );

/* Error Checking for Target Prop and X */

if(button==1 & alphatest=="OK" & ntest=="OK",
 if(scale=="%",
  if(target_p0% >= 100 | target_p0% <= 0, Dialog(Title("Error"),"","Target Proportion must be 0% < p < 100%",
   "",Button("OK"),"");p0test="out",Is Missing(target_p0%),Dialog(Title("Error"),
   "","Please Enter a Value For Target Proportion, 0% < p < 100%","",Button("OK"),"");
   p0test="missing",p0test="OK"););
 if(scale=="DPM",
  if(target_p0% >= 1000000 | target_p0% <= 0, Dialog(Title("Error"),"",
   "Target Proportion must be 0 DPM < p < 1,000,000 DPM","",Button("OK"),"");p0test="out",
   Is Missing(target_p0%),Dialog(Title("Error"),"",
   "Please Enter a Value For Target Proportion, 0 DPM < p < 1,000,000 DPM","",Button("OK"),"");p0test="missing",
   p0test="OK"););
 if(x > n | x < 0, Dialog(Title("Error"),"","X must be between 0 and Sample Size",
   "",Button("OK"),"");xtest="out",Is Missing(x),xtest="missing",
   xmod > 0, Dialog(Title("Error"), "", "X must be an integer", "", Button("OK"), "");
   xtest="nonint",xtest="OK");
);

/****************************************************************************/
/************************** Begin Analysis **********************************/
/****************************************************************************/

/* Defect SB and Yield SEB */

if(button==1 & alphatest=="OK" & ntest=="OK" & p0test=="OK" & xtest=="OK",
if(datatype=="# Defective Units" & hyptype=="SB" | datatype=="# Good Units" & hyptype=="SEB",
 tphat=x/n;
 if(scale=="%", phat=round(tphat*100,3),
    scale=="DPM", phat=round(tphat*1000000,0));
 if(x==n, pval=1,
    x!=n, pval=round(1-FDistribution(((n-x)/(x+1))*(target_p0/(1-target_p0)),2*(x+1),2*(n-x)),3));
 if(pval < .001, pvalt="<.001",
    pval >=.001, pvalt=pval);

 if(x==n, tupper=1,
    x!=n, tupper=((x+1)*FQuantile(1-alpha,2*(x+1),2*(n-x)))/((n-x)+(x+1)*FQuantile(1-alpha,2*(x+1),2*(n-x))));
 if(x==0, tlower=0,
    x!=0, tlower=(x*FQuantile(alpha,2*x,2*(n-x+1)))/((n-x+1)+x*FQuantile(alpha,2*x,2*(n-x+1))));
 if(scale=="%", upper=round(tupper*100,3); lower=round(tlower*100,3),
    scale=="DPM", upper=round(tupper*1000000,0); lower=round(tlower*1000000,0));
 
 if(datatype=="# Defective Units",lower=.);

 if(datatype=="# Defective Units",
     if(pval<=alpha,decision1=py||" is SB than "||char(target_p0%)||tscale; d2="Reject the Null Hypothesis",
        pval >alpha,decision1=py||" is SEW than "||char(target_p0%)||tscale; d2="Do Not Reject the Null Hypothesis"),
    datatype=="# Good Units",
     if(pval<=alpha,decision1=py||" is SW than "||char(target_p0%)||tscale; d2="Reject the Null Hypothesis",
        pval >alpha,decision1=py||" is SEB than "||char(target_p0%)||tscale; d2="Do Not Reject the Null Hypothesis"));
 nullh=py||" >= "||char(target_p0%)||tscale;
 alth=py||" < "||char(target_p0%)||tscale;
);
);

/* Defect SEB and Yield SB */

if(button==1 & alphatest=="OK" & ntest=="OK" & p0test=="OK" & xtest=="OK",
if(datatype=="# Defective Units" & hyptype=="SEB" | datatype=="# Good Units" & hyptype=="SB",
 tphat=x/n;
 if(scale=="%", phat=round(tphat*100,3),
    scale=="DPM", phat=round(tphat*1000000,0));
 if(x==0, pval=1,
    x!=0, pval=round(FDistribution(((n-x+1)/x)*(target_p0/(1-target_p0)),2*x,2*(n-x+1)),3));
 if(pval < .001, pvalt="<.001",
    pval >=.001, pvalt=pval);

 if(x==n, tupper=1,
    x!=n, tupper=((x+1)*FQuantile(1-alpha,2*(x+1),2*(n-x)))/((n-x)+(x+1)*FQuantile(1-alpha,2*(x+1),2*(n-x))));
 if(x==0, tlower=0,
    x!=0, tlower=(x*FQuantile(alpha,2*x,2*(n-x+1)))/((n-x+1)+x*FQuantile(alpha,2*x,2*(n-x+1))));
 if(scale=="%", upper=round(tupper*100,3); lower=round(tlower*100,3),
    scale=="DPM", upper=round(tupper*1000000,0); lower=round(tlower*1000000,0));

 if(datatype=="# Good Units",upper=.);

 if(datatype=="# Defective Units",
     if(pval<=alpha,decision1=py||" is SW than "||char(target_p0%)||tscale; d2="Reject the Null Hypothesis",
        pval >alpha,decision1=py||" is SEB than "||char(target_p0%)||tscale; d2="Do Not Reject the Null Hypothesis"),
    datatype=="# Good Units",
     if(pval<=alpha,decision1=py||" is SB than "||char(target_p0%)||tscale; d2="Reject the Null Hypothesis",
        pval >alpha,decision1=py||" is SEW than "||char(target_p0%)||tscale; d2="Do Not Reject the Null Hypothesis"));
 nullh=py||" <= "||char(target_p0%)||tscale;
 alth=py||" > "||char(target_p0%)||tscale;
);
);

/* Defect SE and Yield SE */

if(button==1 & alphatest=="OK" & ntest=="OK" & p0test=="OK" & xtest=="OK",
if(hyptype=="SE",
 tphat=x/n;
 if(scale=="%", phat=round(tphat*100,3),
    scale=="DPM", phat=round(tphat*1000000,0));
 if(x==n, problex=1,
    x!=n, problex=1-FDistribution(((n-x)/(x+1))*(target_p0/(1-target_p0)),2*(x+1),2*(n-x)));
 if(x==0, probgex=1,
    x!=0, probgex=FDistribution(((n-x+1)/x)*(target_p0/(1-target_p0)),2*x,2*(n-x+1)));
 minprob=min(problex,probgex);
 if(minprob >= .5, pval=1,
    minprob <  .5, pval=round(2*minprob,3));
 if(pval < .001, pvalt="<.001",
    pval >=.001, pvalt=pval);
 if(x==n, tupper=1,
    x!=n, tupper=((x+1)*FQuantile(1-alpha/2,2*(x+1),2*(n-x)))/((n-x)+(x+1)*FQuantile(1-alpha/2,2*(x+1),2*(n-x))));
 if(x==0, tlower=0,
    x!=0, tlower=(x*FQuantile(alpha/2,2*x,2*(n-x+1)))/((n-x+1)+x*FQuantile(alpha/2,2*x,2*(n-x+1))));
 if(scale=="%", upper=round(tupper*100,3); lower=round(tlower*100,3),
    scale=="DPM", upper=round(tupper*1000000,0); lower=round(tlower*1000000,0));
 txtci="2-Sided CI";
 nullh=py||" = "||char(target_p0%)||tscale;
 alth=py||" <> "||char(target_p0%)||tscale;
 if(pval<=alpha,decision1=py||" is SD to "||char(target_p0%)||tscale; d2="Reject the Null Hypothesis",
    pval >alpha,decision1=py||" is SE to "||char(target_p0%)||tscale; d2="Do Not Reject the Null Hypothesis");
);
);

/****************************************************************************/
/******************** Create Output Window **********************************/
/****************************************************************************/

if(button==1 & alphatest=="OK" & ntest=="OK" & p0test=="OK" & xtest=="OK",

Output=new window("1-Proportion Analysis "||titlesuffix,

 Outlinebox("Hypotheses "||titlesuffix,
  hlistbox(
   vlistbox(tb1=textbox("Null Hypothesis:"),
            tb2=textbox("Alternative Hypothesis:")),
   textbox(""),textbox(""),textbox(""),
   vlistbox(tb3=textbox(nullh),
            tb4=textbox(alth)),
   textbox(""),textbox(""),textbox(""),
   vlistbox(tb3a=textbox(nulldesc),
            tb4a=textbox(altdesc))
  )
 ), 
 OutlineBox("Sample Proportion and Confidence Intervals "||titlesuffix,
	TableBox(
		NumberColBox(datatype,{x}),
		NumberColBox("Sample Size",{n}),
		NumberColBox("Sample "||tscale,{phat}),
		NumberColBox(char(conf)||"% "||conftype||" LCL"||tscale,{lower}),
		NumberColBox(char(conf)||"% "||conftype||" UCL"||tscale,{upper})
	)
 ),
 OutlineBox("Test Results "||titlesuffix,
	TableBox(
		StringColBox("P-Value",{char(pvalt)}),
		NumberColBox("Alpha",{alpha}),
		StringColBox("  ",{"  "}),
		StringColBox("Decision",{d2||": "||decision1})
	)
 ),
 FooterBox
);

wait(.02);
output<<size window(500,250);

);

/************** End Output **************************/


/* Search for the critical X for Defect SEB or Yield SB */

if(button==1 & alphatest=="OK" & ntest=="OK" & p0test=="OK" & xtest=="missing",
if(datatype=="# Defective Units" & hyptype=="SEB" | datatype=="# Good Units" & hyptype=="SB",
if(hyptype=="SEB", ls="largest",
   hyptype=="SB", ls="smallest");
xloop=floor(n*target_p0);
if(xloop==0, xpval=1,
   xloop> 0, xpval=FDistribution(((n-xloop+1)/xloop)*(target_p0/(1-target_p0)),2*xloop,2*(n-xloop+1)));
if(xpval > alpha, flag=0,
   xpval <=alpha, flag=1);
i=1;
while(flag==0,  
  if(i==1, xloop=xloop, 
     i>1,  xloop=xloop+1);
  if(xloop==0, xpval=1,
     xloop> 0, xpval=FDistribution(((n-xloop+1)/xloop)*(target_p0/(1-target_p0)),2*xloop,2*(n-xloop+1)));
  if(xpval > alpha & xloop < n, flag=0,
     xpval > alpha & xloop== n, flag=1; 
       text="Impossible to show "||hyptype||" to "||char(target_p0%)||tscale||".  Increase the Sample Size.",
     xpval <=alpha, flag=1; if(hyptype=="SEB", xloop=xloop-1);
       text="The "||ls||" value of X that results in a decision of "||hyptype||" is X = "||char(xloop)||".");
  i=i+1;
);
);
);

/* Search for the critical X for Defect SB or Yield SEB */

if(button==1 & alphatest=="OK" & ntest=="OK" & p0test=="OK" & xtest=="missing",
if(datatype=="# Defective Units" & hyptype=="SB" | datatype=="# Good Units" & hyptype=="SEB",
if(hyptype=="SB", ls="largest",
   hyptype=="SEB", ls="smallest");
xloop=ceiling(n*target_p0);
if(xloop==n, xpval=1,
   xloop< n, xpval=1-FDistribution(((n-xloop)/(xloop+1))*(target_p0/(1-target_p0)),2*(xloop+1),2*(n-xloop)));
if(xpval > alpha, flag=0,
   xpval <=alpha, flag=1);
i=1;
while(flag==0,  
  if(i==1, xloop=xloop, 
     i>1,  xloop=xloop-1);
  if(xloop==n, xpval=1,
     xloop< n, xpval=1-FDistribution(((n-xloop)/(xloop+1))*(target_p0/(1-target_p0)),2*(xloop+1),2*(n-xloop)));
  if(xpval > alpha & xloop > 0, flag=0,
     xpval > alpha & xloop==0, flag=1; 
       text="Impossible to show "||hyptype||" to "||char(target_p0%)||tscale||".  Increase the Sample Size.",
     xpval <=alpha, flag=1; if(hyptype=="SEB", xloop=xloop+1);
       text="The "||ls||" value of X that results in a decision of "||hyptype||" is X = "||char(xloop)||".");
  i=i+1;
);
);
);


/* Search for the critical X for SE Tests */
/* Search Upper Tail*/

if(button==1 & alphatest=="OK" & ntest=="OK" & p0test=="OK" & xtest=="missing",
if(hyptype=="SE",

xloopu=floor(n*target_p0);
if(xloopu==0, xpvalu=1,
   xloopu> 0, xpvalu=FDistribution(((n-xloopu+1)/xloopu)*(target_p0/(1-target_p0)),2*xloopu,2*(n-xloopu+1)));
if(xpvalu > alpha/2, uflag=0,
   xpvalu <=alpha/2, uflag=1);
iu=1;
while(uflag==0,  
  if(iu==1, xloopu=xloopu, 
     iu>1,  xloopu=xloopu+1);
  if(xloopu==0, xpvalu=1,
     xloopu> 0, xpvalu=FDistribution(((n-xloopu+1)/xloopu)*(target_p0/(1-target_p0)),2*xloopu,2*(n-xloopu+1)));
  if(xpvalu > alpha/2 & xloopu < n, uflag=0,
     xpvalu > alpha/2 & xloopu== n, uflag=1; 
       resultu="notpossible",
     xpvalu <=alpha/2, uflag=1;
       resultu="possible");
  iu=iu+1;
);
/* Search Lower Tail */
xloopl=ceiling(n*target_p0);
if(xloopl==n, xpvall=1,
   xloopl< n, xpvall=1-FDistribution(((n-xloopl)/(xloopl+1))*(target_p0/(1-target_p0)),2*(xloopl+1),2*(n-xloopl)));
if(xpvall > alpha/2, lflag=0,
   xpvall <=alpha/2, lflag=1);
il=1;
while(lflag==0,  
  if(il==1, xloopl=xloopl, 
     il>1,  xloopl=xloopl-1);
  if(xloopl==n, xpvall=1,
     xloopl< n, xpvall=1-FDistribution(((n-xloopl)/(xloopl+1))*(target_p0/(1-target_p0)),2*(xloopl+1),2*(n-xloopl)));
  if(xpvall > alpha/2 & xloopl > 0, lflag=0,
     xpvall > alpha/2 & xloopl==0, lflag=1; 
       resultl="notpossible",
     xpvall <=alpha/2, lflag=1;
       resultl="possible");
  il=il+1;
);
if(resultu=="possible" & resultl=="possible", 
    text="Any X <= "||char(xloopl)||" or X >= "||char(xloopu)||" will result in a decision of SD.",
   resultu=="possible" & resultl=="notpossible", 
    text="Only an X >= "||char(xloopu)||" will result in a decision of SD.",
   resultu=="notpossible" & resultl=="possible", 
    text="Only an X <= "||char(xloopl)||" will result in a decision of SD.",
   resultu=="notpossible" & resultl=="notpossible", 
    text="Not possible to show SD.  Increase the sample size.");
);
);

/* Present Results of Search */

if(button==1 & alphatest=="OK" & ntest=="OK" & p0test=="OK" & xtest=="missing",
output=new window("Value of Critical X "||titlesuffix,
 outlinebox("Value of Critical X "||titlesuffix,
  vlistbox(
   tb1=textbox(text)
  )
 )
);
tb1<<setfontsize(10);
);

output<<size window(450,400);

);

if (batch==1, Batch_Input);
